<?npl
--[[
Title: download the zip form github
Author: big
Date: 2016/10/9
Desc: 
]]

NPL.load("(gl)script/ide/System/Core/ToolBase.lua");
NPL.load("(gl)script/kids/3DMapSystemApp/localserver/localserver.lua");

addheader('Access-Control-Allow-Origin', '*'); 

local localInstall = commonlib.inherit(commonlib.gettable("System.Core.ToolBase"));

localInstall:Property({"PluginFolder", "Mod/", auto=true, desc="default plugin folder"});

function localInstall:ctor()
	
end

function localInstall:ComputeLocalFileName(url)
	local filename = self:GetPluginFolder()..url:gsub("[%W%s]+", "_"):gsub("_zip$", ".zip");

	if(not filename:match("%.zip$")) then
		filename = filename..".zip";
	end

	return filename;
end

function localInstall:StartDownloader(src, dest, callbackFunc, cachePolicy)
	local function OnSucceeded(filename)
		self.isFetching = false;
		if(callbackFunc) then
			callbackFunc(true, filename)
		end
	end

	local function OnFail(msg)
		self.isFetching = false;
		if(callbackFunc) then
			callbackFunc(false, msg);
		end
	end
	
	local ls = System.localserver.CreateStore(nil, 1);
	
	if(self.isFetching) then
		OnFail("a previous download is not finished");
		return;
	end
	self.isFetching = true;

	local res = ls:GetFile(System.localserver.CachePolicy:new(cachePolicy or "access plus 5 days"),
		src,
		function (entry)
			if(dest) then
				if(ParaIO.CopyFile(entry.payload.cached_filepath, dest, true)) then
					local cached_filepath = entry.payload.cached_filepath;
					ParaIO.DeleteFile(cached_filepath);
					--  download complete
					LOG.std(nil, "info", "PluginLoader", "successfully downloaded file from %s to %s", src, dest);
					OnSucceeded(dest);
				else
					LOG.std(nil, "info", "PluginLoader", "failed copy file from %s to %s", src, dest);
					OnFail("failed to copy file to dest folder. The file may be in use.");
				end	
			else
				LOG.std(nil, "info", "PluginLoader", "successfully downloaded file to %s", entry.payload.cached_filepath);
				OnSucceeded(entry.payload.cached_filepath);
			end
		end,
		nil,
		function (msg, url)
			local text;
			self.DownloadState = self.DownloadState;
			if(msg.DownloadState == "") then
				text = "Downloading ..."
				if(msg.totalFileSize) then
					self.totalFileSize = msg.totalFileSize;
					self.currentFileSize = msg.currentFileSize;
					text = string.format("Downloading: %d/%dKB", math.floor(msg.currentFileSize/1024), math.floor(msg.totalFileSize/1024));
				end
			elseif(msg.DownloadState == "complete") then
				text = "Download completed!";
			elseif(msg.DownloadState == "terminated") then
				text = "Download terminated";
				OnFail(text);
			end
			if(text) then
				echo(text); -- TODO: display in UI?
			end
		end
	);
	if(not res) then
		OnFail("Duplicated download");
	end
end

function localInstall:DownloadZip(url, callbackFunc, refreshMode)
	refreshMode  = refreshMode  or "auto";
	callbackFunc = callbackFunc or echo;

	-- destination file path
	local dest = self:ComputeLocalFileName(url);
	log({"dest",dest});
	-- get http headers only
	System.os.GetUrl(url, function(err, msg)
		if(msg.rcode ~= 200 or not msg.header) then

			LOG.std(nil, "info", "PluginLoader", "remote plugin can not be fetched from %s, a previous downloaded one at %s is used", url, dest);
			callbackFunc(true, dest);

		else

			local content_length = msg.header:match("Content%-Length: (%d+)");
			log({"content_length",content_length});
			if(content_length) then
				local local_filesize = ParaIO.GetFileSize(dest);
				log({"local_filesize",local_filesize});

				if(local_filesize == content_length) then

					-- we will only compare file size: since github/master does not provide "Last-Modified: " header.
					LOG.std(nil, "info", "PluginLoader", "remote plugin size not changed, previously downloaded one %s is used", dest);
					callbackFunc(true, dest);

				else
					
					LOG.std(nil, "info", "PluginLoader", "remote(%d) and local(%d) file size differs", content_length, local_filesize);
					self:StartDownloader(url, dest, callbackFunc);

				end
			end

		end
	end, "-I");

end

local install = localInstall:new();

if(is_ajax()) then
	add_action(
		'wp_ajax_downloadzip',
		function()
			local url = request:get('url');

			log({"url",url});

			install:DownloadZip(
				"https://github.com/tatfook/NPLCAD/archive/master.zip", 
				function(bSucceed, msg)
					log({"msg",msg}); 
				end
			);
		end
	);
	return;
end


wp_enqueue_script("jqueryui", "/wp-includes/js/jquery/jquery-ui.min.js"); 
wp_enqueue_script("bootstrap", "/wp-includes/js/bootstrap/js/bootstrap.min.js");
wp_enqueue_script("angular", "/wp-includes/js/angular/angular.min.js");
wp_enqueue_script("angular-ui", "/wp-includes/js/angular/ui-bootstrap-tpls-1.3.3.min.js");
wp_enqueue_script("localInstallController","/wp-includes/js/plugin/localInstallController.js")
wp_enqueue_style("plugin", "/wp-admin/css/plugin.css");
PAGE_NO_SIDE_BAR = true;
?>
<div class="plugin" ng-app="plugin" ng-controller="localInstallController">
	<h1>
        Do you want to install the following <br/> plugin to your local computer?
	</h1>

    <div class="infor-details">
        <div class="item">
            <label>Package name</label>
            <div>displayName</div>
        </div>
        <div class="item">
            <label>Author</label>
            <div>version</div>
        </div>
        <div class="item">
            <label>Version</label>
            <div>projectUpdate</div>
        </div>
    </div>
    
    <div class="button">
        <button ng-click="install()">Yes</button>
        <button ng-click="cancel()">Cancel</button>
    </div>
</div>