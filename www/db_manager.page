<?npl
--[[
Title: table database manager
Author: wuxiangan, LiXizhi, 
Date: 2016/10/1
Desc: 
]]

WP_USE_MINI_LOADER = true;
include_once("script/apps/WebServer/admin/wp-main.page");

wp_enqueue_script("jquery", "/wp-includes/js/jquery/jquery.min.js", nil, "1.11.1"); 
wp_enqueue_style("bootstrap", "/wp-includes/js/bootstrap/css/bootstrap.min.css");
wp_enqueue_style("sensitive_style", "/wp-content/themes/sensitive/css/style.css"); 
wp_enqueue_script("bootstrap", "/wp-includes/js/bootstrap/js/bootstrap.min.js");

-- if(not is_admin()) then
  -- exit("access denied")
-- end

local p = request:getparams();

if(tonumber(p.api) == 1) then
	
	NPL.load("(gl)script/ide/Files.lua");
	NPL.load("(gl)script/ide/System/Database/TableDatabase.lua");
	
	local TableDatabase = commonlib.gettable("System.Database.TableDatabase");
	local params = request:getparams();
	
	local function getDBPath() 
		local dbPath = params.dbPath or "database/npl/";
		if(not dbPath:match("[/\\]$")) then
			dbPath = dbPath .. "/";
		end
		return dbPath;
	end
	
	local getTables = function()
		local tableNames = {};
		local databaseDir = getDBPath();
		local files = commonlib.Files.Find(nil, databaseDir, 0, 500, "*.db", nil);
		if files then
			for i, file in ipairs(files) do
				tableNames[#tableNames+1] = string.match(file.filename,"(.*)%.");
			end
		end
		return tableNames;
	end

	local getIndexes = function() 
		local db_handle = TableDatabase:new():connect(getDBPath(), function() end);
		--local db_handle = TableDatabase:new():connect('D:/NPL/NPLProject/wikicraft/database/npl/', function() end);
		local tableName = params.tableName;
		local table = db_handle:collection(tableName);
		table:exec("SELECT name as indexName FROM indexes;", function(err, rows) resume(err, rows) end)
		-- table:find({}, function(err,rows) resume(err,rows) end);
		err, rows = yield();
		local indexes = {};
		for i, obj in pairs(rows) do
			for j, value in pairs(obj) do
				indexes[#indexes + 1] = value;
			end
		end
			
		return indexes;
	end

	local getTableRecord = function() 
		local db_handle = TableDatabase:new():connect(getDBPath(), function() end);
		-- local db_handle = TableDatabase:new():connect('D:/NPL/NPLProject/wikicraft/database/npl/', function() end);
		local tableName = params.tableName;
		local skip = (params.page - 1) * params.pageSize;
		local sqlStr = "select count(*) as count from Collection;";
		local table = db_handle:collection(tableName);
		table:exec(sqlStr, function(err, data) resume(err, data) end)
		err, data = yield();
		local count = data[1].count;
		sqlStr = string.format("select * from Collection limit %d, %d;", skip, params.pageSize);
		table:exec(sqlStr, function(err, data) resume(err, data) end)
		err, data = yield();

		return {total=count, table = data};
	end
	
	local function add_action(methodName, callback)
		local action = string.gsub(methodName, "wp_ajax_", "");
		
		if(params.action == action and type(callback) == "function") then
			callback();
		end
	end

	add_action('wp_ajax_beautify',function()
		if(params.code) then
			local o = NPL.LoadTableFromString(params.code);
			if(o) then
				response:send({code=commonlib.serialize(o, true)});
				return;
			end
		end
		response:send({});
	end);
	
	add_action('wp_ajax_tojson',function()
		local o = params.code and NPL.LoadTableFromString(params.code);
		if(o) then
			response:send(o);
		else
			response:status(404):send({});
		end
	end);
	
	-- db_handle:EnableSyncMode(true);
	add_action('wp_ajax_curd',function()
		local db_handle = TableDatabase:new():connect(getDBPath(), function() end);
		local tableName = params.tableName;
		local operation = params.operation;
		local query = params.query;
		local update = params.update;
		local table = db_handle:collection(tableName);

		if (operation == "select") then
			table:find(query, function(err,rows) resume(err,rows) end);
		elseif (operation == "insert") then
			table:insertOne(query, update, function(err, rows) resume(err, rows) end);
		elseif (operation == "update") then
			table:updateOne(query, update, function(err, rows) resume(err, rows) end);
		elseif (operation == "replace") then
			table:replaceOne(query, update, function(err, rows) resume(err, rows) end);
		elseif (operation == "delete") then
			table:deleteOne(query, resume);
		else
			table:find(query, function(err,rows) resume(err,rows) end);
			-- return "parament error";
		end

		err, rows = yield();

		wp_send_json(rows);
	end)

	add_action('wp_ajax_removeIndex', function() 
		local db_handle = TableDatabase:new():connect(getDBPath(), function() end);
		--local db_handle = TableDatabase:new():connect('D:/NPL/NPLProject/wikicraft/database/npl/', function() end);
		local tableName = params.tableName;
		local table = db_handle:collection(tableName);
		table:removeIndex({params.index}, function() resume() end);
		yield();
		wp_send_json(getIndexes());
	end)

	add_action('wp_ajax_getIndexes', function()
		wp_send_json(getIndexes());
	end)

	add_action('wp_ajax_setDBPath', function() 
		local dbPath = getDBPath();
		if(dbPath and dbPath~="") then
			string.gsub(dbPath,"\\","/");
			if (string.sub(dbPath, string.len(dbPath)) ~= '/') then
				dbPath = dbPath .. '/';
			end
			wp_send_json(getTables());
		else
			wp_send_json({}, true);
		end
	end)

	add_action('wp_ajax_getDBPath', function()
		wp_send_json(getDBPath());
	end)

	add_action('wp_ajax_tables', function() 
		wp_send_json(getTables());
	end) 
	
	add_action('wp_ajax_getTableRecord', function() 
		--local db_handle = TableDatabase:new():connect(getDBPath(), function() end);
		wp_send_json(getTableRecord());
	end)
	
	return;
end
wp_enqueue_script("jqueryui", "/wp-includes/js/jquery/jquery-ui.min.js"); 
wp_enqueue_script("bootstrap", "/wp-includes/js/bootstrap/js/bootstrap.min.js");
wp_enqueue_script("angular", "/wp-includes/js/angular/angular.min.js");
wp_enqueue_script("angular-ui", "/wp-includes/js/angular/ui-bootstrap-tpls-1.3.3.min.js");
wp_enqueue_script("ngStorage", "/wp-includes/js/angular/ngStorage.js");
wp_enqueue_script("ace", "/wp-includes/js/ace/ace.js"); 
PAGE_NO_SIDE_BAR = true;
?>
<div ng-app="TableDBClient" ng-controller="TableDBClientCtrl">
    <div class="row">
        <div class="col-md-12 form-group">
            <div class="col-md-8 row">
                <form class="form-horizontal" role="form">
                    <div class="col-md-6">
						<label class="control-label">Enter Database Directory:</label>
                        <input type="text" class="form-control" placeholder="database/npl" ng-model="dbPath" ng-blur="setDBPath()">
                    </div>
                    <div class="col-md-6">
						<label class="control-label">Select Table:</label>
                        <select class="form-control" ng-model="selectedTable" ng-change="onTableChanged()">
                            <option ng-repeat="table in tables" value="{{table}}">{{table}}</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="col-md-8 row" style="margin-top:10px;">
				<div class="col-md-12">
					<div class="dropdown pull-left">
						<button type="button" class="btn dropdown-toggle" id="dropdownMenu" data-toggle="dropdown">Indexes
							<span class="caret"></span>
						</button>
						<ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu">
							<li role="presentation" ng-repeat="index in indexes">
								<a role="menuitem" tabindex="-1" ng-click="editIndex(index)">{{index}}</a>
							</li>
						</ul>
					</div>
					<div class="pull-left" style="margin-left:5px;" ng-repeat="editIndex in editIndexes">
						<button type="button" class="btn bg-info">{{editIndex}}</button>
						<button type="button" class="btn" ng-click="removeIndex(editIndex)"><span class="glyphicon glyphicon-remove"></span></button>
						<button type="button" class="btn" ng-click="hideIndex(editIndex)"><span class="glyphicon glyphicon-minus"></span></button>
					</div>
					<button type="button" class="btn pull-right" ng-click="newRecord()"><span class="glyphicon glyphicon-plus"></span>New Record</button>
				</div>
            </div>
            <div class="col-md-12 row"  style="margin-top:10px;">
                <div class="col-md-8">
					<table class="table table-striped" style="word-wrap: break-word;table-layout: fixed;">
						<th class="col-md-2">id</th>
						<th class="col-md-8">NPL Data Table</th>
						<th class="col-md-2"></th>
						<tr ng-repeat="obj in tableRecord">
							<td>{{obj.id}}</td>
							<td><div>{{obj.value}}<div></td>
							<td>
								<button type="button" class="btn btn-default pull-right" ng-click="deleteRecord(obj.id)"><span class="glyphicon glyphicon-trash"></span></button>
								<button type="button" class="btn btn-default pull-right" ng-click="editRecord(obj)"><span class="glyphicon glyphicon-edit"></span></button>
							</td>
						</tr>
					</table>
					<ul uib-pagination total-items="totalItems" ng-model="page" ng-change="pageChanged()" max-size="5" class="pagination-sm" boundary-links="true" items-per-page="pageSize"></ul>
                </div>
				<div class="col-md-4">
					<div class="panel panel-default">
						<div class="panel-heading">
							{{operation == 'insert' ? 'Add' : 'Modify'}} Record
						</div>
						<div class="panel-body">
							<div id="editor">{}</div>
							<div style="padding:10px 10px">
								<button type="button" ng-click="submitRecord()" class="btn btn-default" style="width:100%">{{operation == 'insert' ? 'Add' : 'Modify'}}</button>
							</div>
							<div style="color: red;width:100%;">{{errMsg}}</div>
						</div>
					</div>
				</div>
            </div>
        </div>
    </div>
</div>
<script>
    var app = angular.module('TableDBClient', ['ngStorage', 'ui.bootstrap'])
	.config(['$localStorageProvider', function ($localStorageProvider) {
        $localStorageProvider.setKeyPrefix('NPLDBManager');
    }]);
    app.controller('TableDBClientCtrl', function ($scope, $http, $localStorage, $location) {
        $scope.tables = [];
        $scope.tableRecord = [];
        $scope.indexes = [];
        $scope.editIndexes = [];
        $scope.pageSize = 10;
        $scope.page = 1;
        $scope.totalItems = 0;
        $scope.operation = 'insert';
		$scope.editRecordId = '';
		$scope.errMsg = "";
		$scope.$storage = $localStorage.$default({
			dbPath: "database/npl",
			selectedTable: "",
        });
		$scope.dbPath = $location.search().dbPath || $scope.$storage.dbPath;
		$scope.selectedTable = $location.search().selectedTable || $scope.$storage.selectedTable;
		$location.search("selectedTable", $scope.selectedTable);

        var urlPrefix =  '/db_manager.page?api=1&action=';

		$scope.onTableChanged = function() {
			$scope.$storage.selectedTable = $scope.selectedTable;
			$location.search("selectedTable", $scope.selectedTable)
			$scope.getTableRecord();
		};

		$scope.pageChanged = function() {
			$scope.getTableRecord();
        };

        $scope.newRecord = function () {
            $scope.operation = 'insert';
			$scope.errMsg = "";
			ace.edit("editor").setValue('{}');
        }
		
        $scope.editRecord = function (obj) {
			$scope.errMsg       = "";
            $scope.operation    = 'update';
			$scope.editRecordId = obj.id;
			$http.post(urlPrefix + 'beautify',{code:obj.value}).then(function (response) {
				var code = response.data.code;
				ace.edit("editor").setValue(code);
			})
        }

        $scope.submitRecord = function () {
			var code = ace.edit("editor").getValue();
			$http.post(urlPrefix+'tojson',{code:code}).then(function (response) {
				var obj = response.data;
				if ($scope.operation == 'insert') {
					$scope.addRecord(obj);
				} else {
					// $scope.updateRecord($scope.editRecordId, obj);
					$scope.replaceRecord($scope.editRecordId, obj);
				}
				$scope.newRecord();
				$scope.errMsg = "";
			}).catch(function (response) {
			    $scope.errMsg = "data format error";
			});
        }

        $scope.editIndex = function (index) {
            if ($scope.editIndexes.indexOf(index) < 0) {
                $scope.editIndexes.push(index);
            }
        }
        $scope.hideIndex = function (index) {
            $scope.editIndexes.splice($scope.editIndexes.indexOf(index),1);
        }

        $scope.removeIndex = function (index) {
			if(confirm("are you sure to delete the index `"+index+"`?")){
				$scope.editIndexes.splice($scope.editIndexes.indexOf(index),1);
				$http.post(urlPrefix+'removeIndex',{dbPath:$scope.dbPath, tableName:$scope.selectedTable,index}).then(function (response) {
					$scope.indexes = response.data;
				})
			}
        }

        $scope.setDBPath = function () {
			$scope.$storage.dbPath = $scope.dbPath;
			$location.search("dbPath", $scope.dbPath);
            $http.post(urlPrefix+'setDBPath', {dbPath:$scope.dbPath}).then(function(response){
                $scope.tables = response.data;
            });
        }
        
        $scope.getTableRecord = function () {
			$scope.tableRecord = [];
            var params = {dbPath:$scope.dbPath, tableName:$scope.selectedTable, page:$scope.page, pageSize:$scope.pageSize}
            $http.post(urlPrefix+"getTableRecord", params).then(function (response) {
                $scope.tableRecord = response.data.table;
				$scope.totalItems = response.data.total;
            });
			$scope.getIndexes();
        }

        $scope.getIndexes = function () {
            $http.post(urlPrefix+'getIndexes',{dbPath:$scope.dbPath, tableName:$scope.selectedTable}).then(function (response) {
                $scope.indexes = response.data;
            });
        }

        $scope.updateRecord = function (id, obj) {
            var params = {operation: "update", dbPath:$scope.dbPath, tableName: $scope.selectedTable, query: {_id:id}, update: obj}
            $http.post(urlPrefix+'curd', params);
			$scope.getTableRecord();
        }

		$scope.replaceRecord = function (id, obj) {
            var params = {operation: "replace", dbPath:$scope.dbPath, tableName: $scope.selectedTable, query: {_id:id}, update: obj}
            $http.post(urlPrefix+'curd', params);
			$scope.getTableRecord();
        }

        $scope.deleteRecord = function (id) {
            var params = {operation: "delete", dbPath:$scope.dbPath, tableName: $scope.selectedTable, query: {_id:id}, update: {}}
            $http.post(urlPrefix+'curd', params);
			$scope.getTableRecord();
        }
        
        $scope.addRecord = function (obj) {
            var params = {operation: "insert", dbPath:$scope.dbPath, tableName: $scope.selectedTable, query: {}, update: obj}
            $http.post(urlPrefix+'curd', params);
			$scope.getTableRecord();
        }

		if(typeof Page != 'undefined') {
			Page.ShowSideBar(false);
		}
		// fetch last result
		$scope.setDBPath();
		$scope.getTableRecord();
        initEditor();


		function initEditor() {
            var editor = ace.edit("editor");
            editor.setTheme("ace/theme/github");
            editor.session.setMode("ace/mode/lua");
            editor.setAutoScrollEditorIntoView(true);
            editor.setOption("maxLines", 200);
            editor.setOption("minLines", 5);
			editor.renderer.setShowGutter(false);
        }

		// lua object str convert to json str 
		function parse(text) {
			return function (text) {
				var result = "";
				var index = 0;
				while (text[index] != '{' && index < text.length) {
					index++;
				}
				while (index < text.length) {
					// 去key左侧空白
					do {
						result += text[index];  // { , }
						index++;
						if (index >= text.length) {
							return result;
						}
						while (text[index] == ' ' || text[index] == '\t' || text[index] == '\r' || text[index] == '\n') {
							index++
							if (index >= text.length) {
								return result;
							}
						}
					} while (text[index] == '}' || text[index] == ',');

					result += '"'; // key 左 "
					while (text[index] != ' ' && text[index] != '\t' && text[index] != '\r' && text[index] != '\n' && text[index] != '=') {
						result += text[index];  // key
						index++;
						if (index >= text.length) {
							return result;
						}
					}
					result += '"'; // key 右 "
					// 去=左侧空白
					while (text[index] == ' ' || text[index] == '\t' || text[index] == '\r' || text[index] == '\n') {
						index++;
						if (index >= text.length) {
							return result;
						}
					}
					if (text[index] == '=') {
						result += ':';
						index++;
					} else {
						console.log("数据格式错误");
						//return;
					}
					// 去value左侧空白
					while (text[index] == ' ' || text[index] == '\t' || text[index] == '\r' || text[index] == '\n') {
						index++
						if (index >= text.length) {
							return result;
						}
						;
					}

					if (text[index] >= '0' && text[index] <= '9') { // value = number
						while (text[index] >= '0' && text[index] <= '9') {
							result += text[index];  // value
							index++;
						}
					} else if (text[index] == '"' || text[index] == "'") {   // value = string
						strFlag = text[index];
						result += text[index];
						index++;
						while (!(text[index - 1] != '\\' && text[index] == strFlag)) {
							result += text[index];
							index++;
							if (index >= text.length) {
								return result;
							}
						}
						result += text[index];
						index++;
					} else {                                        // string = object
						continue;
					}
				}
				return result;
			}(text).replace(/,}/g, '}');
		}
    });
</script>