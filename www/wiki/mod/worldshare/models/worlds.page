<?npl
--[[
Title: worlds
Author: Big
Date: 2017/6/9
]]
include_once(WIKI_ROOT .. "models/abstract/multi_user_base.page");
include_once(WIKI_ROOT .. "models/user.page");
-- include_once(WIKI_ROOT .. "models/site_data_source.page");
include_once("./worlds_stats.page");
include_once("./worlds_star.page");

--NPL.load("(gl)script/ide/System/Encoding/base64.lua");
NPL.load("(gl)script/ide/System/Encoding/basexx.lua");
--local Encoding = commonlib.gettable("System.Encoding");
local Encoding = commonlib.gettable("System.Encoding.basexx");

local worlds = inherit(models.abstract.multi_user_base, gettable("models.worlds"));

worlds.db_name = "worlds";
worlds.max_items_per_user = 1000;

local user = models.user:new();

function worlds:ctor()
	self:addfield("userid","number",false,10);
	--giturl
	self:addfield("giturl", "string", false, 300);
	--worlds name
	self:addfield("worldsName","string",false,100);
	--worlds file path
	self:addfield("filePath","string",false);
	--worlds modify date
	self:addfield("revision","string",false,30);
	--worlds update data
	self:addfield("modDate","string",false,30);
	--worlds id
	self:addfield("opusId","number",false,10);
	--recommend world
	self:addfield("isRecommend","string",false,10);
	--gitlab project id
	self:addfield("gitlabProjectId","number",false,10);
	--dataSourceType
	self:addfield("dataSourceType","string",false,10);
	--hasPreview
	self:addfield("hasPreview","string",false);
	--readme
	--self:addfield("readme","string",false,1000);
	--preview
	self:addfield("preview","string",false,800);
	--filesTotals
	self:addfield("filesTotals","string",false,100);
	--commitId
	self:addfield("commitId","string",false,100);
	--world download zip url
	self:addfield("download","string",false);

	---------- following is query only, not saved to columns ----------------
	--page number
	self:addfield("page","number",false,10);
	--page amount
	self:addfield("amount","number",false,10);
	--sort method
	self:addfield("sort","string",false,10);
end

function worlds:get(params)
	local err, query = self:validateQuery(params);
	local userid;

	if(not query.userid)then
		self:ensureAuthenticated();
		userid = self:getUserId();

		if(not userid) then
			return {err = -1, msg = "user is not exist"};
		end
	else
		userid = query.userid;
	end

	if(not query.page) then
		query.page = 1;
	end

	if(not query.amount) then
		query.amount = 2;
	end

	if(not query.sort) then
		query.sort = nil;
	end

	local skip  = query.page == 1 and 0 or query.page * query.amount - query.amount;
	local limit = query.amount;

	self:db():find({["+userid"] = {userid,limit=limit,skip=skip}},resume);
	local err, response = yield(true);

	user:db():findOne({_id = tonumber(userid)}, resume);
	local _, userinfo = yield();

	if(not err and userinfo) then
		for key,value in ipairs(response or {}) do
			value.username = userinfo.username;
		end
	end

	if(not err) then
		if(query.sort == nil) then
			return {error = {id = 0} , data = response};
		elseif(query.sort == "modDate") then
			local modDateTable = {};

			for key,value in ipairs(response or {}) do
				for modDateEle in string.gmatch(value.modDate,"[^-]+") do
					modDateTable[#modDateTable+1] = modDateEle;
				end

				value.formatDate = tonumber(self:formatDate(modDateTable));

				modDateTable = {};
			end

			local compareResponse = commonlib.copy(response);

			for i=1,#response do
				for j=i+1,#compareResponse do
					if(response[i].formatDate > compareResponse[j].formatDate) then
						local new   = response[i];
						response[i] = compareResponse[j];
						response[j] = new;
					end
				end
			end

			if(response) then
				return {error = {id = 0} , data = response};
			else
				return {error = {id = -1} , msg="response is nil"};
			end
		end
	else
		return {error = {id = -1}, msg="database err"};
	end
end

function worlds:api_getWorldById(params)
	local err, query = self:validateQuery(params);

	if(not query.opusId) then
		return {error = {id = -1} , msg = "opusId is not set"};
	end

	self:db():findOne({_id=query.opusId},resume);
	local err, opusResponse = yield(true);

	if(not opusResponse or not opusResponse.viewTimes) then
		opusResponse = {};
		opusResponse.viewTimes = 0;
	end

	self:db():updateOne({_id=query.opusId},{viewTimes = opusResponse.viewTimes + 1},resume);
	local err,opusTimesResponse = yield(true);

	if(not err) then
		local userParams = {};
		userParams._id   = opusResponse.userid;
		
		local userInfor  = models.user:new():api_getminiprofile(userParams);

		for key,value in pairs(userInfor or {}) do
			if(key ~= "_id") then
				opusResponse[key] = value;
			end
		end

		if(opusResponse) then
			return {error = {id = 0} , data = opusResponse};
		else
			return {error = {id = -1} , msg = "opusResponse is empty"};
		end
	else
		return {error = {id = -1} , msg = "database err"};
	end
end

function worlds:api_getWorldByFilePath(params)
	response:status(503);
	local err, query = self:validateQuery(params);

	if (not query or not query['filePath']) then
		response:status(404);
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end

	local filePath = {};

	for item in string.gmatch(query['filePath'] or "", "([^/]*)") do
    if (item and #item > 0) then
        filePath[#filePath + 1] = item
    end
	end

	local username = filePath[1];
	local worldName = string.match(filePath[3] or '', "world_(%S+)");

	local userinfo = user:api_getByName({ username = username });
	local userid = userinfo['data']['_id'];

	local result = self:api_getWorldByIdWithName({ userid = userid, worldsName = worldName });

	return result;
end

function worlds:api_getWorldByIdWithName(params)
	response:status(503);
	local err, query = self:validateQuery(params);

	if (not query or not query['worldsName'] or not query['userid']) then
		response:status(404);
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end

	self:db():findOne({["+userid+worldsName"] = {query.userid, query.worldsName}}, resume);
	local err, result = yield(true);

	if (not err) then
		if (result) then
			response:status(200);
			return errors:wrap(nil, result);
		else
			response:status(404);
			return errors:wrap(errors.NOT_FOUND)
		end
	end

	return errors:wrap(errors.SERVER_INNER_ERROR);
end

function worlds:api_refresh(params)
	local err, query = self:validateQuery(params);
	self:ensureAuthenticated();

	local userid = self:getUserId();

	if(not userid) then
		return {error = {id = -1} , msg = "user is not exist"};
	end

	if(not query.worldsName) then
		return {error = {id = -1} , msg = "worldsName is not exist"};
	end

	local userInfor = models.user:new():get({});

	self:db():findOne({["+userid+worldsName"] = {userid,query.worldsName}},resume);
	local err,response = yield(true);

	if(not err) then
		local worldInfo = {};
		worldInfo.modDate    = query.modDate;
		worldInfo.worldsName = query.worldsName;
		worldInfo.revision   = query.revision;
		worldInfo.hasPreview = query.hasPreview;
		worldInfo.preview    = query.preview;
		worldInfo.commitId   = query.commitId;
		worldInfo.filesTotals     = query.filesTotals;
		worldInfo.gitlabProjectId = query.gitlabProjectId;
		worldInfo.dataSourceType  = query.dataSourceType;
		worldInfo.download = query.download;

		if(not response or not next(response)) then
			local dataSource = models.user:new():api_getDefaultSiteDataSource({username = userInfor.username});
			local defaultDataSource = {};

			for key,value in ipairs(dataSource.data or {}) do
				if(value._id == userInfor.dataSourceId) then
						defaultDataSource = value;
					break;
				end
			end

			if(defaultDataSource["type"] == "github") then
				worldInfo.giturl = "https://github.com/" .. defaultDataSource["dataSourceUsername"] .. "/" .. worlds.base32(query.worldsName);
			elseif(defaultDataSource["type"] == "gitlab") then
				worldInfo.giturl = "http://git.keepwork.com/" .. defaultDataSource["dataSourceUsername"] .. "/" .. worlds.base32(query.worldsName);
			end

			local insertResponse = worlds._super.create(self, worldInfo);

			if(insertResponse) then
				return {error = {id = 0} , data = {opusId = insertResponse._id}};
			else
				return {error = {id = -1} , msg = "insertResponse is nil"};
			end
		else
			self:db():updateOne({["+userid+worldsName"] = {userid,query.worldsName}},worldInfo,resume);

			local err,updateResponse = yield(true);

			if(updateResponse) then
				return {error = {id = 0} , data = {opusId = updateResponse._id}};
			else
				return {error = {id = -1} , msg = "updateResponse is nil"};
			end
		end
	end
end

function worlds:create()
end

function worlds:delete(params)
	local err, query = self:validateQuery(params);
	local userid;

	self:ensureAuthenticated();
	userid = self:getUserId();

	if(not userid) then
		return {error = {id = -1} , msg = "user is not exist"};
	end

	if(not query.worldsName) then
		return {error = {id = -1} , msg = "worldsName is not exist"};
	end

	self:db():deleteOne(query,resume);

	local err,response = yield(true);

	if(not err)then
		local params  = {};
		params.method = "minus";

		models.worlds_stats:new():update(params);
		return {error = {id = 0} , msg = "delete success"};
	else
		return {error = {id = -1} , msg = "delete fail"};
	end
end

function worlds:update()
end

-- =转成-equal  +转成-plus  /转成-slash
function worlds.base32(text)
	if(text) then
		local notLetter = string.find(text,"%A%A");

		if(notLetter) then
			text = Encoding.to_base32(text);

			text = text:gsub("[=]"  , "-equal");
			text = text:gsub("[%+]" , "-plus");
			text = text:gsub("[/]"  , "-slash");

			text = "world_base32_" .. text;
		else
			text = "world_" .. text;
		end

		--LOG.std(nil,"debug","text",text);

		return text;
	else
		return nil;
	end
end

function worlds.unbase32(text)
	if(text) then
		local notLetter = string.find(text,"world_base32_");

		if(notLetter) then
			text = text:gsub("world_base32_","");

			text = text:gsub("[-equal]" , "=");
			text = text:gsub("[-plus]"  , "+");
			text = text:gsub("[-slash]" , "/");

			return Encoding.from_base32(text);
		else
			text = text:gsub("world_","");

			return text;
		end
	else
		return nil;
	end
end

function worlds.strRepeat(num,str)
	local strRepeat = "";

	for i=1,num do
		strRepeat = strRepeat .. str;
	end

	return strRepeat;
end

function worlds:formatDate(modDateTable)
	local newModDate = "";

	if(#modDateTable[1] ~= 4 and #modDateTable[1] < 4) then
		local num = 4 - #modDateTable[1];
		newModDate = newModDate .. self.strRepeat(num,0) .. modDateTable[1];
	elseif(#modDateTable[1] == 4) then
		newModDate = newModDate .. modDateTable[1];
	end

	if(#modDateTable[2] ~= 2 and #modDateTable[2] < 2) then
		local num = 2 - #modDateTable[2];
		newModDate = newModDate .. self.strRepeat(num,0) .. modDateTable[2];
	elseif(#modDateTable[2] == 2) then
		newModDate = newModDate .. modDateTable[2];
	end

	if(#modDateTable[3] ~= 2 and #modDateTable[3] < 2) then
		local num = 2 - #modDateTable[3];
		newModDate = newModDate .. self.strRepeat(num,0) .. modDateTable[3];
	elseif(#modDateTable[3] == 2) then
		newModDate = newModDate .. modDateTable[2];
	end

	if(#modDateTable[4] ~= 2 and #modDateTable[4] < 2) then
		local num = 2 - #modDateTable[4];
		newModDate = newModDate .. self.strRepeat(num,0) .. modDateTable[4];
	elseif(#modDateTable[4] == 2) then
		newModDate = newModDate .. modDateTable[4];
	end

	if(#modDateTable[5] ~= 2 and #modDateTable[5] < 2) then
		local num = 2 - #modDateTable[5];
		newModDate = newModDate .. self.strRepeat(num,0) .. modDateTable[5];
	elseif(#modDateTable[5] == 2) then
		newModDate = newModDate .. modDateTable[5];
	end

	return newModDate;
end

--function worlds:api_getRecommendOpus(params)
--	local err, query = self:validateQuery(params);
--	-- LOG.std(nil,"debug","queryapi_getRecommendOpus",query);
--
--	self:ensureAuthenticated();
--	local userid = self:getUserId();
--
--	if(not query.opusId) then
--		return {error=-1,msg="opusId is not set"};
--	end
--
--	if(not query.page) then
--		query.page = 1;
--	end
--
--	if(not query.amount) then
--		query.amount = 2;
--	end
--
--	if(not query.sort) then
--		query.sort = "_id";
--	end
--
--	local skip  = query.page == 1 and 0 or query.page*query.amount-query.amount;
--	local limit = query.amount;
--
--	self:db():findOne({_id = query.opusId},resume);
--	local err,responseA = yield(true);
--
--	-- LOG.std(nil,"debug","responseA",responseA);
--
--	if(not err) then
--		self:db():find({["+userid+isRecommend"] = {responseA.userid,"true",limit=limit,skip=skip}},resume);
--		local err,responseB = yield(true);
--
--		-- LOG.std(nil,"debug","responseB",responseB);
--
--		if(not err) then
--			for key,value in ipairs(responseB) do
--				local params = {};
--				params.statsType = "worldsStarTotals" .. value._id;
--
--				local stats = models.worlds_stats:new():get(params);
--				value.starTotals = stats;
--
--				if(userid)then
--					local starParams = {};
--					starParams.opusId = value._id;
--
--					local res = models.worlds_star:new():get(starParams);
--					
--					if(res.error == 1)then
--						value.isMyStar = false;
--					elseif(res.error == 0)then
--						value.isMyStar = true;
--					end
--				end
--			end
--
--			return {error = 0  , data=responseB};
--		else
--			return {error = -1 , msg="database err"};
--		end
--	end
--end

--function worlds:api_recommendOpus(params)
--	local err, query = self:validateQuery(params);
--	local userid;
--
--	self:ensureAuthenticated();
--	userid = self:getUserId();
--
--	if(not userid) then
--		return {error=-1,msg="user is not exist"};
--	end
--
--	local userinfor = models.user:new():get({});
--
--	if(userinfor.isadmin == nil or userinfor == false) then
--		return {error=-1,msg="prohibit not administrator operation"};
--	end
--
--	if(not query.opusId) then
--		return {error=-1,msg="opusId is not set"};
--	end
--
--	if(not query.isRecommend) then
--		return {error=-1,msg="isRecommend is not set"};
--	end
--
--	if(query.isRecommend == "true")then
--		local params  = {};
--		params.method = "add";
--
--		params.statsType = "worldsRecommendTotals";
--		models.worlds_stats:new():inside_update(params);
--
--		params.statsType = "worldsRecommendTotalsUser" .. userid;
--		models.worlds_stats:new():inside_update(params);
--	elseif(query.isRecommend == "false")then
--		local params  = {};
--		params.method = "minus";
--
--		params.statsType = "worldsRecommendTotals";
--		models.worlds_stats:new():inside_update(params);
--
--		params.statsType = "worldsRecommendTotalsUser" .. userid;
--		models.worlds_stats:new():inside_update(params);
--	end
--
--	self:db():updateOne({_id = query.opusId},
--					    {isRecommend = query.isRecommend},resume);
--
--	local err,response = yield(true);
--
--	if(not err) then
--		return {error=0,msg="set successful"};
--	else
--		return {error=-1,msg="set fail"};
--	end
--end
