<?npl
--[[
Title: routing wiki module page/api request
Author: LiXizhi
Date: 2016/10/27
Desc: redirect AJAX URL to model functions
Reference: http://guides.rubyonrails.org/routing.html

/wiki/mod/[name]/[pagename] --> wiki/mod/[name]/pages/[pagename].page (normal web page)
/api/mod/[name]/models/[modelname] --> wiki/mod/[name]/models/[modelname].page (models api)
/api/mod/[name]/[modelname] --> wiki/mod/[name]/models/[modelname].page (page ajax)
]]
local path = pagename() or "";
local modname, isAPI;
isAPI, modname, path = path:match("^/?(%w+)/mod/([^/]+)(.*)");
if(not modname) then
	return
end

-- this is for hosting wikicraft project in a different folder than webroot such as in NPL code wiki.
MOD_WEBROOT = WIKI_WEBROOT.."mod/"..modname .. "/";
MOD_ROOT = dirname(__FILE__)..modname.."/";

if(isAPI == "api") then	
	-- Allow for cross-domain requests (from the frontend). 
	send_origin_headers();
	addheader( 'Content-Type', 'text/html'); 
	addheader( 'X-Robots-Tag', 'noindex'); 
	send_nosniff_header();
	nocache_headers();	

	local modelname, params = path:match("^/?models/([%w_]+)/?(.*)")
	if(modelname) then
		local modelfilename = MOD_ROOT.."models/"..modelname..".page";
		if(not file_exists(modelfilename)) then
			return response:status(404):send({message="invalid model"});
		end
		include_once(modelfilename);
		
		local model = models and models[modelname];
		if(not model) then
			return response:status(404):send({message="model not found"});
		else
			model = model:new();
		end

		local func_name = params and params:match("^(%w+)");
		if(func_name) then
			if(func_name == "new") then
				if(model.create) then
					local result = model:create(request:getparams());
					return response:send(result, true);
				end
			else
				local name = "api_"..func_name;
				if(model[name]) then
					local result = model[name](model, request:getparams())
					return response:send(result, true);
				end
			end
		end

		-- redirect CRUD URL to method in model.
		local req_method = request:GetMethod();
		if(req_method == "GET" or req_method == "POST") then
			if(model.get) then
				local result = model:get(request:getparams());
				return response:send(result, true);
			end
		elseif(req_method == "PUT") then
			if(model.update) then
				local result = model:update(request:getparams());
				return response:send(result, true);
			end
		elseif(req_method == "DELETE") then
			if(model.delete) then
				local result = model:delete(request:getparams());
				return response:send(result, true);
			end
		end
	else
		-- only allow ajax in wiki folder
		path = path:match("^/?([^/]*)");
		if(not path or path == "") then
			path = "index";
		end
		local filename = MOD_ROOT.."pages/"..path..".page";
		if(file_exists(filename)) then
			include(filename);
		else
			echo("invalid path");
		end
	end
	return;
else
	-- dynamic page has no cache headers
	response:nocache_headers();
end

path = path:match("^/?([^/]*)");
if(not path or path == "") then
	path = "index";
end
local filename = MOD_ROOT.."pages/"..path..".page";
if(file_exists(filename)) then
	echo("<script>window.skipClientWiki = true;</script>")
	echo(format("<script>window.MOD_WEBROOT = \"%s\";</script>", MOD_WEBROOT));
	include(filename);
end
?>

