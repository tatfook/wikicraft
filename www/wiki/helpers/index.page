<?npl
--[[
Title: load helper file
Author: wuxiangan
Date: 2017/3/13
]]

NPL.load("(gl)script/apps/WebServer/mem_cache.lua")
mem_cache = commonlib.gettable("WebServer.mem_cache"):GetInstance()

NPL.load("(gl)script/ide/System/Encoding/jwt.lua")
jwt = commonlib.gettable("System.Encoding.jwt")

-- 定义一个全局变量空间  其它全局变量放到此变量里病注释使用情况
KEEPWORK={}
-- KEEPWORK.config     用户程序配置
-- KEEPWROK.mem_cache  缓存

KEEPWORK["mem_cache"] = mem_cache

-- 获取对端ip
function getpeername()
	return request:header("Cdn-Src-Ip") or request:header("X-Real-IP")
end

include_once(WIKI_ROOT .. "helpers/aho_corasick.page")
include_once(WIKI_ROOT .. "helpers/config.page")
include_once(WIKI_ROOT .. "helpers/sms.page")
include_once(WIKI_ROOT .. "helpers/filter.page")
include_once(WIKI_ROOT .. "helpers/cros.page")
include_once(WIKI_ROOT .. "helpers/log.page")
WIKI_ENV="www"
WIKI_DB_PATH="database/www/"

-- json web token  encode/decode
function encodeJWT(payload, expire)
	local secret = KEEPWORK["config"]["default"]["wiki"]["secret"]
	return jwt.encode(payload, secret["token_secret"], nil, expire or secret["token_expire"] or 3600)
end

function decodeJWT(token)
	local secret = KEEPWORK["config"]["default"]["wiki"]["secret"]
	return jwt.decode(token, secret["token_secret"], true)
end

--function getTokenStr() 
	--local authHeader = request:header('Authorization')
	--if not authHeader then
		--return nil
	--end
	--local token = authHeader:match("%s+(%S+)");
	--return token
--end

function setAuthCookie(token)
	--response:set_cookie("token", token)	
end

function getTokenInfo()
	local authHeader = request:header('Authorization') 
	local token = request:get_cookie("token")
	if authHeader then
		token = authHeader:match("%s+(%S+)")
	end

	if not token then
		return nil
	end

	return decodeJWT(token)
end

function getUsername() 
	if request.username then
		return request.username
	end

	local token = getTokenInfo()
	if not token or not token.username then
		return nil
		
	end

	request.username = token.username

	return token.username
end

function getUser()
	if request.user then
		return request.user
	end

	local username = getUsername()

	if not username then
		return nil
	end

	db.user:findOne({["+username"]={username}}, resume)

	local _, user = yield()

	request.user = user

	return user
end

function toJson(t) 
	return commonlib.Json.Encode(t)
end

function fromJson(s)
	return commonlib.Json.Decode(s)
end

function datetime()
	 return  ParaGlobal.GetDateFormat("yyyy-MM-dd") .. " " .. ParaGlobal.GetTimeFormat("HH:mm:ss")
end

-- 初始化数据库
function init_db()
	if(db) then
		return;
	end

	local pos = string.find(WIKI_ROOT,"/")
	local name = WIKI_ROOT
	if pos then
		name = string.sub(WIKI_ROOT, 1, pos-1)
	end

	if name == "rls" or name == "test" then
		WIKI_ENV = name
	else
		WIKI_ENV = "www"
	end

	WIKI_DB_PATH = "database/" .. WIKI_ENV .. "/"
	db = TableDatabase:new():connect(WIKI_DB_PATH, function() end);
end

-- call this function to ensure we are authenticated in json request
-- @return username
function ensureAuthenticated()
	if(request.userid~=nil) then
		return request.userid
	end
	if (not request:header('Authorization')) then
		response:status(401):send({ message = 'Please make sure your request has an Authorization header' })
		exit()
	end
	local token = request:header('Authorization'):match("%s+(%S+)")
	local payload, err = decodeJWT(token)
	if(not payload) then
		if(err == "Invalid signature") then
			response:status(401):send({ message = "invalid token"})
		elseif(err == "Not acceptable by exp") then
			response:status(401):send({ message = 'Token has expired' })
		else
			response:status(401):send({ message = err })
		end
		exit()
	end
	request.username = payload.username
	request.userid = payload.userId
	return request.userid
end

-- @return userid or false if not authenticated
function checkAuthenticated()
	if(request.userid~=nil) then
		return request.userid
	end
	local authHeader = request:header('Authorization')
	if (authHeader) then
		local token = authHeader:match("%s+(%S+)")
		local payload, err = decodeJWT(token)
		if(payload) then
			request.username = payload.username
			request.userid = payload.userId
		end
	end
	return request.userid
end

-- 初始wiki module
function init_wiki_module()
	local isWebServerStart = mem_cache:get("isWebServerStart")
	if not isWebServerStart then
		mem_cache:set("isWebServerStart", true)
		include_once(WIKI_ROOT .. "helpers/wiki_module.page")
	end
end

-- 获取bust version
function getBustVersion()
	local version = mem_cache:get("bustVersion")
	if not version then
		version = tostring(os.time())
		mem_cache:set("bustVersion", version)
	end

	return version
end

-- 获取服务器启动日期
function getServerUpdateTime()
	local serverUpdateTime = mem_cache:get("serverUpdateTime")
	if not serverUpdateTime then
		serverUpdateTime = ParaGlobal.GetDateFormat("yyyy-MM-dd") .. " " ..  ParaGlobal.GetTimeFormat("HH:mm:ss")
		mem_cache:set("serverUpdateTime", serverUpdateTime)
	end
	-- KEEPWORK["serverUpdateTime"] = serverUpdateTime
	return serverUpdateTime
end

function load_sensitive_word()
	local file = ParaIO.open(WIKI_ROOT .. "html/sensitive_word.txt", "r")
	local words = {}
	if not file then
		return words
	end

	repeat
		line = file:readline()
		if line and line ~= "" then
			words[#words+1] = line
		end
	until (line == nil)
	
	file:close()
	
	return words
end

function sensitive_word_match(s)
	local t = mem_cache:get("aho_corasick")
	if not t then
		return {}
	end

	local ac = KEEPWORK["aho_corasick"]
	return ac.match(t, s)
end


-- 执行启动一次的功能
function execute_once()
	local isWebServerStart = mem_cache:get("isWebServerStart")
	if isWebServerStart then
		return
	end

	mem_cache:set("isWebServerStart", true)

	local ac = KEEPWORK["aho_corasick"]
	local words = load_sensitive_word()
	local t = ac.build(words)
	mem_cache:set("aho_corasick", t)
end

function init()
	init_db()
	--init_wiki_module()
	request_before_filter()
	-- log(getTokenInfo())
	
	execute_once()
end

init()

















