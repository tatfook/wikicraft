<?npl
--[[
Title: get website from database
Author: LiXizhi
Date: 2016/5/30
Desc: 
]]
if(not db) then	
	include_once(WIKI_ROOT.."config/db.page");
end
include_once(WIKI_ROOT.."config/buildin.page");
include_once(WIKI_ROOT.."models/project.page");
include_once(WIKI_ROOT.."models/website_pages.page");

-- current project
local current_proj = {};
local is_buildin_site = false;

-- current website {url="", host="", stars=number, is_stared=boolean}
local curSite;

-- get website information by name
-- @return buildin_site {url, host}
-- such as {url="LiXizhi/wiki", host="github", name=string}
-- it can also be the project's wiki {url="LiXizhi/NPLRuntime/wiki", host="github", stars=number, is_stared=boolean}
local function fetchWebsite(sitename)
	sitename = sitename or "wiki";
	local site = buildin_website[string.lower(sitename)];
	if(not site) then
		local projs = models.project:new():get({name=sitename});
		if(projs and projs[1]) then
			local proj = projs[1];
			current_proj = proj;
			site = {
				name = proj.name, 
				project_id = proj._id,
				userid=proj.userid, 
				store = proj.store,
				stars=proj.stars, 
				createdate=proj.createdate, 
				desc=proj.desc, 
				color=proj.color, 
				fork=proj.fork, 
				private=proj.private
			};

			local store = proj.store;
			if(store) then
				local url = store:match("^%w+://github%.com/(.+)$")
				if(url) then
					site.url = url;
					site.host = "github";
				end
			end
		else
			site = {name=sitename, userid=1};
		end
	else
		is_buildin_site = true;
	end
	curSite = site;
	return site;
end

-- get the root url where we will query raw content of the web site. 
-- rootUrl must be url that can be freely downloaded by appending [pagename] to it.
-- @return rootUrl
function getSiteRootURL(site)
	if(site) then
		if(site.url) then
			if(not site.host or site.host == "github") then
				local rootUrl;
				local siteName, projectName, wiki = site.url:match("^/?([^/]+)/([^/]+)/?(.*)")
				if(wiki == "wiki") then
					rootUrl = "https://raw.githubusercontent.com/wiki/"..siteName.."/"..projectName.."/";
				else
					rootUrl = "https://raw.githubusercontent.com/"..siteName.."/"..projectName.."/master/";
				end
				return rootUrl;
			else
				-- TODO other database store like coding.net?
			end
		end
		if(site.name and site.userid) then
			-- our own site provider. "/api/wiki/models/rawdata/[siteName]/"..[pagename]
			local rootUrl = "/api/wiki/models/raw/"..site.name.."/";
			return rootUrl;
		end
	end
end

local siteName, pageName, isSingleSite;
function SetWikiPage(siteName_, pageName_)
	siteName, pageName = siteName_ or siteName, pageName_ or pageName;
end

function GetSiteName()
	return siteName;
end

function GetPageName()
	return pageName;
end

-- whether this web site is mapped via CNAME
function IsSingleSite()
	return isSingleSite;
end

-- get the current project or just return an empty table
function GetProject()
	return current_proj;
end

-- server side pre-calculation here:
-- calculate website name and page name from current url
function RenderServerWikiScript()
	if(not siteName or not pageName) then
		local host = request:GetHost() or "";
		local siteName_ = (request:GetHost() or ""):match("([%w]+)%.[%w]+%.[%w]+");
		-- 排除IP地址访问
		if (host:match("^%d+%.%d+%.%d+%.%d+$")) or (host:match("^%d+%.%d+%.%d+%.%d+:%d+$")) then
			siteName_ = nil
		end
		isSingleSite = false;
		if(siteName_ and siteName_~="www") then
			isSingleSite = true;
			siteName = siteName_;
			pageName = request:url():match("^/?([^/]*)");	
		else
			local url = commonlib.Encoding.url_decode(request:url());
			siteName, pageName = url:match("^/?([^/]+)/?([^/]*)");	
			if(not siteName) then
				siteName, pageName = "wiki", "home"
			end
		end
	end
	-- siteName = siteName or "wiki";
	if(siteName) then
		curSite = fetchWebsite(siteName);
		if(curSite) then
			curSite.rootUrl = getSiteRootURL(curSite);
			curSite.siteName = siteName;
			curSite.pageName = pageName;
			curSite.isSingleSite = isSingleSite;
			echo(format("<script>window.siteInfo = %s;</script>", json_encode(curSite)));
		end
	end
	echo(format("<script>WIKI_WEBROOT = \"%s\";</script>", WIKI_WEBROOT));
end

-- server side cached content for google agent and special wiki/* pages, etc. 
-- @note: `wiki/*` is mapped to predefined pages at `wiki/pages/*.page`
-- @note: `[name]/_XXX` is mapped to predefined pages at `wiki/pages/special/_XXX.page`
function RenderServerWikiContent()
	if(GetSiteName() == "wiki") then
		local filename = WIKI_ROOT .. 'pages/' .. GetPageName() .. ".page";
		if(file_exists(filename)) then
			include(filename);
			echo("<script>window.skipClientWiki = true;</script>")
			return;
		end
		if(pageName and pageName:match("^_")) then
			local filename = WIKI_ROOT .. 'pages/special/' .. pageName:gsub("^_", "") .. ".page";
			if(file_exists(filename)) then
				include(filename);
				echo("<script>window.skipClientWiki = true;</script>")
				return;
			end
		end
	end
	
	-- 本地数据源
	if (not is_buildin_site) or (GetSiteName() == "wiki") then 
		local filename = WIKI_ROOT .. 'pages/container.page';
		if(file_exists(filename)) then
			include(filename);
			echo("<script>window.skipClientWiki = true;</script>")
			return;
		end
	end 
end

