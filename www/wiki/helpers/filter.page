<?npl
--[[
Title: request filter
Author: wuxiangan
Date: 2017/3/13
]]

include_once(WIKI_ROOT .. 'models/vip.page')

local filter = {
	API_URL_PREFIX="api/wiki/models/",
	LOGIN = "login",
}

-- 访问频率限制函数
function requestCountLimit(obj)
	local validCount = obj.count or 100
	local validTime = obj.time or 300
	local typ = obj.typ or ""
	return function()
		local ip = getpeername()
		-- log(ip or "---------------")
		local key = "filter_" .. (typ or "") .. "_" .. (ip or "")
		-- 自定义key 
		if type(obj["getKey"]) == "function" then
			local ok, k = obj.getKey(key)
			if not ok then
				return false
			end

			key = k
		end

		local curTime = os.time()
		local limitObj = mem_cache:get(key) or {key=key, count=0, level=1, validCount=validCount,validTime=curTime + validTime}
		local result = true

		-- 访问次数加1
		limitObj.count = limitObj.count + 1
		-- 访问次数超了 时间未超  禁止请求
		if (limitObj.count > limitObj.validCount) and (curTime < limitObj.validTime)  then
			result = false
		elseif (limitObj.count > limitObj.validCount) and (curTime > limitObj.validTime) then
			limitObj.count = 1
			limitObj.level = limitObj.level + 1
			limitObj.validTime = limitObj.level * validTime + curTime
		elseif (limitObj.count <= limitObj.validCount) and (curTime > limitObj.validTime) then
			limitObj.count = 1
			limitObj.validTime = limitObj.level * validTime + curTime
		else
		end
		--log(limitObj, true)
		--LOG.std(nil, "error", "keepwork", limitObj)
		mem_cache:set(key, limitObj)

		return result
	end
end

-- 认证函数
function authenticated()
	if (not request:header('Authorization')) then
		return false
	end

	local token = request:header('Authorization'):match("%s+(%S+)");
	local payload = decodeJWT(token)
	--LOG.std(nil, "error", "keepwork", payload)
	if not payload then
		return false
	end
	request.username = payload.username
	return true
end

-- 认证的vip用户
function authenticatedVip() 
	if (not request:header('Authorization')) then
		return false
	end

	local token = request:header('Authorization'):match("%s+(%S+)");
	local payload = decodeJWT(token)
	--LOG.std(nil, "info", "keepwork", payload)
	if not payload then
		return false
	end
	local username = payload.username
	local vipDB = models.vip:new()

	-- 是否vip用户
	if not vipDB:api_isValidVip({username=username}).data then
		return false
	end

	return true
end

-- 敏感词过滤
function sensitiveWordFilter(params)
	params = params or request:getparams()
	if type(params) ~= "table" then
		params = {params}
	end

	local str = ""
	for _, value in pairs(params) do
		str = str .. tostring(value)
	end

	local result = sensitive_word_match(str)
	if not result or #result == 0 then
		return true
	end

	return false
end

function testFilter()
	log("test filter")
	return true
end

KEEPWORK["request_before_filter"] = {
	["wiki/test"] = {
		testFilter,
	},
	-- 登录限制
	[filter.API_URL_PREFIX .. "user/login"] = {
		requestCountLimit({
			typ=filter.LOGIN,
			getKey=function(key)
				local params = request:getparams()
				if not params.username then
					return false, ""
				end

				key = key .. "_" .. params.username
				return true, key
			end,
			count=20,
		}),
	},
	-- 注册限制
	[filter.API_URL_PREFIX .. "user/register"] = {
		requestCountLimit({typ="register"}),
		--sensitiveWordFilter,
	},
	-- 获得用户配置信息
	[filter.API_URL_PREFIX .. "user/getProfile"] = {
		authenticated,
	},
	-- 邮件验证
	[filter.API_URL_PREFIX .. "user/verifyEmailOne"] = {
		requestCountLimit({typ="verifyEmailOne", count=30, time=300}),
	},
	-- 手机验证
	[filter.API_URL_PREFIX .. "verifyCellphoneOne"] = {
		requestCountLimit({typ="verifyCellphoneOne", count=30, time=300}),
	},
	-- 添加cname
	[filter.API_URL_PREFIX .. "website_domain/upsert"] = {
		authenticatedVip,
	},

	--[filter.API_URL_PREFIX .. "website/updateByName"] = {
		--sensitiveWordFilter,
	--},
	--[filter.API_URL_PREFIX .. "website/upsert"] = {
		--sensitiveWordFilter,
	--},
	--[filter.API_URL_PREFIX .. "website/createSite"] = {
		--sensitiveWordFilter,
	--},
	[filter.API_URL_PREFIX .. "user/updateUserInfo"] = {
		sensitiveWordFilter,
	},
}


KEEPWORK["request_after_filter"] ={
	["wiki/test"] = {
		testFilter,
	},
}

-- 请求前滤器
function request_before_filter()
	if request:GetMethod() == "OPTIONS" then
		return
	end

	local filter = KEEPWORK["request_before_filter"]
	local url = pagename() or ""
	local filterfuncs = filter[url]

	for _, func in ipairs(filterfuncs or {}) do
		if not func() then
			response:status(401):send({message="prohibit access"})
			exit()
		end
	end
end

-- 请求后过滤
function request_after_filter()
	local filter = KEEPWORK["request_after_filter"]
	local url = pagename() or ""
	local filterfuncs = filter[url]

	for _, func in ipairs(filterfuncs or {}) do
		func()
	end
end














