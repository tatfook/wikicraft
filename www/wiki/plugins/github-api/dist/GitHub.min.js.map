{"version":3,"sources":["node_modules/browser-pack/_prelude.js","GitHub.js","lib/Gist.js","lib/GitHub.js","lib/Issue.js","lib/Markdown.js","lib/Organization.js","lib/RateLimit.js","lib/Repository.js","lib/Requestable.js","lib/Search.js","lib/Team.js","lib/User.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","GitHub","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","factory","mod","Requestable","Gist","_Requestable2","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_Requestable3","_createClass","defineProperties","target","props","descriptor","defineProperty","key","protoProps","staticProps","_Requestable","id","auth","apiBase","_this","getPrototypeOf","__id","cb","_request","gist","_this2","then","response","data","_request204or404","_requestAllPages","comment","body","./Requestable","2","User","Issue","Search","RateLimit","Repository","Organization","Team","Markdown","_Gist","_User","_Issue","_Search","_RateLimit","_Repository","_Organization","_Team","_Markdown","_Gist2","_User2","_Issue2","_Search2","_RateLimit2","_Repository2","_Organization2","_Team2","_Markdown2","arguments","undefined","__apiBase","__auth","user","organization","teamId","repo","_getFullName","query","fullname","./Gist","./Issue","./Markdown","./Organization","./RateLimit","./Repository","./Search","./Team","./User","3","repository","__repository","issueData","options","issue","milestone","milestoneData","4","5","__name","requestOptions","_getOptionsWithDefaults","direction","username","6","7","Buffer","utf8","jsBase64","debug","_utf","_jsBase","_debug","_utf2","_debug2","_typeof","Symbol","iterator","log","__fullname","__currentTree","branch","sha","ref","number","base","head","since","_dateToISO","until","path","treeSHA","content","postBody","_getContentObject","encode","encoding","toString","Blob","Base64","JSON","stringify","baseTreeSHA","blobSHA","newTree","base_tree","tree","mode","type","baseSHA","parent","message","parents","commitSHA","force","raw","encodeURI","oldBranch","newBranch","_this3","getRef","object","createRef","__repoPath","_this4","getSha","deleteCommit","oldPath","newPath","_this5","oldSha","_ref","getTree","_ref2","_ref2$data","map","createTree","_ref3","commit","_ref4","updateHead","_this6","filePath","shouldEncode","author","committer","buffer","js-base64","8","axios","Promise","_axios","_es6Promise","methodHasNoBody","method","METHODS_WITH_NO_BODY","indexOf","getNextPage","linksHeader","links","split","reduce","nextUrl","link","search","match","callbackErrorOrThrow","config","url","error","ResponseError","_axios2","polyfill","_Error","request","status","token","password","__authorizationHeader","newCacheBuster","Date","getTime","replace","headers","Accept","Content-Type","Authorization","visibility","affiliation","sort","per_page","date","toISOString","__getURL","__getRequestHeaders","queryParams","shouldUseDataAsParams","params","responseType","requestPromise","results","thisGroup","Array","items","push","apply","es6-promise","9","defaults","__defaults","withOptions","keys","forEach","prop","_search","10","__teamId","owner","11","__user","endpoint","__getScopedUrl","before"],"mappings":"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","file":"GitHub.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.GitHub = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['module', './Requestable'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(module, require('./Requestable'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod, global.Requestable);\n    global.Gist = mod.exports;\n  }\n})(this, function (module, _Requestable2) {\n  'use strict';\n\n  var _Requestable3 = _interopRequireDefault(_Requestable2);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var Gist = function (_Requestable) {\n    _inherits(Gist, _Requestable);\n\n    /**\n     * Create a Gist.\n     * @param {string} id - the id of the gist (not required when creating a gist)\n     * @param {Requestable.auth} [auth] - information required to authenticate to Github\n     * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n     */\n\n    function Gist(id, auth, apiBase) {\n      _classCallCheck(this, Gist);\n\n      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Gist).call(this, auth, apiBase));\n\n      _this.__id = id;\n      return _this;\n    }\n\n    /**\n     * Fetch a gist.\n     * @see https://developer.github.com/v3/gists/#get-a-single-gist\n     * @param {Requestable.callback} [cb] - will receive the gist\n     * @return {Promise} - the Promise for the http request\n     */\n\n\n    _createClass(Gist, [{\n      key: 'read',\n      value: function read(cb) {\n        return this._request('GET', '/gists/' + this.__id, null, cb);\n      }\n    }, {\n      key: 'create',\n      value: function create(gist, cb) {\n        var _this2 = this;\n\n        return this._request('POST', '/gists', gist, cb).then(function (response) {\n          _this2.__id = response.data.id;\n          return response;\n        });\n      }\n    }, {\n      key: 'delete',\n      value: function _delete(cb) {\n        return this._request('DELETE', '/gists/' + this.__id, null, cb);\n      }\n    }, {\n      key: 'fork',\n      value: function fork(cb) {\n        return this._request('POST', '/gists/' + this.__id + '/forks', null, cb);\n      }\n    }, {\n      key: 'update',\n      value: function update(gist, cb) {\n        return this._request('PATCH', '/gists/' + this.__id, gist, cb);\n      }\n    }, {\n      key: 'star',\n      value: function star(cb) {\n        return this._request('PUT', '/gists/' + this.__id + '/star', null, cb);\n      }\n    }, {\n      key: 'unstar',\n      value: function unstar(cb) {\n        return this._request('DELETE', '/gists/' + this.__id + '/star', null, cb);\n      }\n    }, {\n      key: 'isStarred',\n      value: function isStarred(cb) {\n        return this._request204or404('/gists/' + this.__id + '/star', null, cb);\n      }\n    }, {\n      key: 'listComments',\n      value: function listComments(cb) {\n        return this._requestAllPages('/gists/' + this.__id + '/comments', null, cb);\n      }\n    }, {\n      key: 'getComment',\n      value: function getComment(comment, cb) {\n        return this._request('GET', '/gists/' + this.__id + '/comments/' + comment, null, cb);\n      }\n    }, {\n      key: 'createComment',\n      value: function createComment(comment, cb) {\n        return this._request('POST', '/gists/' + this.__id + '/comments', { body: comment }, cb);\n      }\n    }, {\n      key: 'editComment',\n      value: function editComment(comment, body, cb) {\n        return this._request('PATCH', '/gists/' + this.__id + '/comments/' + comment, { body: body }, cb);\n      }\n    }, {\n      key: 'deleteComment',\n      value: function deleteComment(comment, cb) {\n        return this._request('DELETE', '/gists/' + this.__id + '/comments/' + comment, null, cb);\n      }\n    }]);\n\n    return Gist;\n  }(_Requestable3.default);\n\n  module.exports = Gist;\n});\n\n},{\"./Requestable\":8}],2:[function(require,module,exports){\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['module', './Gist', './User', './Issue', './Search', './RateLimit', './Repository', './Organization', './Team', './Markdown'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(module, require('./Gist'), require('./User'), require('./Issue'), require('./Search'), require('./RateLimit'), require('./Repository'), require('./Organization'), require('./Team'), require('./Markdown'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod, global.Gist, global.User, global.Issue, global.Search, global.RateLimit, global.Repository, global.Organization, global.Team, global.Markdown);\n    global.GitHub = mod.exports;\n  }\n})(this, function (module, _Gist, _User, _Issue, _Search, _RateLimit, _Repository, _Organization, _Team, _Markdown) {\n  'use strict';\n\n  var _Gist2 = _interopRequireDefault(_Gist);\n\n  var _User2 = _interopRequireDefault(_User);\n\n  var _Issue2 = _interopRequireDefault(_Issue);\n\n  var _Search2 = _interopRequireDefault(_Search);\n\n  var _RateLimit2 = _interopRequireDefault(_RateLimit);\n\n  var _Repository2 = _interopRequireDefault(_Repository);\n\n  var _Organization2 = _interopRequireDefault(_Organization);\n\n  var _Team2 = _interopRequireDefault(_Team);\n\n  var _Markdown2 = _interopRequireDefault(_Markdown);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var GitHub = function () {\n    /**\n     * Create a new GitHub.\n     * @param {Requestable.auth} [auth] - the credentials to authenticate to Github. If auth is\n     *                                  not provided requests will be made unauthenticated\n     * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n     */\n\n    function GitHub(auth) {\n      var apiBase = arguments.length <= 1 || arguments[1] === undefined ? 'https://api.github.com' : arguments[1];\n\n      _classCallCheck(this, GitHub);\n\n      this.__apiBase = apiBase;\n      this.__auth = auth || {};\n    }\n\n    /**\n     * Create a new Gist wrapper\n     * @param {number} [id] - the id for the gist, leave undefined when creating a new gist\n     * @return {Gist}\n     */\n\n\n    _createClass(GitHub, [{\n      key: 'getGist',\n      value: function getGist(id) {\n        return new _Gist2.default(id, this.__auth, this.__apiBase);\n      }\n    }, {\n      key: 'getUser',\n      value: function getUser(user) {\n        return new _User2.default(user, this.__auth, this.__apiBase);\n      }\n    }, {\n      key: 'getOrganization',\n      value: function getOrganization(organization) {\n        return new _Organization2.default(organization, this.__auth, this.__apiBase);\n      }\n    }, {\n      key: 'getTeam',\n      value: function getTeam(teamId) {\n        return new _Team2.default(teamId, this.__auth, this.__apiBase);\n      }\n    }, {\n      key: 'getRepo',\n      value: function getRepo(user, repo) {\n        return new _Repository2.default(this._getFullName(user, repo), this.__auth, this.__apiBase);\n      }\n    }, {\n      key: 'getIssues',\n      value: function getIssues(user, repo) {\n        return new _Issue2.default(this._getFullName(user, repo), this.__auth, this.__apiBase);\n      }\n    }, {\n      key: 'search',\n      value: function search(query) {\n        return new _Search2.default(query, this.__auth, this.__apiBase);\n      }\n    }, {\n      key: 'getRateLimit',\n      value: function getRateLimit() {\n        return new _RateLimit2.default(this.__auth, this.__apiBase);\n      }\n    }, {\n      key: 'getMarkdown',\n      value: function getMarkdown() {\n        return new _Markdown2.default(this.__auth, this.__apiBase);\n      }\n    }, {\n      key: '_getFullName',\n      value: function _getFullName(user, repo) {\n        var fullname = user;\n\n        if (repo) {\n          fullname = user + '/' + repo;\n        }\n\n        return fullname;\n      }\n    }]);\n\n    return GitHub;\n  }();\n\n  module.exports = GitHub;\n});\n\n},{\"./Gist\":1,\"./Issue\":3,\"./Markdown\":4,\"./Organization\":5,\"./RateLimit\":6,\"./Repository\":7,\"./Search\":9,\"./Team\":10,\"./User\":11}],3:[function(require,module,exports){\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['module', './Requestable'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(module, require('./Requestable'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod, global.Requestable);\n    global.Issue = mod.exports;\n  }\n})(this, function (module, _Requestable2) {\n  'use strict';\n\n  var _Requestable3 = _interopRequireDefault(_Requestable2);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var Issue = function (_Requestable) {\n    _inherits(Issue, _Requestable);\n\n    /**\n     * Create a new Issue\n     * @param {string} repository - the full name of the repository (`:user/:repo`) to get issues for\n     * @param {Requestable.auth} [auth] - information required to authenticate to Github\n     * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n     */\n\n    function Issue(repository, auth, apiBase) {\n      _classCallCheck(this, Issue);\n\n      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Issue).call(this, auth, apiBase));\n\n      _this.__repository = repository;\n      return _this;\n    }\n\n    /**\n     * Create a new issue\n     * @see https://developer.github.com/v3/issues/#create-an-issue\n     * @param {Object} issueData - the issue to create\n     * @param {Requestable.callback} [cb] - will receive the created issue\n     * @return {Promise} - the promise for the http request\n     */\n\n\n    _createClass(Issue, [{\n      key: 'createIssue',\n      value: function createIssue(issueData, cb) {\n        return this._request('POST', '/repos/' + this.__repository + '/issues', issueData, cb);\n      }\n    }, {\n      key: 'listIssues',\n      value: function listIssues(options, cb) {\n        return this._requestAllPages('/repos/' + this.__repository + '/issues', options, cb);\n      }\n    }, {\n      key: 'listIssueEvents',\n      value: function listIssueEvents(issue, cb) {\n        return this._request('GET', '/repos/' + this.__repository + '/issues/' + issue + '/events', null, cb);\n      }\n    }, {\n      key: 'listIssueComments',\n      value: function listIssueComments(issue, cb) {\n        return this._request('GET', '/repos/' + this.__repository + '/issues/' + issue + '/comments', null, cb);\n      }\n    }, {\n      key: 'getIssueComment',\n      value: function getIssueComment(id, cb) {\n        return this._request('GET', '/repos/' + this.__repository + '/issues/comments/' + id, null, cb);\n      }\n    }, {\n      key: 'createIssueComment',\n      value: function createIssueComment(issue, comment, cb) {\n        return this._request('POST', '/repos/' + this.__repository + '/issues/' + issue + '/comments', { body: comment }, cb);\n      }\n    }, {\n      key: 'editIssueComment',\n      value: function editIssueComment(id, comment, cb) {\n        return this._request('PATCH', '/repos/' + this.__repository + '/issues/comments/' + id, { body: comment }, cb);\n      }\n    }, {\n      key: 'deleteIssueComment',\n      value: function deleteIssueComment(id, cb) {\n        return this._request('DELETE', '/repos/' + this.__repository + '/issues/comments/' + id, null, cb);\n      }\n    }, {\n      key: 'editIssue',\n      value: function editIssue(issue, issueData, cb) {\n        return this._request('PATCH', '/repos/' + this.__repository + '/issues/' + issue, issueData, cb);\n      }\n    }, {\n      key: 'getIssue',\n      value: function getIssue(issue, cb) {\n        return this._request('GET', '/repos/' + this.__repository + '/issues/' + issue, null, cb);\n      }\n    }, {\n      key: 'listMilestones',\n      value: function listMilestones(options, cb) {\n        return this._request('GET', '/repos/' + this.__repository + '/milestones', options, cb);\n      }\n    }, {\n      key: 'getMilestone',\n      value: function getMilestone(milestone, cb) {\n        return this._request('GET', '/repos/' + this.__repository + '/milestones/' + milestone, null, cb);\n      }\n    }, {\n      key: 'createMilestone',\n      value: function createMilestone(milestoneData, cb) {\n        return this._request('POST', '/repos/' + this.__repository + '/milestones', milestoneData, cb);\n      }\n    }, {\n      key: 'editMilestone',\n      value: function editMilestone(milestone, milestoneData, cb) {\n        return this._request('PATCH', '/repos/' + this.__repository + '/milestones/' + milestone, milestoneData, cb);\n      }\n    }, {\n      key: 'deleteMilestone',\n      value: function deleteMilestone(milestone, cb) {\n        return this._request('DELETE', '/repos/' + this.__repository + '/milestones/' + milestone, null, cb);\n      }\n    }]);\n\n    return Issue;\n  }(_Requestable3.default);\n\n  module.exports = Issue;\n});\n\n},{\"./Requestable\":8}],4:[function(require,module,exports){\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['module', './Requestable'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(module, require('./Requestable'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod, global.Requestable);\n    global.Markdown = mod.exports;\n  }\n})(this, function (module, _Requestable2) {\n  'use strict';\n\n  var _Requestable3 = _interopRequireDefault(_Requestable2);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var Markdown = function (_Requestable) {\n    _inherits(Markdown, _Requestable);\n\n    /**\n     * construct a RateLimit\n     * @param {Requestable.auth} auth - the credentials to authenticate to GitHub\n     * @param {string} [apiBase] - the base Github API URL\n     * @return {Promise} - the promise for the http request\n     */\n\n    function Markdown(auth, apiBase) {\n      _classCallCheck(this, Markdown);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(Markdown).call(this, auth, apiBase));\n    }\n\n    /**\n     * Render html from Markdown text.\n     * @see https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document\n     * @param {Object} options - conversion options\n     * @param {string} [options.text] - the markdown text to convert\n     * @param {string} [options.mode=markdown] - can be either `markdown` or `gfm`\n     * @param {string} [options.context] - repository name if mode is gfm\n     * @param {Requestable.callback} [cb] - will receive the converted html\n     * @return {Promise} - the promise for the http request\n     */\n\n\n    _createClass(Markdown, [{\n      key: 'render',\n      value: function render(options, cb) {\n        return this._request('POST', '/markdown', options, cb);\n      }\n    }]);\n\n    return Markdown;\n  }(_Requestable3.default);\n\n  module.exports = Markdown;\n});\n\n},{\"./Requestable\":8}],5:[function(require,module,exports){\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['module', './Requestable'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(module, require('./Requestable'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod, global.Requestable);\n    global.Organization = mod.exports;\n  }\n})(this, function (module, _Requestable2) {\n  'use strict';\n\n  var _Requestable3 = _interopRequireDefault(_Requestable2);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var Organization = function (_Requestable) {\n    _inherits(Organization, _Requestable);\n\n    /**\n     * Create a new Organization\n     * @param {string} organization - the name of the organization\n     * @param {Requestable.auth} [auth] - information required to authenticate to Github\n     * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n     */\n\n    function Organization(organization, auth, apiBase) {\n      _classCallCheck(this, Organization);\n\n      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Organization).call(this, auth, apiBase));\n\n      _this.__name = organization;\n      return _this;\n    }\n\n    /**\n     * Create a repository in an organization\n     * @see https://developer.github.com/v3/repos/#create\n     * @param {Object} options - the repository definition\n     * @param {Requestable.callback} [cb] - will receive the created repository\n     * @return {Promise} - the promise for the http request\n     */\n\n\n    _createClass(Organization, [{\n      key: 'createRepo',\n      value: function createRepo(options, cb) {\n        return this._request('POST', '/orgs/' + this.__name + '/repos', options, cb);\n      }\n    }, {\n      key: 'getRepos',\n      value: function getRepos(cb) {\n        var requestOptions = this._getOptionsWithDefaults({ direction: 'desc' });\n\n        return this._requestAllPages('/orgs/' + this.__name + '/repos', requestOptions, cb);\n      }\n    }, {\n      key: 'isMember',\n      value: function isMember(username, cb) {\n        return this._request204or404('/orgs/' + this.__name + '/members/' + username, null, cb);\n      }\n    }, {\n      key: 'listMembers',\n      value: function listMembers(options, cb) {\n        return this._request('GET', '/orgs/' + this.__name + '/members', options, cb);\n      }\n    }, {\n      key: 'getTeams',\n      value: function getTeams(cb) {\n        return this._requestAllPages('/orgs/' + this.__name + '/teams', undefined, cb);\n      }\n    }, {\n      key: 'createTeam',\n      value: function createTeam(options, cb) {\n        return this._request('POST', '/orgs/' + this.__name + '/teams', options, cb);\n      }\n    }]);\n\n    return Organization;\n  }(_Requestable3.default);\n\n  module.exports = Organization;\n});\n\n},{\"./Requestable\":8}],6:[function(require,module,exports){\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['module', './Requestable'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(module, require('./Requestable'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod, global.Requestable);\n    global.RateLimit = mod.exports;\n  }\n})(this, function (module, _Requestable2) {\n  'use strict';\n\n  var _Requestable3 = _interopRequireDefault(_Requestable2);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var RateLimit = function (_Requestable) {\n    _inherits(RateLimit, _Requestable);\n\n    /**\n     * construct a RateLimit\n     * @param {Requestable.auth} auth - the credentials to authenticate to GitHub\n     * @param {string} [apiBase] - the base Github API URL\n     * @return {Promise} - the promise for the http request\n     */\n\n    function RateLimit(auth, apiBase) {\n      _classCallCheck(this, RateLimit);\n\n      return _possibleConstructorReturn(this, Object.getPrototypeOf(RateLimit).call(this, auth, apiBase));\n    }\n\n    /**\n     * Query the current rate limit\n     * @see https://developer.github.com/v3/rate_limit/\n     * @param {Requestable.callback} [cb] - will receive the rate-limit data\n     * @return {Promise} - the promise for the http request\n     */\n\n\n    _createClass(RateLimit, [{\n      key: 'getRateLimit',\n      value: function getRateLimit(cb) {\n        return this._request('GET', '/rate_limit', null, cb);\n      }\n    }]);\n\n    return RateLimit;\n  }(_Requestable3.default);\n\n  module.exports = RateLimit;\n});\n\n},{\"./Requestable\":8}],7:[function(require,module,exports){\n(function (Buffer){\n(function (global, factory) {\n   if (typeof define === \"function\" && define.amd) {\n      define(['module', './Requestable', 'utf8', 'js-base64', 'debug'], factory);\n   } else if (typeof exports !== \"undefined\") {\n      factory(module, require('./Requestable'), require('utf8'), require('js-base64'), require('debug'));\n   } else {\n      var mod = {\n         exports: {}\n      };\n      factory(mod, global.Requestable, global.utf8, global.jsBase64, global.debug);\n      global.Repository = mod.exports;\n   }\n})(this, function (module, _Requestable2, _utf, _jsBase, _debug) {\n   'use strict';\n\n   var _Requestable3 = _interopRequireDefault(_Requestable2);\n\n   var _utf2 = _interopRequireDefault(_utf);\n\n   var _debug2 = _interopRequireDefault(_debug);\n\n   function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n         default: obj\n      };\n   }\n\n   var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n      return typeof obj;\n   } : function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n   };\n\n   function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n         throw new TypeError(\"Cannot call a class as a function\");\n      }\n   }\n\n   var _createClass = function () {\n      function defineProperties(target, props) {\n         for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n         }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n         if (protoProps) defineProperties(Constructor.prototype, protoProps);\n         if (staticProps) defineProperties(Constructor, staticProps);\n         return Constructor;\n      };\n   }();\n\n   function _possibleConstructorReturn(self, call) {\n      if (!self) {\n         throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      }\n\n      return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n   }\n\n   function _inherits(subClass, superClass) {\n      if (typeof superClass !== \"function\" && superClass !== null) {\n         throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n      }\n\n      subClass.prototype = Object.create(superClass && superClass.prototype, {\n         constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n         }\n      });\n      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n   }\n\n   var log = (0, _debug2.default)('github:repository');\n\n   /**\n    * Respository encapsulates the functionality to create, query, and modify files.\n    */\n\n   var Repository = function (_Requestable) {\n      _inherits(Repository, _Requestable);\n\n      /**\n       * Create a Repository.\n       * @param {string} fullname - the full name of the repository\n       * @param {Requestable.auth} [auth] - information required to authenticate to Github\n       * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n       */\n\n      function Repository(fullname, auth, apiBase) {\n         _classCallCheck(this, Repository);\n\n         var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Repository).call(this, auth, apiBase));\n\n         _this.__fullname = fullname;\n         _this.__currentTree = {\n            branch: null,\n            sha: null\n         };\n         return _this;\n      }\n\n      /**\n       * Get a reference\n       * @see https://developer.github.com/v3/git/refs/#get-a-reference\n       * @param {string} ref - the reference to get\n       * @param {Requestable.callback} [cb] - will receive the reference's refSpec or a list of refSpecs that match `ref`\n       * @return {Promise} - the promise for the http request\n       */\n\n\n      _createClass(Repository, [{\n         key: 'getRef',\n         value: function getRef(ref, cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/git/refs/' + ref, null, cb);\n         }\n      }, {\n         key: 'createRef',\n         value: function createRef(options, cb) {\n            return this._request('POST', '/repos/' + this.__fullname + '/git/refs', options, cb);\n         }\n      }, {\n         key: 'deleteRef',\n         value: function deleteRef(ref, cb) {\n            return this._request('DELETE', '/repos/' + this.__fullname + '/git/refs/' + ref, null, cb);\n         }\n      }, {\n         key: 'deleteRepo',\n         value: function deleteRepo(cb) {\n            return this._request('DELETE', '/repos/' + this.__fullname, null, cb);\n         }\n      }, {\n         key: 'listTags',\n         value: function listTags(cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/tags', null, cb);\n         }\n      }, {\n         key: 'listPullRequests',\n         value: function listPullRequests(options, cb) {\n            options = options || {};\n            return this._request('GET', '/repos/' + this.__fullname + '/pulls', options, cb);\n         }\n      }, {\n         key: 'getPullRequest',\n         value: function getPullRequest(number, cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/pulls/' + number, null, cb);\n         }\n      }, {\n         key: 'listPullRequestFiles',\n         value: function listPullRequestFiles(number, cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/pulls/' + number + '/files', null, cb);\n         }\n      }, {\n         key: 'compareBranches',\n         value: function compareBranches(base, head, cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/compare/' + base + '...' + head, null, cb);\n         }\n      }, {\n         key: 'listBranches',\n         value: function listBranches(cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/branches', null, cb);\n         }\n      }, {\n         key: 'getBlob',\n         value: function getBlob(sha, cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/git/blobs/' + sha, null, cb, 'raw');\n         }\n      }, {\n         key: 'getCommit',\n         value: function getCommit(sha, cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/git/commits/' + sha, null, cb);\n         }\n      }, {\n         key: 'listCommits',\n         value: function listCommits(options, cb) {\n            options = options || {};\n\n            options.since = this._dateToISO(options.since);\n            options.until = this._dateToISO(options.until);\n\n            return this._request('GET', '/repos/' + this.__fullname + '/commits', options, cb);\n         }\n      }, {\n         key: 'getSingleCommit',\n         value: function getSingleCommit(ref, cb) {\n            ref = ref || '';\n            return this._request('GET', '/repos/' + this.__fullname + '/commits/' + ref, null, cb);\n         }\n      }, {\n         key: 'getSha',\n         value: function getSha(branch, path, cb) {\n            branch = branch ? '?ref=' + branch : '';\n            return this._request('GET', '/repos/' + this.__fullname + '/contents/' + path + branch, null, cb);\n         }\n      }, {\n         key: 'listStatuses',\n         value: function listStatuses(sha, cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/commits/' + sha + '/statuses', null, cb);\n         }\n      }, {\n         key: 'getTree',\n         value: function getTree(treeSHA, cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/git/trees/' + treeSHA, null, cb);\n         }\n      }, {\n         key: 'createBlob',\n         value: function createBlob(content, cb) {\n            var postBody = this._getContentObject(content);\n\n            log('sending content', postBody);\n            return this._request('POST', '/repos/' + this.__fullname + '/git/blobs', postBody, cb);\n         }\n      }, {\n         key: '_getContentObject',\n         value: function _getContentObject(content) {\n            if (typeof content === 'string') {\n               log('contet is a string');\n               return {\n                  content: _utf2.default.encode(content),\n                  encoding: 'utf-8'\n               };\n            } else if (typeof Buffer !== 'undefined' && content instanceof Buffer) {\n               log('We appear to be in Node');\n               return {\n                  content: content.toString('base64'),\n                  encoding: 'base64'\n               };\n            } else if (typeof Blob !== 'undefined' && content instanceof Blob) {\n               log('We appear to be in the browser');\n               return {\n                  content: _jsBase.Base64.encode(content),\n                  encoding: 'base64'\n               };\n            } else {\n               // eslint-disable-line\n               log('Not sure what this content is: ' + (typeof content === 'undefined' ? 'undefined' : _typeof(content)) + ', ' + JSON.stringify(content));\n               throw new Error('Unknown content passed to postBlob. Must be string or Buffer (node) or Blob (web)');\n            }\n         }\n      }, {\n         key: 'updateTree',\n         value: function updateTree(baseTreeSHA, path, blobSHA, cb) {\n            var newTree = {\n               base_tree: baseTreeSHA, // eslint-disable-line\n               tree: [{\n                  path: path,\n                  sha: blobSHA,\n                  mode: '100644',\n                  type: 'blob'\n               }]\n            };\n\n            return this._request('POST', '/repos/' + this.__fullname + '/git/trees', newTree, cb);\n         }\n      }, {\n         key: 'createTree',\n         value: function createTree(tree, baseSHA, cb) {\n            return this._request('POST', '/repos/' + this.__fullname + '/git/trees', {\n               tree: tree,\n               base_tree: baseSHA // eslint-disable-line\n            }, cb);\n         }\n      }, {\n         key: 'commit',\n         value: function commit(parent, tree, message, cb) {\n            var _this2 = this;\n\n            var data = {\n               message: message,\n               tree: tree,\n               parents: [parent]\n            };\n\n            return this._request('POST', '/repos/' + this.__fullname + '/git/commits', data, cb).then(function (response) {\n               _this2.__currentTree.sha = response.data.sha; // Update latest commit\n               return response;\n            });\n         }\n      }, {\n         key: 'updateHead',\n         value: function updateHead(ref, commitSHA, force, cb) {\n            return this._request('PATCH', '/repos/' + this.__fullname + '/git/refs/' + ref, {\n               sha: commitSHA,\n               force: force\n            }, cb);\n         }\n      }, {\n         key: 'getDetails',\n         value: function getDetails(cb) {\n            return this._request('GET', '/repos/' + this.__fullname, null, cb);\n         }\n      }, {\n         key: 'getContributors',\n         value: function getContributors(cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/stats/contributors', null, cb);\n         }\n      }, {\n         key: 'getCollaborators',\n         value: function getCollaborators(cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/collaborators', null, cb);\n         }\n      }, {\n         key: 'isCollaborator',\n         value: function isCollaborator(username, cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/collaborators/' + username, null, cb);\n         }\n      }, {\n         key: 'getContents',\n         value: function getContents(ref, path, raw, cb) {\n            path = path ? '' + encodeURI(path) : '';\n            return this._request('GET', '/repos/' + this.__fullname + '/contents/' + path, {\n               ref: ref\n            }, cb, raw);\n         }\n      }, {\n         key: 'getReadme',\n         value: function getReadme(ref, raw, cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/readme', {\n               ref: ref\n            }, cb, raw);\n         }\n      }, {\n         key: 'fork',\n         value: function fork(cb) {\n            return this._request('POST', '/repos/' + this.__fullname + '/forks', null, cb);\n         }\n      }, {\n         key: 'listForks',\n         value: function listForks(cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/forks', null, cb);\n         }\n      }, {\n         key: 'createBranch',\n         value: function createBranch(oldBranch, newBranch, cb) {\n            var _this3 = this;\n\n            if (typeof newBranch === 'function') {\n               cb = newBranch;\n               newBranch = oldBranch;\n               oldBranch = 'master';\n            }\n\n            return this.getRef('heads/' + oldBranch).then(function (response) {\n               var sha = response.data.object.sha;\n               return _this3.createRef({\n                  sha: sha,\n                  ref: 'refs/heads/' + newBranch\n               }, cb);\n            });\n         }\n      }, {\n         key: 'createPullRequest',\n         value: function createPullRequest(options, cb) {\n            return this._request('POST', '/repos/' + this.__fullname + '/pulls', options, cb);\n         }\n      }, {\n         key: 'updatePullRequst',\n         value: function updatePullRequst(number, options, cb) {\n            return this._request('PATCH', '/repos/' + this.__fullname + '/pulls/' + number, options, cb);\n         }\n      }, {\n         key: 'listHooks',\n         value: function listHooks(cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/hooks', null, cb);\n         }\n      }, {\n         key: 'getHook',\n         value: function getHook(id, cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/hooks/' + id, null, cb);\n         }\n      }, {\n         key: 'createHook',\n         value: function createHook(options, cb) {\n            return this._request('POST', '/repos/' + this.__fullname + '/hooks', options, cb);\n         }\n      }, {\n         key: 'updateHook',\n         value: function updateHook(id, options, cb) {\n            return this._request('PATCH', '/repos/' + this.__fullname + '/hooks/' + id, options, cb);\n         }\n      }, {\n         key: 'deleteHook',\n         value: function deleteHook(id, cb) {\n            return this._request('DELETE', this.__repoPath + '/hooks/' + id, null, cb);\n         }\n      }, {\n         key: 'deleteFile',\n         value: function deleteFile(branch, path, cb) {\n            var _this4 = this;\n\n            return this.getSha(branch, path).then(function (response) {\n               var deleteCommit = {\n                  message: 'Delete the file at \\'' + path + '\\'',\n                  sha: response.data.sha,\n                  branch: branch\n               };\n               return _this4._request('DELETE', '/repos/' + _this4.__fullname + '/contents/' + path, deleteCommit, cb);\n            });\n         }\n      }, {\n         key: 'move',\n         value: function move(branch, oldPath, newPath, cb) {\n            var _this5 = this;\n\n            var oldSha = void 0;\n            return this.getRef('heads/' + branch).then(function (_ref) {\n               var object = _ref.data.object;\n               return _this5.getTree(object.sha + '?recursive=true');\n            }).then(function (_ref2) {\n               var _ref2$data = _ref2.data;\n               var tree = _ref2$data.tree;\n               var sha = _ref2$data.sha;\n\n               oldSha = sha;\n               var newTree = tree.map(function (ref) {\n                  if (ref.path === oldPath) {\n                     ref.path = newPath;\n                  }\n                  if (ref.type === 'tree') {\n                     delete ref.sha;\n                  }\n                  return ref;\n               });\n               return _this5.createTree(newTree);\n            }).then(function (_ref3) {\n               var tree = _ref3.data;\n               return _this5.commit(oldSha, tree.sha, 'Renamed \\'' + oldPath + '\\' to \\'' + newPath + '\\'');\n            }).then(function (_ref4) {\n               var commit = _ref4.data;\n               return _this5.updateHead('heads/' + branch, commit.sha, true, cb);\n            });\n         }\n      }, {\n         key: 'writeFile',\n         value: function writeFile(branch, path, content, message, options, cb) {\n            var _this6 = this;\n\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n            var filePath = path ? encodeURI(path) : '';\n            var shouldEncode = options.encode !== false;\n            var commit = {\n               branch: branch,\n               message: message,\n               author: options.author,\n               committer: options.committer,\n               content: shouldEncode ? _jsBase.Base64.encode(content) : content\n            };\n\n            return this.getSha(branch, filePath).then(function (response) {\n               commit.sha = response.data.sha;\n               return _this6._request('PUT', '/repos/' + _this6.__fullname + '/contents/' + filePath, commit, cb);\n            }, function () {\n               return _this6._request('PUT', '/repos/' + _this6.__fullname + '/contents/' + filePath, commit, cb);\n            });\n         }\n      }, {\n         key: 'isStarred',\n         value: function isStarred(cb) {\n            return this._request204or404('/user/starred/' + this.__fullname, null, cb);\n         }\n      }, {\n         key: 'star',\n         value: function star(cb) {\n            return this._request('PUT', '/user/starred/' + this.__fullname, null, cb);\n         }\n      }, {\n         key: 'unstar',\n         value: function unstar(cb) {\n            return this._request('DELETE', '/user/starred/' + this.__fullname, null, cb);\n         }\n      }, {\n         key: 'createRelease',\n         value: function createRelease(options, cb) {\n            return this._request('POST', '/repos/' + this.__fullname + '/releases', options, cb);\n         }\n      }, {\n         key: 'updateRelease',\n         value: function updateRelease(id, options, cb) {\n            return this._request('PATCH', '/repos/' + this.__fullname + '/releases/' + id, options, cb);\n         }\n      }, {\n         key: 'listReleases',\n         value: function listReleases(cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/releases', null, cb);\n         }\n      }, {\n         key: 'getRelease',\n         value: function getRelease(id, cb) {\n            return this._request('GET', '/repos/' + this.__fullname + '/releases/' + id, null, cb);\n         }\n      }, {\n         key: 'deleteRelease',\n         value: function deleteRelease(id, cb) {\n            return this._request('DELETE', '/repos/' + this.__fullname + '/releases/' + id, null, cb);\n         }\n      }, {\n         key: 'mergePullRequest',\n         value: function mergePullRequest(number, options, cb) {\n            return this._request('PUT', '/repos/' + this.__fullname + '/pulls/' + number + '/merge', options, cb);\n         }\n      }]);\n\n      return Repository;\n   }(_Requestable3.default);\n\n   module.exports = Repository;\n});\n\n}).call(this,require(\"buffer\").Buffer)\n\n},{\"./Requestable\":8,\"buffer\":undefined,\"debug\":undefined,\"js-base64\":undefined,\"utf8\":undefined}],8:[function(require,module,exports){\n(function (global, factory) {\n   if (typeof define === \"function\" && define.amd) {\n      define(['module', 'axios', 'debug', 'js-base64', 'es6-promise'], factory);\n   } else if (typeof exports !== \"undefined\") {\n      factory(module, require('axios'), require('debug'), require('js-base64'), require('es6-promise'));\n   } else {\n      var mod = {\n         exports: {}\n      };\n      factory(mod, global.axios, global.debug, global.jsBase64, global.Promise);\n      global.Requestable = mod.exports;\n   }\n})(this, function (module, _axios, _debug, _jsBase, _es6Promise) {\n   'use strict';\n\n   var _axios2 = _interopRequireDefault(_axios);\n\n   var _debug2 = _interopRequireDefault(_debug);\n\n   function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n         default: obj\n      };\n   }\n\n   var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n      return typeof obj;\n   } : function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n   };\n\n   var _createClass = function () {\n      function defineProperties(target, props) {\n         for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n         }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n         if (protoProps) defineProperties(Constructor.prototype, protoProps);\n         if (staticProps) defineProperties(Constructor, staticProps);\n         return Constructor;\n      };\n   }();\n\n   function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n         throw new TypeError(\"Cannot call a class as a function\");\n      }\n   }\n\n   function _possibleConstructorReturn(self, call) {\n      if (!self) {\n         throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      }\n\n      return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n   }\n\n   function _inherits(subClass, superClass) {\n      if (typeof superClass !== \"function\" && superClass !== null) {\n         throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n      }\n\n      subClass.prototype = Object.create(superClass && superClass.prototype, {\n         constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n         }\n      });\n      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n   }\n\n   var log = (0, _debug2.default)('github:request');\n\n   if (typeof Promise === 'undefined') {\n      (0, _es6Promise.polyfill)();\n   }\n\n   /**\n    * The error structure returned when a network call fails\n    */\n\n   var ResponseError = function (_Error) {\n      _inherits(ResponseError, _Error);\n\n      /**\n       * Construct a new ResponseError\n       * @param {string} message - an message to return instead of the the default error message\n       * @param {string} path - the requested path\n       * @param {Object} response - the object returned by Axios\n       */\n\n      function ResponseError(message, path, response) {\n         _classCallCheck(this, ResponseError);\n\n         var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ResponseError).call(this, message));\n\n         _this.path = path;\n         _this.request = response.config;\n         _this.response = response;\n         _this.status = response.status;\n         return _this;\n      }\n\n      return ResponseError;\n   }(Error);\n\n   var Requestable = function () {\n      /**\n       * Either a username and password or an oauth token for Github\n       * @typedef {Object} Requestable.auth\n       * @prop {string} [username] - the Github username\n       * @prop {string} [password] - the user's password\n       * @prop {token} [token] - an OAuth token\n       */\n      /**\n       * Initialize the http internals.\n       * @param {Requestable.auth} [auth] - the credentials to authenticate to Github. If auth is\n       *                                  not provided request will be made unauthenticated\n       * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n       */\n\n      function Requestable(auth, apiBase) {\n         _classCallCheck(this, Requestable);\n\n         this.__apiBase = apiBase || 'https://api.github.com';\n         this.__auth = {\n            token: auth.token,\n            username: auth.username,\n            password: auth.password\n         };\n\n         if (auth.token) {\n            this.__authorizationHeader = 'token ' + auth.token;\n         } else if (auth.username && auth.password) {\n            this.__authorizationHeader = 'Basic ' + _jsBase.Base64.encode(auth.username + ':' + auth.password);\n         }\n      }\n\n      /**\n       * Compute the URL to use to make a request.\n       * @private\n       * @param {string} path - either a URL relative to the API base or an absolute URL\n       * @return {string} - the URL to use\n       */\n\n\n      _createClass(Requestable, [{\n         key: '__getURL',\n         value: function __getURL(path) {\n            var url = path;\n\n            if (path.indexOf('//') === -1) {\n               url = this.__apiBase + path;\n            }\n\n            var newCacheBuster = 'timestamp=' + new Date().getTime();\n            return url.replace(/(timestamp=\\d+)/, newCacheBuster);\n         }\n      }, {\n         key: '__getRequestHeaders',\n         value: function __getRequestHeaders(raw) {\n            var headers = {\n               'Accept': raw ? 'application/vnd.github.v3.raw+json' : 'application/vnd.github.v3+json',\n               'Content-Type': 'application/json;charset=UTF-8'\n            };\n\n            if (this.__authorizationHeader) {\n               headers.Authorization = this.__authorizationHeader;\n            }\n\n            return headers;\n         }\n      }, {\n         key: '_getOptionsWithDefaults',\n         value: function _getOptionsWithDefaults() {\n            var requestOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n            if (!(requestOptions.visibility || requestOptions.affiliation)) {\n               requestOptions.type = requestOptions.type || 'all';\n            }\n            requestOptions.sort = requestOptions.sort || 'updated';\n            requestOptions.per_page = requestOptions.per_page || '100'; // eslint-disable-line\n\n            return requestOptions;\n         }\n      }, {\n         key: '_dateToISO',\n         value: function _dateToISO(date) {\n            if (date && date instanceof Date) {\n               date = date.toISOString();\n            }\n\n            return date;\n         }\n      }, {\n         key: '_request',\n         value: function _request(method, path, data, cb, raw) {\n            var url = this.__getURL(path);\n            var headers = this.__getRequestHeaders(raw);\n            var queryParams = {};\n\n            var shouldUseDataAsParams = data && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && methodHasNoBody(method);\n            if (shouldUseDataAsParams) {\n               queryParams = data;\n               data = undefined;\n            }\n\n            var config = {\n               url: url,\n               method: method,\n               headers: headers,\n               params: queryParams,\n               data: data,\n               responseType: raw ? 'text' : 'json'\n            };\n\n            log(config.method + ' to ' + config.url);\n            var requestPromise = (0, _axios2.default)(config).catch(callbackErrorOrThrow(cb, path));\n\n            if (cb) {\n               requestPromise.then(function (response) {\n                  cb(null, response.data || true, response);\n               });\n            }\n\n            return requestPromise;\n         }\n      }, {\n         key: '_request204or404',\n         value: function _request204or404(path, data, cb) {\n            var method = arguments.length <= 3 || arguments[3] === undefined ? 'GET' : arguments[3];\n\n            return this._request(method, path, data).then(function success(response) {\n               if (cb) {\n                  cb(null, true, response);\n               }\n               return true;\n            }, function failure(response) {\n               if (response.status === 404) {\n                  if (cb) {\n                     cb(null, false, response);\n                  }\n                  return false;\n               }\n\n               if (cb) {\n                  cb(response);\n               }\n               throw response;\n            });\n         }\n      }, {\n         key: '_requestAllPages',\n         value: function _requestAllPages(path, options, cb, results) {\n            var _this2 = this;\n\n            results = results || [];\n\n            return this._request('GET', path, options).then(function (response) {\n               var thisGroup = void 0;\n               if (response.data instanceof Array) {\n                  thisGroup = response.data;\n               } else if (response.data.items instanceof Array) {\n                  thisGroup = response.data.items;\n               } else {\n                  var message = 'cannot figure out how to append ' + response.data + ' to the result set';\n                  throw new ResponseError(message, path, response);\n               }\n               results.push.apply(results, thisGroup);\n\n               var nextUrl = getNextPage(response.headers.link);\n               if (nextUrl) {\n                  log('getting next page: ' + nextUrl);\n                  return _this2._requestAllPages(nextUrl, options, cb, results);\n               }\n\n               if (cb) {\n                  cb(null, results, response);\n               }\n\n               response.data = results;\n               return response;\n            }).catch(callbackErrorOrThrow(cb, path));\n         }\n      }]);\n\n      return Requestable;\n   }();\n\n   module.exports = Requestable;\n\n   // ////////////////////////// //\n   //  Private helper functions  //\n   // ////////////////////////// //\n   var METHODS_WITH_NO_BODY = ['GET', 'HEAD', 'DELETE'];\n   function methodHasNoBody(method) {\n      return METHODS_WITH_NO_BODY.indexOf(method) !== -1;\n   }\n\n   function getNextPage() {\n      var linksHeader = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n\n      var links = linksHeader.split(/\\s*,\\s*/); // splits and strips the urls\n      return links.reduce(function (nextUrl, link) {\n         if (link.search(/rel=\"next\"/) !== -1) {\n            return (link.match(/<(.*)>/) || [])[1];\n         }\n\n         return nextUrl;\n      }, undefined);\n   }\n\n   function callbackErrorOrThrow(cb, path) {\n      return function handler(response) {\n         var message = 'error making request ' + response.config.method + ' ' + response.config.url;\n         var error = new ResponseError(message, path, response);\n         log(message + ' ' + JSON.stringify(response.data));\n         if (cb) {\n            log('going to error callback');\n            cb(error);\n         } else {\n            log('throwing error');\n            throw error;\n         }\n      };\n   }\n});\n\n},{\"axios\":undefined,\"debug\":undefined,\"es6-promise\":undefined,\"js-base64\":undefined}],9:[function(require,module,exports){\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['module', './Requestable', 'debug'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(module, require('./Requestable'), require('debug'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod, global.Requestable, global.debug);\n    global.Search = mod.exports;\n  }\n})(this, function (module, _Requestable2, _debug) {\n  'use strict';\n\n  var _Requestable3 = _interopRequireDefault(_Requestable2);\n\n  var _debug2 = _interopRequireDefault(_debug);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var log = (0, _debug2.default)('github:search');\n\n  /**\n   * Wrap the Search API\n   */\n\n  var Search = function (_Requestable) {\n    _inherits(Search, _Requestable);\n\n    /**\n     * Create a Search\n     * @param {Object} defaults - defaults for the search\n     * @param {Requestable.auth} [auth] - information required to authenticate to Github\n     * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n     */\n\n    function Search(defaults, auth, apiBase) {\n      _classCallCheck(this, Search);\n\n      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Search).call(this, auth, apiBase));\n\n      _this.__defaults = _this._getOptionsWithDefaults(defaults);\n      return _this;\n    }\n\n    /**\n     * Available search options\n     * @see https://developer.github.com/v3/search/#parameters\n     * @typedef {Object} Search.Params\n     * @param {string} q - the query to make\n     * @param {string} sort - the sort field, one of `stars`, `forks`, or `updated`.\n     *                      Default is [best match](https://developer.github.com/v3/search/#ranking-search-results)\n     * @param {string} order - the ordering, either `asc` or `desc`\n     */\n    /**\n     * Perform a search on the GitHub API\n     * @private\n     * @param {string} path - the scope of the search\n     * @param {Search.Params} [withOptions] - additional parameters for the search\n     * @param {Requestable.callback} [cb] - will receive the results of the search\n     * @return {Promise} - the promise for the http request\n     */\n\n\n    _createClass(Search, [{\n      key: '_search',\n      value: function _search(path) {\n        var _this2 = this;\n\n        var withOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n        var cb = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];\n\n        var requestOptions = {};\n        Object.keys(this.__defaults).forEach(function (prop) {\n          requestOptions[prop] = _this2.__defaults[prop];\n        });\n        Object.keys(withOptions).forEach(function (prop) {\n          requestOptions[prop] = withOptions[prop];\n        });\n\n        log('searching ' + path + ' with options:', requestOptions);\n        return this._requestAllPages('/search/' + path, requestOptions, cb);\n      }\n    }, {\n      key: 'forRepositories',\n      value: function forRepositories(options, cb) {\n        return this._search('repositories', options, cb);\n      }\n    }, {\n      key: 'forCode',\n      value: function forCode(options, cb) {\n        return this._search('code', options, cb);\n      }\n    }, {\n      key: 'forIssues',\n      value: function forIssues(options, cb) {\n        return this._search('issues', options, cb);\n      }\n    }, {\n      key: 'forUsers',\n      value: function forUsers(options, cb) {\n        return this._search('users', options, cb);\n      }\n    }]);\n\n    return Search;\n  }(_Requestable3.default);\n\n  module.exports = Search;\n});\n\n},{\"./Requestable\":8,\"debug\":undefined}],10:[function(require,module,exports){\n(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['module', './Requestable', 'debug'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(module, require('./Requestable'), require('debug'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod, global.Requestable, global.debug);\n    global.Team = mod.exports;\n  }\n})(this, function (module, _Requestable2, _debug) {\n  'use strict';\n\n  var _Requestable3 = _interopRequireDefault(_Requestable2);\n\n  var _debug2 = _interopRequireDefault(_debug);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var log = (0, _debug2.default)('github:team');\n\n  /**\n   * A Team allows scoping of API requests to a particular Github Organization Team.\n   */\n\n  var Team = function (_Requestable) {\n    _inherits(Team, _Requestable);\n\n    /**\n     * Create a Team.\n     * @param {string} [teamId] - the id for the team\n     * @param {Requestable.auth} [auth] - information required to authenticate to Github\n     * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n     */\n\n    function Team(teamId, auth, apiBase) {\n      _classCallCheck(this, Team);\n\n      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Team).call(this, auth, apiBase));\n\n      _this.__teamId = teamId;\n      return _this;\n    }\n\n    /**\n     * Get Team information\n     * @see https://developer.github.com/v3/orgs/teams/#get-team\n     * @param {Requestable.callback} [cb] - will receive the team\n     * @return {Promise} - the promise for the http request\n     */\n\n\n    _createClass(Team, [{\n      key: 'getTeam',\n      value: function getTeam(cb) {\n        log('Fetching Team ' + this.__teamId);\n        return this._request('Get', '/teams/' + this.__teamId, undefined, cb);\n      }\n    }, {\n      key: 'listRepos',\n      value: function listRepos(cb) {\n        log('Fetching repositories for Team ' + this.__teamId);\n        return this._requestAllPages('/teams/' + this.__teamId + '/repos', undefined, cb);\n      }\n    }, {\n      key: 'editTeam',\n      value: function editTeam(options, cb) {\n        log('Editing Team ' + this.__teamId);\n        return this._request('PATCH', '/teams/' + this.__teamId, options, cb);\n      }\n    }, {\n      key: 'listMembers',\n      value: function listMembers(options, cb) {\n        log('Getting members of Team ' + this.__teamId);\n        return this._requestAllPages('/teams/' + this.__teamId + '/members', options, cb);\n      }\n    }, {\n      key: 'getMembership',\n      value: function getMembership(username, cb) {\n        log('Getting membership of user ' + username + ' in Team ' + this.__teamId);\n        return this._request('GET', '/teams/' + this.__teamId + '/memberships/' + username, undefined, cb);\n      }\n    }, {\n      key: 'addMembership',\n      value: function addMembership(username, options, cb) {\n        log('Adding user ' + username + ' to Team ' + this.__teamId);\n        return this._request('PUT', '/teams/' + this.__teamId + '/memberships/' + username, options, cb);\n      }\n    }, {\n      key: 'isManagedRepo',\n      value: function isManagedRepo(owner, repo, cb) {\n        log('Getting repo management by Team ' + this.__teamId + ' for repo ' + owner + '/' + repo);\n        return this._request204or404('/teams/' + this.__teamId + '/repos/' + owner + '/' + repo, undefined, cb);\n      }\n    }, {\n      key: 'manageRepo',\n      value: function manageRepo(owner, repo, options, cb) {\n        log('Adding or Updating repo management by Team ' + this.__teamId + ' for repo ' + owner + '/' + repo);\n        return this._request204or404('/teams/' + this.__teamId + '/repos/' + owner + '/' + repo, options, cb, 'PUT');\n      }\n    }, {\n      key: 'unmanageRepo',\n      value: function unmanageRepo(owner, repo, cb) {\n        log('Remove repo management by Team ' + this.__teamId + ' for repo ' + owner + '/' + repo);\n        return this._request204or404('/teams/' + this.__teamId + '/repos/' + owner + '/' + repo, undefined, cb, 'DELETE');\n      }\n    }, {\n      key: 'deleteTeam',\n      value: function deleteTeam(cb) {\n        log('Deleting Team ' + this.__teamId);\n        return this._request204or404('/teams/' + this.__teamId, undefined, cb, 'DELETE');\n      }\n    }]);\n\n    return Team;\n  }(_Requestable3.default);\n\n  module.exports = Team;\n});\n\n},{\"./Requestable\":8,\"debug\":undefined}],11:[function(require,module,exports){\n(function (global, factory) {\n   if (typeof define === \"function\" && define.amd) {\n      define(['module', './Requestable', 'debug'], factory);\n   } else if (typeof exports !== \"undefined\") {\n      factory(module, require('./Requestable'), require('debug'));\n   } else {\n      var mod = {\n         exports: {}\n      };\n      factory(mod, global.Requestable, global.debug);\n      global.User = mod.exports;\n   }\n})(this, function (module, _Requestable2, _debug) {\n   'use strict';\n\n   var _Requestable3 = _interopRequireDefault(_Requestable2);\n\n   var _debug2 = _interopRequireDefault(_debug);\n\n   function _interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : {\n         default: obj\n      };\n   }\n\n   function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n         throw new TypeError(\"Cannot call a class as a function\");\n      }\n   }\n\n   var _createClass = function () {\n      function defineProperties(target, props) {\n         for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n         }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n         if (protoProps) defineProperties(Constructor.prototype, protoProps);\n         if (staticProps) defineProperties(Constructor, staticProps);\n         return Constructor;\n      };\n   }();\n\n   function _possibleConstructorReturn(self, call) {\n      if (!self) {\n         throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      }\n\n      return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n   }\n\n   function _inherits(subClass, superClass) {\n      if (typeof superClass !== \"function\" && superClass !== null) {\n         throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n      }\n\n      subClass.prototype = Object.create(superClass && superClass.prototype, {\n         constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n         }\n      });\n      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n   }\n\n   var log = (0, _debug2.default)('github:user');\n\n   /**\n    * A User allows scoping of API requests to a particular Github user.\n    */\n\n   var User = function (_Requestable) {\n      _inherits(User, _Requestable);\n\n      /**\n       * Create a User.\n       * @param {string} [username] - the user to use for user-scoped queries\n       * @param {Requestable.auth} [auth] - information required to authenticate to Github\n       * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n       */\n\n      function User(username, auth, apiBase) {\n         _classCallCheck(this, User);\n\n         var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(User).call(this, auth, apiBase));\n\n         _this.__user = username;\n         return _this;\n      }\n\n      /**\n       * Get the url for the request. (dependent on if we're requesting for the authenticated user or not)\n       * @private\n       * @param {string} endpoint - the endpoint being requested\n       * @return {string} - the resolved endpoint\n       */\n\n\n      _createClass(User, [{\n         key: '__getScopedUrl',\n         value: function __getScopedUrl(endpoint) {\n            if (this.__user) {\n               return endpoint ? '/users/' + this.__user + '/' + endpoint : '/users/' + this.__user;\n            } else {\n               // eslint-disable-line\n               switch (endpoint) {\n                  case '':\n                     return '/user';\n\n                  case 'notifications':\n                  case 'gists':\n                     return '/' + endpoint;\n\n                  default:\n                     return '/user/' + endpoint;\n               }\n            }\n         }\n      }, {\n         key: 'listRepos',\n         value: function listRepos(options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            options = this._getOptionsWithDefaults(options);\n\n            log('Fetching repositories with options: ' + JSON.stringify(options));\n            return this._requestAllPages(this.__getScopedUrl('repos'), options, cb);\n         }\n      }, {\n         key: 'listOrgs',\n         value: function listOrgs(cb) {\n            return this._request('GET', this.__getScopedUrl('orgs'), null, cb);\n         }\n      }, {\n         key: 'listGists',\n         value: function listGists(cb) {\n            return this._request('GET', this.__getScopedUrl('gists'), null, cb);\n         }\n      }, {\n         key: 'listNotifications',\n         value: function listNotifications(options, cb) {\n            options = options || {};\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            options.since = this._dateToISO(options.since);\n            options.before = this._dateToISO(options.before);\n\n            return this._request('GET', this.__getScopedUrl('notifications'), options, cb);\n         }\n      }, {\n         key: 'getProfile',\n         value: function getProfile(cb) {\n            return this._request('GET', this.__getScopedUrl(''), null, cb);\n         }\n      }, {\n         key: 'listStarredRepos',\n         value: function listStarredRepos(cb) {\n            var requestOptions = this._getOptionsWithDefaults();\n            return this._requestAllPages(this.__getScopedUrl('starred'), requestOptions, cb);\n         }\n      }, {\n         key: 'follow',\n         value: function follow(username, cb) {\n            return this._request('PUT', '/user/following/' + this.__user, null, cb);\n         }\n      }, {\n         key: 'unfollow',\n         value: function unfollow(username, cb) {\n            return this._request('DELETE', '/user/following/' + this.__user, null, cb);\n         }\n      }, {\n         key: 'createRepo',\n         value: function createRepo(options, cb) {\n            return this._request('POST', '/user/repos', options, cb);\n         }\n      }]);\n\n      return User;\n   }(_Requestable3.default);\n\n   module.exports = User;\n});\n\n},{\"./Requestable\":8,\"debug\":undefined}]},{},[2])(2)\n});\n\n","/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\n\n/**\n * A Gist can retrieve and modify gists.\n */\nclass Gist extends Requestable {\n   /**\n    * Create a Gist.\n    * @param {string} id - the id of the gist (not required when creating a gist)\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(id, auth, apiBase) {\n      super(auth, apiBase);\n      this.__id = id;\n   }\n\n   /**\n    * Fetch a gist.\n    * @see https://developer.github.com/v3/gists/#get-a-single-gist\n    * @param {Requestable.callback} [cb] - will receive the gist\n    * @return {Promise} - the Promise for the http request\n    */\n   read(cb) {\n      return this._request('GET', `/gists/${this.__id}`, null, cb);\n   }\n\n   /**\n    * Create a new gist.\n    * @see https://developer.github.com/v3/gists/#create-a-gist\n    * @param {Object} gist - the data for the new gist\n    * @param {Requestable.callback} [cb] - will receive the new gist upon creation\n    * @return {Promise} - the Promise for the http request\n    */\n   create(gist, cb) {\n      return this._request('POST', '/gists', gist, cb)\n         .then((response) => {\n            this.__id = response.data.id;\n            return response;\n         });\n   }\n\n   /**\n    * Delete a gist.\n    * @see https://developer.github.com/v3/gists/#delete-a-gist\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\n    * @return {Promise} - the Promise for the http request\n    */\n   delete(cb) {\n      return this._request('DELETE', `/gists/${this.__id}`, null, cb);\n   }\n\n   /**\n    * Fork a gist.\n    * @see https://developer.github.com/v3/gists/#fork-a-gist\n    * @param {Requestable.callback} [cb] - the function that will receive the gist\n    * @return {Promise} - the Promise for the http request\n    */\n   fork(cb) {\n      return this._request('POST', `/gists/${this.__id}/forks`, null, cb);\n   }\n\n   /**\n    * Update a gist.\n    * @see https://developer.github.com/v3/gists/#edit-a-gist\n    * @param {Object} gist - the new data for the gist\n    * @param {Requestable.callback} [cb] - the function that receives the API result\n    * @return {Promise} - the Promise for the http request\n    */\n   update(gist, cb) {\n      return this._request('PATCH', `/gists/${this.__id}`, gist, cb);\n   }\n\n   /**\n    * Star a gist.\n    * @see https://developer.github.com/v3/gists/#star-a-gist\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\n    * @return {Promise} - the Promise for the http request\n    */\n   star(cb) {\n      return this._request('PUT', `/gists/${this.__id}/star`, null, cb);\n   }\n\n   /**\n    * Unstar a gist.\n    * @see https://developer.github.com/v3/gists/#unstar-a-gist\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\n    * @return {Promise} - the Promise for the http request\n    */\n   unstar(cb) {\n      return this._request('DELETE', `/gists/${this.__id}/star`, null, cb);\n   }\n\n   /**\n    * Check if a gist is starred by the user.\n    * @see https://developer.github.com/v3/gists/#check-if-a-gist-is-starred\n    * @param {Requestable.callback} [cb] - will receive true if the gist is starred and false if the gist is not starred\n    * @return {Promise} - the Promise for the http request\n    */\n   isStarred(cb) {\n      return this._request204or404(`/gists/${this.__id}/star`, null, cb);\n   }\n\n   /**\n    * List the gist's comments\n    * @see https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist\n    * @param {Requestable.callback} [cb] - will receive the array of comments\n    * @return {Promise} - the promise for the http request\n    */\n   listComments(cb) {\n      return this._requestAllPages(`/gists/${this.__id}/comments`, null, cb);\n   }\n\n   /**\n    * Fetch one of the gist's comments\n    * @see https://developer.github.com/v3/gists/comments/#get-a-single-comment\n    * @param {number} comment - the id of the comment\n    * @param {Requestable.callback} [cb] - will receive the comment\n    * @return {Promise} - the Promise for the http request\n    */\n   getComment(comment, cb) {\n      return this._request('GET', `/gists/${this.__id}/comments/${comment}`, null, cb);\n   }\n\n   /**\n    * Comment on a gist\n    * @see https://developer.github.com/v3/gists/comments/#create-a-comment\n    * @param {string} comment - the comment to add\n    * @param {Requestable.callback} [cb] - the function that receives the API result\n    * @return {Promise} - the Promise for the http request\n    */\n   createComment(comment, cb) {\n      return this._request('POST', `/gists/${this.__id}/comments`, {body: comment}, cb);\n   }\n\n   /**\n    * Edit a comment on the gist\n    * @see https://developer.github.com/v3/gists/comments/#edit-a-comment\n    * @param {number} comment - the id of the comment\n    * @param {string} body - the new comment\n    * @param {Requestable.callback} [cb] - will receive the modified comment\n    * @return {Promise} - the promise for the http request\n    */\n   editComment(comment, body, cb) {\n      return this._request('PATCH', `/gists/${this.__id}/comments/${comment}`, {body: body}, cb);\n   }\n\n   /**\n    * Delete a comment on the gist.\n    * @see https://developer.github.com/v3/gists/comments/#delete-a-comment\n    * @param {number} comment - the id of the comment\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\n    * @return {Promise} - the Promise for the http request\n    */\n   deleteComment(comment, cb) {\n      return this._request('DELETE', `/gists/${this.__id}/comments/${comment}`, null, cb);\n   }\n}\n\nmodule.exports = Gist;\n","/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n/* eslint valid-jsdoc: [\"error\", {\"requireReturnDescription\": false}] */\n\nimport Gist from './Gist';\nimport User from './User';\nimport Issue from './Issue';\nimport Search from './Search';\nimport RateLimit from './RateLimit';\nimport Repository from './Repository';\nimport Organization from './Organization';\nimport Team from './Team';\nimport Markdown from './Markdown';\n\n/**\n * GitHub encapsulates the functionality to create various API wrapper objects.\n */\nclass GitHub {\n   /**\n    * Create a new GitHub.\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to Github. If auth is\n    *                                  not provided requests will be made unauthenticated\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(auth, apiBase = 'https://api.github.com') {\n      this.__apiBase = apiBase;\n      this.__auth = auth || {};\n   }\n\n   /**\n    * Create a new Gist wrapper\n    * @param {number} [id] - the id for the gist, leave undefined when creating a new gist\n    * @return {Gist}\n    */\n   getGist(id) {\n      return new Gist(id, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new User wrapper\n    * @param {string} [user] - the name of the user to get information about\n    *                        leave undefined for the authenticated user\n    * @return {User}\n    */\n   getUser(user) {\n      return new User(user, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Organization wrapper\n    * @param {string} organization - the name of the organization\n    * @return {Organization}\n    */\n   getOrganization(organization) {\n      return new Organization(organization, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * create a new Team wrapper\n    * @param {string} teamId - the name of the team\n    * @return {team}\n    */\n   getTeam(teamId) {\n      return new Team(teamId, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Repository wrapper\n    * @param {string} user - the user who owns the respository\n    * @param {string} repo - the name of the repository\n    * @return {Repository}\n    */\n   getRepo(user, repo) {\n      return new Repository(this._getFullName(user, repo), this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Issue wrapper\n    * @param {string} user - the user who owns the respository\n    * @param {string} repo - the name of the repository\n    * @return {Issue}\n    */\n   getIssues(user, repo) {\n      return new Issue(this._getFullName(user, repo), this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Search wrapper\n    * @param {string} query - the query to search for\n    * @return {Search}\n    */\n   search(query) {\n      return new Search(query, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new RateLimit wrapper\n    * @return {RateLimit}\n    */\n   getRateLimit() {\n      return new RateLimit(this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Markdown wrapper\n    * @return {Markdown}\n    */\n   getMarkdown() {\n      return new Markdown(this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Computes the full repository name\n    * @param {string} user - the username (or the full name)\n    * @param {string} repo - the repository name, must not be passed if `user` is the full name\n    * @return {string} the repository's full name\n    */\n   _getFullName(user, repo) {\n      let fullname = user;\n\n      if (repo) {\n         fullname = `${user}/${repo}`;\n      }\n\n      return fullname;\n   }\n}\n\nmodule.exports = GitHub;\n","/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\n\n/**\n * Issue wraps the functionality to get issues for repositories\n */\nclass Issue extends Requestable {\n   /**\n    * Create a new Issue\n    * @param {string} repository - the full name of the repository (`:user/:repo`) to get issues for\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(repository, auth, apiBase) {\n      super(auth, apiBase);\n      this.__repository = repository;\n   }\n\n   /**\n    * Create a new issue\n    * @see https://developer.github.com/v3/issues/#create-an-issue\n    * @param {Object} issueData - the issue to create\n    * @param {Requestable.callback} [cb] - will receive the created issue\n    * @return {Promise} - the promise for the http request\n    */\n   createIssue(issueData, cb) {\n      return this._request('POST', `/repos/${this.__repository}/issues`, issueData, cb);\n   }\n\n   /**\n    * List the issues for the repository\n    * @see https://developer.github.com/v3/issues/#list-issues-for-a-repository\n    * @param {Object} options - filtering options\n    * @param {Requestable.callback} [cb] - will receive the array of issues\n    * @return {Promise} - the promise for the http request\n    */\n   listIssues(options, cb) {\n      return this._requestAllPages(`/repos/${this.__repository}/issues`, options, cb);\n   }\n\n   /**\n    * List the events for an issue\n    * @see https://developer.github.com/v3/issues/events/#list-events-for-an-issue\n    * @param {number} issue - the issue to get events for\n    * @param {Requestable.callback} [cb] - will receive the list of events\n    * @return {Promise} - the promise for the http request\n    */\n   listIssueEvents(issue, cb) {\n      return this._request('GET', `/repos/${this.__repository}/issues/${issue}/events`, null, cb);\n   }\n\n   /**\n    * List comments on an issue\n    * @see https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue\n    * @param {number} issue - the id of the issue to get comments from\n    * @param {Requestable.callback} [cb] - will receive the comments\n    * @return {Promise} - the promise for the http request\n    */\n   listIssueComments(issue, cb) {\n      return this._request('GET', `/repos/${this.__repository}/issues/${issue}/comments`, null, cb);\n   }\n\n   /**\n    * Get a single comment on an issue\n    * @see https://developer.github.com/v3/issues/comments/#get-a-single-comment\n    * @param {number} id - the comment id to get\n    * @param {Requestable.callback} [cb] - will receive the comment\n    * @return {Promise} - the promise for the http request\n    */\n   getIssueComment(id, cb) {\n      return this._request('GET', `/repos/${this.__repository}/issues/comments/${id}`, null, cb);\n   }\n\n   /**\n    * Comment on an issue\n    * @see https://developer.github.com/v3/issues/comments/#create-a-comment\n    * @param {number} issue - the id of the issue to comment on\n    * @param {string} comment - the comment to add\n    * @param {Requestable.callback} [cb] - will receive the created comment\n    * @return {Promise} - the promise for the http request\n    */\n   createIssueComment(issue, comment, cb) {\n      return this._request('POST', `/repos/${this.__repository}/issues/${issue}/comments`, {body: comment}, cb);\n   }\n\n   /**\n    * Edit a comment on an issue\n    * @see https://developer.github.com/v3/issues/comments/#edit-a-comment\n    * @param {number} id - the comment id to edit\n    * @param {string} comment - the comment to edit\n    * @param {Requestable.callback} [cb] - will receive the edited comment\n    * @return {Promise} - the promise for the http request\n    */\n   editIssueComment(id, comment, cb) {\n      return this._request('PATCH', `/repos/${this.__repository}/issues/comments/${id}`, {body: comment}, cb);\n   }\n\n   /**\n    * Delete a comment on an issue\n    * @see https://developer.github.com/v3/issues/comments/#delete-a-comment\n    * @param {number} id - the comment id to delete\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\n    * @return {Promise} - the promise for the http request\n    */\n   deleteIssueComment(id, cb) {\n      return this._request('DELETE', `/repos/${this.__repository}/issues/comments/${id}`, null, cb);\n   }\n\n   /**\n    * Edit an issue\n    * @see https://developer.github.com/v3/issues/#edit-an-issue\n    * @param {number} issue - the issue number to edit\n    * @param {Object} issueData - the new issue data\n    * @param {Requestable.callback} [cb] - will receive the modified issue\n    * @return {Promise} - the promise for the http request\n    */\n   editIssue(issue, issueData, cb) {\n      return this._request('PATCH', `/repos/${this.__repository}/issues/${issue}`, issueData, cb);\n   }\n\n   /**\n    * Get a particular issue\n    * @see https://developer.github.com/v3/issues/#get-a-single-issue\n    * @param {number} issue - the issue number to fetch\n    * @param {Requestable.callback} [cb] - will receive the issue\n    * @return {Promise} - the promise for the http request\n    */\n   getIssue(issue, cb) {\n      return this._request('GET', `/repos/${this.__repository}/issues/${issue}`, null, cb);\n   }\n\n   /**\n    * List the milestones for the repository\n    * @see https://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository\n    * @param {Object} options - filtering options\n    * @param {Requestable.callback} [cb] - will receive the array of milestones\n    * @return {Promise} - the promise for the http request\n    */\n   listMilestones(options, cb) {\n      return this._request('GET', `/repos/${this.__repository}/milestones`, options, cb);\n   }\n\n   /**\n    * Get a milestone\n    * @see https://developer.github.com/v3/issues/milestones/#get-a-single-milestone\n    * @param {string} milestone - the id of the milestone to fetch\n    * @param {Requestable.callback} [cb] - will receive the array of milestones\n    * @return {Promise} - the promise for the http request\n    */\n   getMilestone(milestone, cb) {\n      return this._request('GET', `/repos/${this.__repository}/milestones/${milestone}`, null, cb);\n   }\n\n   /**\n    * Create a new milestone\n    * @see https://developer.github.com/v3/issues/milestones/#create-a-milestone\n    * @param {Object} milestoneData - the milestone definition\n    * @param {Requestable.callback} [cb] - will receive the array of milestones\n    * @return {Promise} - the promise for the http request\n    */\n   createMilestone(milestoneData, cb) {\n      return this._request('POST', `/repos/${this.__repository}/milestones`, milestoneData, cb);\n   }\n\n   /**\n    * Edit a milestone\n    * @see https://developer.github.com/v3/issues/milestones/#update-a-milestone\n    * @param {string} milestone - the id of the milestone to edit\n    * @param {Object} milestoneData - the updates to make to the milestone\n    * @param {Requestable.callback} [cb] - will receive the array of milestones\n    * @return {Promise} - the promise for the http request\n    */\n   editMilestone(milestone, milestoneData, cb) {\n      return this._request('PATCH', `/repos/${this.__repository}/milestones/${milestone}`, milestoneData, cb);\n   }\n\n   /**\n    * Delete a milestone (this is distinct from closing a milestone)\n    * @see https://developer.github.com/v3/issues/milestones/#delete-a-milestone\n    * @param {string} milestone - the id of the milestone to delete\n    * @param {Requestable.callback} [cb] - will receive the array of milestones\n    * @return {Promise} - the promise for the http request\n    */\n   deleteMilestone(milestone, cb) {\n      return this._request('DELETE', `/repos/${this.__repository}/milestones/${milestone}`, null, cb);\n   }\n}\n\nmodule.exports = Issue;\n","/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\n\n/**\n * RateLimit allows users to query their rate-limit status\n */\nclass Markdown extends Requestable {\n   /**\n    * construct a RateLimit\n    * @param {Requestable.auth} auth - the credentials to authenticate to GitHub\n    * @param {string} [apiBase] - the base Github API URL\n    * @return {Promise} - the promise for the http request\n    */\n   constructor(auth, apiBase) {\n      super(auth, apiBase);\n   }\n\n   /**\n    * Render html from Markdown text.\n    * @see https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document\n    * @param {Object} options - conversion options\n    * @param {string} [options.text] - the markdown text to convert\n    * @param {string} [options.mode=markdown] - can be either `markdown` or `gfm`\n    * @param {string} [options.context] - repository name if mode is gfm\n    * @param {Requestable.callback} [cb] - will receive the converted html\n    * @return {Promise} - the promise for the http request\n    */\n   render(options, cb) {\n      return this._request('POST', '/markdown', options, cb);\n   }\n}\n\nmodule.exports = Markdown;\n","/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\n\n/**\n * Organization encapsulates the functionality to create repositories in organizations\n */\nclass Organization extends Requestable {\n   /**\n    * Create a new Organization\n    * @param {string} organization - the name of the organization\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(organization, auth, apiBase) {\n      super(auth, apiBase);\n      this.__name = organization;\n   }\n\n   /**\n    * Create a repository in an organization\n    * @see https://developer.github.com/v3/repos/#create\n    * @param {Object} options - the repository definition\n    * @param {Requestable.callback} [cb] - will receive the created repository\n    * @return {Promise} - the promise for the http request\n    */\n   createRepo(options, cb) {\n      return this._request('POST', `/orgs/${this.__name}/repos`, options, cb);\n   }\n\n   /**\n    * List the repositories in an organization\n    * @see https://developer.github.com/v3/repos/#list-organization-repositories\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   getRepos(cb) {\n      let requestOptions = this._getOptionsWithDefaults({direction: 'desc'});\n\n      return this._requestAllPages(`/orgs/${this.__name}/repos`, requestOptions, cb);\n   }\n\n   /**\n    * Query if the user is a member or not\n    * @param {string} username - the user in question\n    * @param {Requestable.callback} [cb] - will receive true if the user is a member\n    * @return {Promise} - the promise for the http request\n    */\n   isMember(username, cb) {\n      return this._request204or404(`/orgs/${this.__name}/members/${username}`, null, cb);\n   }\n\n   /**\n    * List the users who are members of the company\n    * @see https://developer.github.com/v3/orgs/members/#members-list\n    * @param {object} options - filtering options\n    * @param {string} [options.filter=all] - can be either `2fa_disabled` or `all`\n    * @param {string} [options.role=all] - can be one of: `all`, `admin`, or `member`\n    * @param {Requestable.callback} [cb] - will receive the list of users\n    * @return {Promise} - the promise for the http request\n    */\n   listMembers(options, cb) {\n      return this._request('GET', `/orgs/${this.__name}/members`, options, cb);\n   }\n\n   /**\n    * List the Teams in the Organization\n    * @see https://developer.github.com/v3/orgs/teams/#list-teams\n    * @param {Requestable.callback} [cb] - will receive the list of teams\n    * @return {Promise} - the promise for the http request\n    */\n   getTeams(cb) {\n      return this._requestAllPages(`/orgs/${this.__name}/teams`, undefined, cb);\n   }\n\n   /**\n    * Create a team\n    * @see https://developer.github.com/v3/orgs/teams/#create-team\n    * @param {object} options - Team creation parameters\n    * @param {string} options.name - The name of the team\n    * @param {string} [options.description] - Team description\n    * @param {string} [options.repo_names] - Repos to add the team to\n    * @param {string} [options.privacy=secret] - The level of privacy the team should have. Can be either one\n    * of: `secret`, or `closed`\n    * @param {Requestable.callback} [cb] - will receive the created team\n    * @return {Promise} - the promise for the http request\n    */\n   createTeam(options, cb) {\n      return this._request('POST', `/orgs/${this.__name}/teams`, options, cb);\n   }\n}\n\nmodule.exports = Organization;\n","/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\n\n/**\n * RateLimit allows users to query their rate-limit status\n */\nclass RateLimit extends Requestable {\n   /**\n    * construct a RateLimit\n    * @param {Requestable.auth} auth - the credentials to authenticate to GitHub\n    * @param {string} [apiBase] - the base Github API URL\n    * @return {Promise} - the promise for the http request\n    */\n   constructor(auth, apiBase) {\n      super(auth, apiBase);\n   }\n\n   /**\n    * Query the current rate limit\n    * @see https://developer.github.com/v3/rate_limit/\n    * @param {Requestable.callback} [cb] - will receive the rate-limit data\n    * @return {Promise} - the promise for the http request\n    */\n   getRateLimit(cb) {\n      return this._request('GET', '/rate_limit', null, cb);\n   }\n}\n\nmodule.exports = RateLimit;\n","/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport Utf8 from 'utf8';\nimport {\n   Base64\n} from 'js-base64';\nimport debug from 'debug';\nconst log = debug('github:repository');\n\n/**\n * Respository encapsulates the functionality to create, query, and modify files.\n */\nclass Repository extends Requestable {\n   /**\n    * Create a Repository.\n    * @param {string} fullname - the full name of the repository\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(fullname, auth, apiBase) {\n      super(auth, apiBase);\n      this.__fullname = fullname;\n      this.__currentTree = {\n         branch: null,\n         sha: null\n      };\n   }\n\n   /**\n    * Get a reference\n    * @see https://developer.github.com/v3/git/refs/#get-a-reference\n    * @param {string} ref - the reference to get\n    * @param {Requestable.callback} [cb] - will receive the reference's refSpec or a list of refSpecs that match `ref`\n    * @return {Promise} - the promise for the http request\n    */\n   getRef(ref, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/git/refs/${ref}`, null, cb);\n   }\n\n   /**\n    * Create a reference\n    * @see https://developer.github.com/v3/git/refs/#create-a-reference\n    * @param {Object} options - the object describing the ref\n    * @param {Requestable.callback} [cb] - will receive the ref\n    * @return {Promise} - the promise for the http request\n    */\n   createRef(options, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/git/refs`, options, cb);\n   }\n\n   /**\n    * Delete a reference\n    * @see https://developer.github.com/v3/git/refs/#delete-a-reference\n    * @param {string} ref - the name of the ref to delte\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\n    * @return {Promise} - the promise for the http request\n    */\n   deleteRef(ref, cb) {\n      return this._request('DELETE', `/repos/${this.__fullname}/git/refs/${ref}`, null, cb);\n   }\n\n   /**\n    * Delete a repository\n    * @see https://developer.github.com/v3/repos/#delete-a-repository\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\n    * @return {Promise} - the promise for the http request\n    */\n   deleteRepo(cb) {\n      return this._request('DELETE', `/repos/${this.__fullname}`, null, cb);\n   }\n\n   /**\n    * List the tags on a repository\n    * @see https://developer.github.com/v3/repos/#list-tags\n    * @param {Requestable.callback} [cb] - will receive the tag data\n    * @return {Promise} - the promise for the http request\n    */\n   listTags(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/tags`, null, cb);\n   }\n\n   /**\n    * List the open pull requests on the repository\n    * @see https://developer.github.com/v3/pulls/#list-pull-requests\n    * @param {Object} options - options to filter the search\n    * @param {Requestable.callback} [cb] - will receive the list of PRs\n    * @return {Promise} - the promise for the http request\n    */\n   listPullRequests(options, cb) {\n      options = options || {};\n      return this._request('GET', `/repos/${this.__fullname}/pulls`, options, cb);\n   }\n\n   /**\n    * Get information about a specific pull request\n    * @see https://developer.github.com/v3/pulls/#get-a-single-pull-request\n    * @param {number} number - the PR you wish to fetch\n    * @param {Requestable.callback} [cb] - will receive the PR from the API\n    * @return {Promise} - the promise for the http request\n    */\n   getPullRequest(number, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/pulls/${number}`, null, cb);\n   }\n\n   /**\n    * List the files of a specific pull request\n    * @see https://developer.github.com/v3/pulls/#list-pull-requests-files\n    * @param {number|string} number - the PR you wish to fetch\n    * @param {Requestable.callback} [cb] - will receive the list of files from the API\n    * @return {Promise} - the promise for the http request\n    */\n   listPullRequestFiles(number, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/pulls/${number}/files`, null, cb);\n   }\n\n   /**\n    * Compare two branches/commits/repositories\n    * @see https://developer.github.com/v3/repos/commits/#compare-two-commits\n    * @param {string} base - the base commit\n    * @param {string} head - the head commit\n    * @param {Requestable.callback} cb - will receive the comparison\n    * @return {Promise} - the promise for the http request\n    */\n   compareBranches(base, head, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/compare/${base}...${head}`, null, cb);\n   }\n\n   /**\n    * List all the branches for the repository\n    * @see https://developer.github.com/v3/repos/#list-branches\n    * @param {Requestable.callback} cb - will receive the list of branches\n    * @return {Promise} - the promise for the http request\n    */\n   listBranches(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/branches`, null, cb);\n   }\n\n   /**\n    * Get a raw blob from the repository\n    * @see https://developer.github.com/v3/git/blobs/#get-a-blob\n    * @param {string} sha - the sha of the blob to fetch\n    * @param {Requestable.callback} cb - will receive the blob from the API\n    * @return {Promise} - the promise for the http request\n    */\n   getBlob(sha, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/git/blobs/${sha}`, null, cb, 'raw');\n   }\n\n   /**\n    * Get a commit from the repository\n    * @see https://developer.github.com/v3/repos/commits/#get-a-single-commit\n    * @param {string} sha - the sha for the commit to fetch\n    * @param {Requestable.callback} cb - will receive the commit data\n    * @return {Promise} - the promise for the http request\n    */\n   getCommit(sha, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/git/commits/${sha}`, null, cb);\n   }\n\n   /**\n    * List the commits on a repository, optionally filtering by path, author or time range\n    * @see https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository\n    * @param {Object} [options] - the filtering options for commits\n    * @param {string} [options.sha] - the SHA or branch to start from\n    * @param {string} [options.path] - the path to search on\n    * @param {string} [options.author] - the commit author\n    * @param {(Date|string)} [options.since] - only commits after this date will be returned\n    * @param {(Date|string)} [options.until] - only commits before this date will be returned\n    * @param {Requestable.callback} cb - will receive the list of commits found matching the criteria\n    * @return {Promise} - the promise for the http request\n    */\n   listCommits(options, cb) {\n      options = options || {};\n\n      options.since = this._dateToISO(options.since);\n      options.until = this._dateToISO(options.until);\n\n      return this._request('GET', `/repos/${this.__fullname}/commits`, options, cb);\n   }\n\n    /**\n     * Gets a single commit information for a repository\n     * @see https://developer.github.com/v3/repos/commits/#get-a-single-commit\n     * @param {string} ref - the reference for the commit-ish\n     * @param {Requestable.callback} cb - will receive the commit information\n     * @return {Promise} - the promise for the http request\n     */\n   getSingleCommit(ref, cb) {\n      ref = ref || '';\n      return this._request('GET', `/repos/${this.__fullname}/commits/${ref}`, null, cb);\n   }\n\n   /**\n    * Get tha sha for a particular object in the repository. This is a convenience function\n    * @see https://developer.github.com/v3/repos/contents/#get-contents\n    * @param {string} [branch] - the branch to look in, or the repository's default branch if omitted\n    * @param {string} path - the path of the file or directory\n    * @param {Requestable.callback} cb - will receive a description of the requested object, including a `SHA` property\n    * @return {Promise} - the promise for the http request\n    */\n   getSha(branch, path, cb) {\n      branch = branch ? `?ref=${branch}` : '';\n      return this._request('GET', `/repos/${this.__fullname}/contents/${path}${branch}`, null, cb);\n   }\n\n   /**\n    * List the commit statuses for a particular sha, branch, or tag\n    * @see https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref\n    * @param {string} sha - the sha, branch, or tag to get statuses for\n    * @param {Requestable.callback} cb - will receive the list of statuses\n    * @return {Promise} - the promise for the http request\n    */\n   listStatuses(sha, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/commits/${sha}/statuses`, null, cb);\n   }\n\n   /**\n    * Get a description of a git tree\n    * @see https://developer.github.com/v3/git/trees/#get-a-tree\n    * @param {string} treeSHA - the SHA of the tree to fetch\n    * @param {Requestable.callback} cb - will receive the callback data\n    * @return {Promise} - the promise for the http request\n    */\n   getTree(treeSHA, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/git/trees/${treeSHA}`, null, cb);\n   }\n\n   /**\n    * Create a blob\n    * @see https://developer.github.com/v3/git/blobs/#create-a-blob\n    * @param {(string|Buffer|Blob)} content - the content to add to the repository\n    * @param {Requestable.callback} cb - will receive the details of the created blob\n    * @return {Promise} - the promise for the http request\n    */\n   createBlob(content, cb) {\n      let postBody = this._getContentObject(content);\n\n      log('sending content', postBody);\n      return this._request('POST', `/repos/${this.__fullname}/git/blobs`, postBody, cb);\n   }\n\n   /**\n    * Get the object that represents the provided content\n    * @param {string|Buffer|Blob} content - the content to send to the server\n    * @return {Object} the representation of `content` for the GitHub API\n    */\n   _getContentObject(content) {\n      if (typeof content === 'string') {\n         log('contet is a string');\n         return {\n            content: Utf8.encode(content),\n            encoding: 'utf-8'\n         };\n\n      } else if (typeof Buffer !== 'undefined' && content instanceof Buffer) {\n         log('We appear to be in Node');\n         return {\n            content: content.toString('base64'),\n            encoding: 'base64'\n         };\n\n      } else if (typeof Blob !== 'undefined' && content instanceof Blob) {\n         log('We appear to be in the browser');\n         return {\n            content: Base64.encode(content),\n            encoding: 'base64'\n         };\n\n      } else { // eslint-disable-line\n         log(`Not sure what this content is: ${typeof content}, ${JSON.stringify(content)}`);\n         throw new Error('Unknown content passed to postBlob. Must be string or Buffer (node) or Blob (web)');\n      }\n   }\n\n   /**\n    * Update a tree in Git\n    * @see https://developer.github.com/v3/git/trees/#create-a-tree\n    * @param {string} baseTreeSHA - the SHA of the tree to update\n    * @param {string} path - the path for the new file\n    * @param {string} blobSHA - the SHA for the blob to put at `path`\n    * @param {Requestable.callback} cb - will receive the new tree that is created\n    * @return {Promise} - the promise for the http request\n    * @deprecated use {@link Repository#createTree} instead\n    */\n   updateTree(baseTreeSHA, path, blobSHA, cb) {\n      let newTree = {\n         base_tree: baseTreeSHA, // eslint-disable-line\n         tree: [{\n            path: path,\n            sha: blobSHA,\n            mode: '100644',\n            type: 'blob'\n         }]\n      };\n\n      return this._request('POST', `/repos/${this.__fullname}/git/trees`, newTree, cb);\n   }\n\n   /**\n    * Create a new tree in git\n    * @see https://developer.github.com/v3/git/trees/#create-a-tree\n    * @param {Object} tree - the tree to create\n    * @param {string} baseSHA - the root sha of the tree\n    * @param {Requestable.callback} cb - will receive the new tree that is created\n    * @return {Promise} - the promise for the http request\n    */\n   createTree(tree, baseSHA, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/git/trees`, {\n         tree,\n         base_tree: baseSHA // eslint-disable-line\n      }, cb);\n   }\n\n   /**\n    * Add a commit to the repository\n    * @see https://developer.github.com/v3/git/commits/#create-a-commit\n    * @param {string} parent - the SHA of the parent commit\n    * @param {string} tree - the SHA of the tree for this commit\n    * @param {string} message - the commit message\n    * @param {Requestable.callback} cb - will receive the commit that is created\n    * @return {Promise} - the promise for the http request\n    */\n   commit(parent, tree, message, cb) {\n      let data = {\n         message,\n         tree,\n         parents: [parent]\n      };\n\n      return this._request('POST', `/repos/${this.__fullname}/git/commits`, data, cb)\n         .then((response) => {\n            this.__currentTree.sha = response.data.sha; // Update latest commit\n            return response;\n         });\n   }\n\n   /**\n    * Update a ref\n    * @see https://developer.github.com/v3/git/refs/#update-a-reference\n    * @param {string} ref - the ref to update\n    * @param {string} commitSHA - the SHA to point the reference to\n    * @param {boolean} force - indicates whether to force or ensure a fast-forward update\n    * @param {Requestable.callback} cb - will receive the updated ref back\n    * @return {Promise} - the promise for the http request\n    */\n   updateHead(ref, commitSHA, force, cb) {\n      return this._request('PATCH', `/repos/${this.__fullname}/git/refs/${ref}`, {\n         sha: commitSHA,\n         force: force\n      }, cb);\n   }\n\n   /**\n    * Get information about the repository\n    * @see https://developer.github.com/v3/repos/#get\n    * @param {Requestable.callback} cb - will receive the information about the repository\n    * @return {Promise} - the promise for the http request\n    */\n   getDetails(cb) {\n      return this._request('GET', `/repos/${this.__fullname}`, null, cb);\n   }\n\n   /**\n    * List the contributors to the repository\n    * @see https://developer.github.com/v3/repos/#list-contributors\n    * @param {Requestable.callback} cb - will receive the list of contributors\n    * @return {Promise} - the promise for the http request\n    */\n   getContributors(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/stats/contributors`, null, cb);\n   }\n\n   /**\n    * List the users who are collaborators on the repository. The currently authenticated user must have\n    * push access to use this method\n    * @see https://developer.github.com/v3/repos/collaborators/#list-collaborators\n    * @param {Requestable.callback} cb - will receive the list of collaborators\n    * @return {Promise} - the promise for the http request\n    */\n   getCollaborators(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/collaborators`, null, cb);\n   }\n\n   /**\n    * Check if a user is a collaborator on the repository\n    * @see https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator\n    * @param {string} username - the user to check\n    * @param {Requestable.callback} cb - will receive true if the user is a collaborator and false if they are not\n    * @return {Promise} - the promise for the http request {Boolean} [description]\n    */\n   isCollaborator(username, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/collaborators/${username}`, null, cb);\n   }\n\n   /**\n    * Get the contents of a repository\n    * @see https://developer.github.com/v3/repos/contents/#get-contents\n    * @param {string} ref - the ref to check\n    * @param {string} path - the path containing the content to fetch\n    * @param {boolean} raw - `true` if the results should be returned raw instead of GitHub's normalized format\n    * @param {Requestable.callback} cb - will receive the fetched data\n    * @return {Promise} - the promise for the http request\n    */\n   getContents(ref, path, raw, cb) {\n      path = path ? `${encodeURI(path)}` : '';\n      return this._request('GET', `/repos/${this.__fullname}/contents/${path}`, {\n         ref\n      }, cb, raw);\n   }\n\n   /**\n    * Get the README of a repository\n    * @see https://developer.github.com/v3/repos/contents/#get-the-readme\n    * @param {string} ref - the ref to check\n    * @param {boolean} raw - `true` if the results should be returned raw instead of GitHub's normalized format\n    * @param {Requestable.callback} cb - will receive the fetched data\n    * @return {Promise} - the promise for the http request\n    */\n   getReadme(ref, raw, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/readme`, {\n         ref\n      }, cb, raw);\n   }\n\n   /**\n    * Fork a repository\n    * @see https://developer.github.com/v3/repos/forks/#create-a-fork\n    * @param {Requestable.callback} cb - will receive the information about the newly created fork\n    * @return {Promise} - the promise for the http request\n    */\n   fork(cb) {\n      return this._request('POST', `/repos/${this.__fullname}/forks`, null, cb);\n   }\n\n   /**\n    * List a repository's forks\n    * @see https://developer.github.com/v3/repos/forks/#list-forks\n    * @param {Requestable.callback} cb - will receive the list of repositories forked from this one\n    * @return {Promise} - the promise for the http request\n    */\n   listForks(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/forks`, null, cb);\n   }\n\n   /**\n    * Create a new branch from an existing branch.\n    * @param {string} [oldBranch=master] - the name of the existing branch\n    * @param {string} newBranch - the name of the new branch\n    * @param {Requestable.callback} cb - will receive the commit data for the head of the new branch\n    * @return {Promise} - the promise for the http request\n    */\n   createBranch(oldBranch, newBranch, cb) {\n      if (typeof newBranch === 'function') {\n         cb = newBranch;\n         newBranch = oldBranch;\n         oldBranch = 'master';\n      }\n\n      return this.getRef(`heads/${oldBranch}`)\n         .then((response) => {\n            let sha = response.data.object.sha;\n            return this.createRef({\n               sha,\n               ref: `refs/heads/${newBranch}`\n            }, cb);\n         });\n   }\n\n   /**\n    * Create a new pull request\n    * @see https://developer.github.com/v3/pulls/#create-a-pull-request\n    * @param {Object} options - the pull request description\n    * @param {Requestable.callback} cb - will receive the new pull request\n    * @return {Promise} - the promise for the http request\n    */\n   createPullRequest(options, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/pulls`, options, cb);\n   }\n\n   /**\n    * Update a pull request\n    * @see https://developer.github.com/v3/pulls/#update-a-pull-request\n    * @param {number|string} number - the number of the pull request to update\n    * @param {Object} options - the pull request description\n    * @param {Requestable.callback} [cb] - will receive the pull request information\n    * @return {Promise} - the promise for the http request\n    */\n   updatePullRequst(number, options, cb) {\n      return this._request('PATCH', `/repos/${this.__fullname}/pulls/${number}`, options, cb);\n   }\n\n   /**\n    * List the hooks for the repository\n    * @see https://developer.github.com/v3/repos/hooks/#list-hooks\n    * @param {Requestable.callback} cb - will receive the list of hooks\n    * @return {Promise} - the promise for the http request\n    */\n   listHooks(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/hooks`, null, cb);\n   }\n\n   /**\n    * Get a hook for the repository\n    * @see https://developer.github.com/v3/repos/hooks/#get-single-hook\n    * @param {number} id - the id of the webook\n    * @param {Requestable.callback} cb - will receive the details of the webook\n    * @return {Promise} - the promise for the http request\n    */\n   getHook(id, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/hooks/${id}`, null, cb);\n   }\n\n   /**\n    * Add a new hook to the repository\n    * @see https://developer.github.com/v3/repos/hooks/#create-a-hook\n    * @param {Object} options - the configuration describing the new hook\n    * @param {Requestable.callback} cb - will receive the new webhook\n    * @return {Promise} - the promise for the http request\n    */\n   createHook(options, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/hooks`, options, cb);\n   }\n\n   /**\n    * Edit an existing webhook\n    * @see https://developer.github.com/v3/repos/hooks/#edit-a-hook\n    * @param {number} id - the id of the webhook\n    * @param {Object} options - the new description of the webhook\n    * @param {Requestable.callback} cb - will receive the updated webhook\n    * @return {Promise} - the promise for the http request\n    */\n   updateHook(id, options, cb) {\n      return this._request('PATCH', `/repos/${this.__fullname}/hooks/${id}`, options, cb);\n   }\n\n   /**\n    * Delete a webhook\n    * @see https://developer.github.com/v3/repos/hooks/#delete-a-hook\n    * @param {number} id - the id of the webhook to be deleted\n    * @param {Requestable.callback} cb - will receive true if the call is successful\n    * @return {Promise} - the promise for the http request\n    */\n   deleteHook(id, cb) {\n      return this._request('DELETE', `${this.__repoPath}/hooks/${id}`, null, cb);\n   }\n\n   /**\n    * Delete a file from a branch\n    * @see https://developer.github.com/v3/repos/contents/#delete-a-file\n    * @param {string} branch - the branch to delete from, or the default branch if not specified\n    * @param {string} path - the path of the file to remove\n    * @param {Requestable.callback} cb - will receive the commit in which the delete occurred\n    * @return {Promise} - the promise for the http request\n    */\n   deleteFile(branch, path, cb) {\n      return this.getSha(branch, path)\n         .then((response) => {\n            const deleteCommit = {\n               message: `Delete the file at '${path}'`,\n               sha: response.data.sha,\n               branch\n            };\n            return this._request('DELETE', `/repos/${this.__fullname}/contents/${path}`, deleteCommit, cb);\n         });\n   }\n\n   /**\n    * Change all references in a repo from oldPath to new_path\n    * @param {string} branch - the branch to carry out the reference change, or the default branch if not specified\n    * @param {string} oldPath - original path\n    * @param {string} newPath - new reference path\n    * @param {Requestable.callback} cb - will receive the commit in which the move occurred\n    * @return {Promise} - the promise for the http request\n    */\n   move(branch, oldPath, newPath, cb) {\n      let oldSha;\n      return this.getRef(`heads/${branch}`)\n         .then(({data: {object}}) => this.getTree(`${object.sha}?recursive=true`))\n         .then(({data: {tree, sha}}) => {\n            oldSha = sha;\n            let newTree = tree.map((ref) => {\n               if (ref.path === oldPath) {\n                  ref.path = newPath;\n               }\n               if (ref.type === 'tree') {\n                  delete ref.sha;\n               }\n               return ref;\n            });\n            return this.createTree(newTree);\n         })\n         .then(({data: tree}) => this.commit(oldSha, tree.sha, `Renamed '${oldPath}' to '${newPath}'`))\n         .then(({data: commit}) => this.updateHead(`heads/${branch}`, commit.sha, true, cb));\n   }\n\n   /**\n    * Write a file to the repository\n    * @see https://developer.github.com/v3/repos/contents/#update-a-file\n    * @param {string} branch - the name of the branch\n    * @param {string} path - the path for the file\n    * @param {string} content - the contents of the file\n    * @param {string} message - the commit message\n    * @param {Object} [options] - commit options\n    * @param {Object} [options.author] - the author of the commit\n    * @param {Object} [options.commiter] - the committer\n    * @param {boolean} [options.encode] - true if the content should be base64 encoded\n    * @param {Requestable.callback} cb - will receive the new commit\n    * @return {Promise} - the promise for the http request\n    */\n   writeFile(branch, path, content, message, options, cb) {\n      if (typeof options === 'function') {\n         cb = options;\n         options = {};\n      }\n      let filePath = path ? encodeURI(path) : '';\n      let shouldEncode = options.encode !== false;\n      let commit = {\n         branch,\n         message,\n         author: options.author,\n         committer: options.committer,\n         content: shouldEncode ? Base64.encode(content) : content\n      };\n\n      return this.getSha(branch, filePath)\n         .then((response) => {\n            commit.sha = response.data.sha;\n            return this._request('PUT', `/repos/${this.__fullname}/contents/${filePath}`, commit, cb);\n         }, () => {\n            return this._request('PUT', `/repos/${this.__fullname}/contents/${filePath}`, commit, cb);\n         });\n   }\n\n   /**\n    * Check if a repository is starred by you\n    * @see https://developer.github.com/v3/activity/starring/#check-if-you-are-starring-a-repository\n    * @param {Requestable.callback} cb - will receive true if the repository is starred and false if the repository\n    *                                  is not starred\n    * @return {Promise} - the promise for the http request {Boolean} [description]\n    */\n   isStarred(cb) {\n      return this._request204or404(`/user/starred/${this.__fullname}`, null, cb);\n   }\n\n   /**\n    * Star a repository\n    * @see https://developer.github.com/v3/activity/starring/#star-a-repository\n    * @param {Requestable.callback} cb - will receive true if the repository is starred\n    * @return {Promise} - the promise for the http request\n    */\n   star(cb) {\n      return this._request('PUT', `/user/starred/${this.__fullname}`, null, cb);\n   }\n\n   /**\n    * Unstar a repository\n    * @see https://developer.github.com/v3/activity/starring/#unstar-a-repository\n    * @param {Requestable.callback} cb - will receive true if the repository is unstarred\n    * @return {Promise} - the promise for the http request\n    */\n   unstar(cb) {\n      return this._request('DELETE', `/user/starred/${this.__fullname}`, null, cb);\n   }\n\n   /**\n    * Create a new release\n    * @see https://developer.github.com/v3/repos/releases/#create-a-release\n    * @param {Object} options - the description of the release\n    * @param {Requestable.callback} cb - will receive the newly created release\n    * @return {Promise} - the promise for the http request\n    */\n   createRelease(options, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/releases`, options, cb);\n   }\n\n   /**\n    * Edit a release\n    * @see https://developer.github.com/v3/repos/releases/#edit-a-release\n    * @param {string} id - the id of the release\n    * @param {Object} options - the description of the release\n    * @param {Requestable.callback} cb - will receive the modified release\n    * @return {Promise} - the promise for the http request\n    */\n   updateRelease(id, options, cb) {\n      return this._request('PATCH', `/repos/${this.__fullname}/releases/${id}`, options, cb);\n   }\n\n   /**\n    * Get information about all releases\n    * @see https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository\n    * @param {Requestable.callback} cb - will receive the release information\n    * @return {Promise} - the promise for the http request\n    */\n   listReleases(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/releases`, null, cb);\n   }\n\n   /**\n    * Get information about a release\n    * @see https://developer.github.com/v3/repos/releases/#get-a-single-release\n    * @param {strign} id - the id of the release\n    * @param {Requestable.callback} cb - will receive the release information\n    * @return {Promise} - the promise for the http request\n    */\n   getRelease(id, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/releases/${id}`, null, cb);\n   }\n\n   /**\n    * Delete a release\n    * @see https://developer.github.com/v3/repos/releases/#delete-a-release\n    * @param {string} id - the release to be deleted\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\n    * @return {Promise} - the promise for the http request\n    */\n   deleteRelease(id, cb) {\n      return this._request('DELETE', `/repos/${this.__fullname}/releases/${id}`, null, cb);\n   }\n\n   /**\n    * Merge a pull request\n    * @see https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button\n    * @param {number|string} number - the number of the pull request to merge\n    * @param {Object} options - the merge options for the pull request\n    * @param {Requestable.callback} [cb] - will receive the merge information if the operation is successful\n    * @return {Promise} - the promise for the http request\n    */\n   mergePullRequest(number, options, cb) {\n      return this._request('PUT', `/repos/${this.__fullname}/pulls/${number}/merge`, options, cb);\n   }\n}\n\nmodule.exports = Repository;\n","/**\n * @file\n * @copyright  2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport axios from 'axios';\nimport debug from 'debug';\nimport {Base64} from 'js-base64';\nimport {polyfill} from 'es6-promise';\n\nconst log = debug('github:request');\n\nif (typeof Promise === 'undefined') {\n   polyfill();\n}\n\n/**\n * The error structure returned when a network call fails\n */\nclass ResponseError extends Error {\n   /**\n    * Construct a new ResponseError\n    * @param {string} message - an message to return instead of the the default error message\n    * @param {string} path - the requested path\n    * @param {Object} response - the object returned by Axios\n    */\n   constructor(message, path, response) {\n      super(message);\n      this.path = path;\n      this.request = response.config;\n      this.response = response;\n      this.status = response.status;\n   }\n}\n\n/**\n * Requestable wraps the logic for making http requests to the API\n */\nclass Requestable {\n   /**\n    * Either a username and password or an oauth token for Github\n    * @typedef {Object} Requestable.auth\n    * @prop {string} [username] - the Github username\n    * @prop {string} [password] - the user's password\n    * @prop {token} [token] - an OAuth token\n    */\n   /**\n    * Initialize the http internals.\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to Github. If auth is\n    *                                  not provided request will be made unauthenticated\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(auth, apiBase) {\n      this.__apiBase = apiBase || 'https://api.github.com';\n      this.__auth = {\n         token: auth.token,\n         username: auth.username,\n         password: auth.password\n      };\n\n      if (auth.token) {\n         this.__authorizationHeader = 'token ' + auth.token;\n      } else if (auth.username && auth.password) {\n         this.__authorizationHeader = 'Basic ' + Base64.encode(auth.username + ':' + auth.password);\n      }\n   }\n\n   /**\n    * Compute the URL to use to make a request.\n    * @private\n    * @param {string} path - either a URL relative to the API base or an absolute URL\n    * @return {string} - the URL to use\n    */\n   __getURL(path) {\n      let url = path;\n\n      if (path.indexOf('//') === -1) {\n         url = this.__apiBase + path;\n      }\n\n      let newCacheBuster = 'timestamp=' + new Date().getTime();\n      return url.replace(/(timestamp=\\d+)/, newCacheBuster);\n   }\n\n   /**\n    * Compute the headers required for an API request.\n    * @private\n    * @param {boolean} raw - if the request should be treated as JSON or as a raw request\n    * @return {Object} - the headers to use in the request\n    */\n   __getRequestHeaders(raw) {\n      let headers = {\n         'Accept': raw ? 'application/vnd.github.v3.raw+json' : 'application/vnd.github.v3+json',\n         'Content-Type': 'application/json;charset=UTF-8'\n      };\n\n      if (this.__authorizationHeader) {\n         headers.Authorization = this.__authorizationHeader;\n      }\n\n      return headers;\n   }\n\n   /**\n    * Sets the default options for API requests\n    * @protected\n    * @param {Object} [requestOptions={}] - the current options for the request\n    * @return {Object} - the options to pass to the request\n    */\n   _getOptionsWithDefaults(requestOptions = {}) {\n      if (!(requestOptions.visibility || requestOptions.affiliation)) {\n         requestOptions.type = requestOptions.type || 'all';\n      }\n      requestOptions.sort = requestOptions.sort || 'updated';\n      requestOptions.per_page = requestOptions.per_page || '100'; // eslint-disable-line\n\n      return requestOptions;\n   }\n\n   /**\n    * if a `Date` is passed to this function it will be converted to an ISO string\n    * @param {*} date - the object to attempt to cooerce into an ISO date string\n    * @return {string} - the ISO representation of `date` or whatever was passed in if it was not a date\n    */\n   _dateToISO(date) {\n      if (date && (date instanceof Date)) {\n         date = date.toISOString();\n      }\n\n      return date;\n   }\n\n   /**\n    * A function that receives the result of the API request.\n    * @callback Requestable.callback\n    * @param {Requestable.Error} error - the error returned by the API or `null`\n    * @param {(Object|true)} result - the data returned by the API or `true` if the API returns `204 No Content`\n    * @param {Object} request - the raw {@linkcode https://github.com/mzabriskie/axios#response-schema Response}\n    */\n   /**\n    * Make a request.\n    * @param {string} method - the method for the request (GET, PUT, POST, DELETE)\n    * @param {string} path - the path for the request\n    * @param {*} [data] - the data to send to the server. For HTTP methods that don't have a body the data\n    *                   will be sent as query parameters\n    * @param {Requestable.callback} [cb] - the callback for the request\n    * @param {boolean} [raw=false] - if the request should be sent as raw. If this is a falsy value then the\n    *                              request will be made as JSON\n    * @return {Promise} - the Promise for the http request\n    */\n   _request(method, path, data, cb, raw) {\n      const url = this.__getURL(path);\n      const headers = this.__getRequestHeaders(raw);\n      let queryParams = {};\n\n      const shouldUseDataAsParams = data && (typeof data === 'object') && methodHasNoBody(method);\n      if (shouldUseDataAsParams) {\n         queryParams = data;\n         data = undefined;\n      }\n\n      const config = {\n         url: url,\n         method: method,\n         headers: headers,\n         params: queryParams,\n         data: data,\n         responseType: raw ? 'text' : 'json'\n      };\n\n      log(`${config.method} to ${config.url}`);\n      const requestPromise = axios(config).catch(callbackErrorOrThrow(cb, path));\n\n      if (cb) {\n         requestPromise.then((response) => {\n            cb(null, response.data || true, response);\n         });\n      }\n\n      return requestPromise;\n   }\n\n   /**\n    * Make a request to an endpoint the returns 204 when true and 404 when false\n    * @param {string} path - the path to request\n    * @param {Object} data - any query parameters for the request\n    * @param {Requestable.callback} cb - the callback that will receive `true` or `false`\n    * @param {method} [method=GET] - HTTP Method to use\n    * @return {Promise} - the promise for the http request\n    */\n   _request204or404(path, data, cb, method = 'GET') {\n      return this._request(method, path, data)\n         .then(function success(response) {\n            if (cb) {\n               cb(null, true, response);\n            }\n            return true;\n         }, function failure(response) {\n            if (response.status === 404) {\n               if (cb) {\n                  cb(null, false, response);\n               }\n               return false;\n            }\n\n            if (cb) {\n               cb(response);\n            }\n            throw response;\n         });\n   }\n\n   /**\n    * Make a request and fetch all the available data. Github will paginate responses so for queries\n    * that might span multiple pages this method is preferred to {@link Requestable#request}\n    * @param {string} path - the path to request\n    * @param {Object} options - the query parameters to include\n    * @param {Requestable.callback} [cb] - the function to receive the data. The returned data will always be an array.\n    * @param {Object[]} results - the partial results. This argument is intended for interal use only.\n    * @return {Promise} - a promise which will resolve when all pages have been fetched\n    * @deprecated This will be folded into {@link Requestable#_request} in the 2.0 release.\n    */\n   _requestAllPages(path, options, cb, results) {\n      results = results || [];\n\n      return this._request('GET', path, options)\n         .then((response) => {\n            let thisGroup;\n            if (response.data instanceof Array) {\n               thisGroup = response.data;\n            } else if (response.data.items instanceof Array) {\n               thisGroup = response.data.items;\n            } else {\n               let message = `cannot figure out how to append ${response.data} to the result set`;\n               throw new ResponseError(message, path, response);\n            }\n            results.push.apply(results, thisGroup);\n\n            const nextUrl = getNextPage(response.headers.link);\n            if (nextUrl) {\n               log(`getting next page: ${nextUrl}`);\n               return this._requestAllPages(nextUrl, options, cb, results);\n            }\n\n            if (cb) {\n               cb(null, results, response);\n            }\n\n            response.data = results;\n            return response;\n         }).catch(callbackErrorOrThrow(cb, path));\n   }\n}\n\nmodule.exports = Requestable;\n\n// ////////////////////////// //\n//  Private helper functions  //\n// ////////////////////////// //\nconst METHODS_WITH_NO_BODY = ['GET', 'HEAD', 'DELETE'];\nfunction methodHasNoBody(method) {\n   return METHODS_WITH_NO_BODY.indexOf(method) !== -1;\n}\n\nfunction getNextPage(linksHeader = '') {\n   const links = linksHeader.split(/\\s*,\\s*/); // splits and strips the urls\n   return links.reduce(function(nextUrl, link) {\n      if (link.search(/rel=\"next\"/) !== -1) {\n         return (link.match(/<(.*)>/) || [])[1];\n      }\n\n      return nextUrl;\n   }, undefined);\n}\n\nfunction callbackErrorOrThrow(cb, path) {\n   return function handler(response) {\n      let message = `error making request ${response.config.method} ${response.config.url}`;\n      let error = new ResponseError(message, path, response);\n      log(`${message} ${JSON.stringify(response.data)}`);\n      if (cb) {\n         log('going to error callback');\n         cb(error);\n      } else {\n         log('throwing error');\n         throw error;\n      }\n   };\n}\n","/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('github:search');\n\n/**\n * Wrap the Search API\n */\nclass Search extends Requestable {\n   /**\n    * Create a Search\n    * @param {Object} defaults - defaults for the search\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(defaults, auth, apiBase) {\n      super(auth, apiBase);\n      this.__defaults = this._getOptionsWithDefaults(defaults);\n   }\n\n   /**\n    * Available search options\n    * @see https://developer.github.com/v3/search/#parameters\n    * @typedef {Object} Search.Params\n    * @param {string} q - the query to make\n    * @param {string} sort - the sort field, one of `stars`, `forks`, or `updated`.\n    *                      Default is [best match](https://developer.github.com/v3/search/#ranking-search-results)\n    * @param {string} order - the ordering, either `asc` or `desc`\n    */\n   /**\n    * Perform a search on the GitHub API\n    * @private\n    * @param {string} path - the scope of the search\n    * @param {Search.Params} [withOptions] - additional parameters for the search\n    * @param {Requestable.callback} [cb] - will receive the results of the search\n    * @return {Promise} - the promise for the http request\n    */\n   _search(path, withOptions = {}, cb = undefined) {\n      let requestOptions = {};\n      Object.keys(this.__defaults).forEach((prop) => {\n         requestOptions[prop] = this.__defaults[prop];\n      });\n      Object.keys(withOptions).forEach((prop) => {\n         requestOptions[prop] = withOptions[prop];\n      });\n\n      log(`searching ${path} with options:`, requestOptions);\n      return this._requestAllPages(`/search/${path}`, requestOptions, cb);\n   }\n\n   /**\n    * Search for repositories\n    * @see https://developer.github.com/v3/search/#search-repositories\n    * @param {Search.Params} [options] - additional parameters for the search\n    * @param {Requestable.callback} [cb] - will receive the results of the search\n    * @return {Promise} - the promise for the http request\n    */\n   forRepositories(options, cb) {\n      return this._search('repositories', options, cb);\n   }\n\n   /**\n    * Search for code\n    * @see https://developer.github.com/v3/search/#search-code\n    * @param {Search.Params} [options] - additional parameters for the search\n    * @param {Requestable.callback} [cb] - will receive the results of the search\n    * @return {Promise} - the promise for the http request\n    */\n   forCode(options, cb) {\n      return this._search('code', options, cb);\n   }\n\n   /**\n    * Search for issues\n    * @see https://developer.github.com/v3/search/#search-issues\n    * @param {Search.Params} [options] - additional parameters for the search\n    * @param {Requestable.callback} [cb] - will receive the results of the search\n    * @return {Promise} - the promise for the http request\n    */\n   forIssues(options, cb) {\n      return this._search('issues', options, cb);\n   }\n\n   /**\n    * Search for users\n    * @see https://developer.github.com/v3/search/#search-users\n    * @param {Search.Params} [options] - additional parameters for the search\n    * @param {Requestable.callback} [cb] - will receive the results of the search\n    * @return {Promise} - the promise for the http request\n    */\n   forUsers(options, cb) {\n      return this._search('users', options, cb);\n   }\n}\n\nmodule.exports = Search;\n","/**\n * @file\n * @copyright  2016 Matt Smith (Development Seed)\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('github:team');\n\n/**\n * A Team allows scoping of API requests to a particular Github Organization Team.\n */\nclass Team extends Requestable {\n   /**\n    * Create a Team.\n    * @param {string} [teamId] - the id for the team\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(teamId, auth, apiBase) {\n      super(auth, apiBase);\n      this.__teamId = teamId;\n   }\n\n   /**\n    * Get Team information\n    * @see https://developer.github.com/v3/orgs/teams/#get-team\n    * @param {Requestable.callback} [cb] - will receive the team\n    * @return {Promise} - the promise for the http request\n    */\n   getTeam(cb) {\n      log(`Fetching Team ${this.__teamId}`);\n      return this._request('Get', `/teams/${this.__teamId}`, undefined, cb);\n   }\n\n   /**\n    * List the Team's repositories\n    * @see https://developer.github.com/v3/orgs/teams/#list-team-repos\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   listRepos(cb) {\n      log(`Fetching repositories for Team ${this.__teamId}`);\n      return this._requestAllPages(`/teams/${this.__teamId}/repos`, undefined, cb);\n   }\n\n   /**\n    * Edit Team information\n    * @see https://developer.github.com/v3/orgs/teams/#edit-team\n    * @param {object} options - Parameters for team edit\n    * @param {string} options.name - The name of the team\n    * @param {string} [options.description] - Team description\n    * @param {string} [options.repo_names] - Repos to add the team to\n    * @param {string} [options.privacy=secret] - The level of privacy the team should have. Can be either one\n    * of: `secret`, or `closed`\n    * @param {Requestable.callback} [cb] - will receive the updated team\n    * @return {Promise} - the promise for the http request\n    */\n   editTeam(options, cb) {\n      log(`Editing Team ${this.__teamId}`);\n      return this._request('PATCH', `/teams/${this.__teamId}`, options, cb);\n   }\n\n   /**\n    * List the users who are members of the Team\n    * @see https://developer.github.com/v3/orgs/teams/#list-team-members\n    * @param {object} options - Parameters for listing team users\n    * @param {string} [options.role=all] - can be one of: `all`, `maintainer`, or `member`\n    * @param {Requestable.callback} [cb] - will receive the list of users\n    * @return {Promise} - the promise for the http request\n    */\n   listMembers(options, cb) {\n      log(`Getting members of Team ${this.__teamId}`);\n      return this._requestAllPages(`/teams/${this.__teamId}/members`, options, cb);\n   }\n\n   /**\n    * Get Team membership status for a user\n    * @see https://developer.github.com/v3/orgs/teams/#get-team-membership\n    * @param {string} username - can be one of: `all`, `maintainer`, or `member`\n    * @param {Requestable.callback} [cb] - will receive the membership status of a user\n    * @return {Promise} - the promise for the http request\n    */\n   getMembership(username, cb) {\n      log(`Getting membership of user ${username} in Team ${this.__teamId}`);\n      return this._request('GET', `/teams/${this.__teamId}/memberships/${username}`, undefined, cb);\n   }\n\n   /**\n    * Add a member to the Team\n    * @see https://developer.github.com/v3/orgs/teams/#add-team-membership\n    * @param {string} username - can be one of: `all`, `maintainer`, or `member`\n    * @param {object} options - Parameters for adding a team member\n    * @param {string} [options.role=member] - The role that this user should have in the team. Can be one\n    * of: `member`, or `maintainer`\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\n    * @return {Promise} - the promise for the http request\n    */\n   addMembership(username, options, cb) {\n      log(`Adding user ${username} to Team ${this.__teamId}`);\n      return this._request('PUT', `/teams/${this.__teamId}/memberships/${username}`, options, cb);\n   }\n\n   /**\n    * Get repo management status for team\n    * @see https://developer.github.com/v3/orgs/teams/#remove-team-membership\n    * @param {string} owner - Organization name\n    * @param {string} repo - Repo name\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\n    * @return {Promise} - the promise for the http request\n    */\n   isManagedRepo(owner, repo, cb) {\n      log(`Getting repo management by Team ${this.__teamId} for repo ${owner}/${repo}`);\n      return this._request204or404(`/teams/${this.__teamId}/repos/${owner}/${repo}`, undefined, cb);\n   }\n\n   /**\n    * Add or Update repo management status for team\n    * @see https://developer.github.com/v3/orgs/teams/#add-or-update-team-repository\n    * @param {string} owner - Organization name\n    * @param {string} repo - Repo name\n    * @param {object} options - Parameters for adding or updating repo management for the team\n    * @param {string} [options.permission] - The permission to grant the team on this repository. Can be one\n    * of: `pull`, `push`, or `admin`\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\n    * @return {Promise} - the promise for the http request\n    */\n   manageRepo(owner, repo, options, cb) {\n      log(`Adding or Updating repo management by Team ${this.__teamId} for repo ${owner}/${repo}`);\n      return this._request204or404(`/teams/${this.__teamId}/repos/${owner}/${repo}`, options, cb, 'PUT');\n   }\n\n   /**\n    * Remove repo management status for team\n    * @see https://developer.github.com/v3/orgs/teams/#remove-team-repository\n    * @param {string} owner - Organization name\n    * @param {string} repo - Repo name\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\n    * @return {Promise} - the promise for the http request\n    */\n   unmanageRepo(owner, repo, cb) {\n      log(`Remove repo management by Team ${this.__teamId} for repo ${owner}/${repo}`);\n      return this._request204or404(`/teams/${this.__teamId}/repos/${owner}/${repo}`, undefined, cb, 'DELETE');\n   }\n\n   /**\n    * Delete Team\n    * @see https://developer.github.com/v3/orgs/teams/#delete-team\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   deleteTeam(cb) {\n      log(`Deleting Team ${this.__teamId}`);\n      return this._request204or404(`/teams/${this.__teamId}`, undefined, cb, 'DELETE');\n   }\n}\n\nmodule.exports = Team;\n","/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('github:user');\n\n/**\n * A User allows scoping of API requests to a particular Github user.\n */\nclass User extends Requestable {\n   /**\n    * Create a User.\n    * @param {string} [username] - the user to use for user-scoped queries\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(username, auth, apiBase) {\n      super(auth, apiBase);\n      this.__user = username;\n   }\n\n   /**\n    * Get the url for the request. (dependent on if we're requesting for the authenticated user or not)\n    * @private\n    * @param {string} endpoint - the endpoint being requested\n    * @return {string} - the resolved endpoint\n    */\n   __getScopedUrl(endpoint) {\n      if (this.__user) {\n         return endpoint ?\n            `/users/${this.__user}/${endpoint}` :\n            `/users/${this.__user}`\n            ;\n\n      } else { // eslint-disable-line\n         switch (endpoint) {\n            case '':\n               return '/user';\n\n            case 'notifications':\n            case 'gists':\n               return `/${endpoint}`;\n\n            default:\n               return `/user/${endpoint}`;\n         }\n      }\n   }\n\n   /**\n    * List the user's repositories\n    * @see https://developer.github.com/v3/repos/#list-user-repositories\n    * @param {Object} [options={}] - any options to refine the search\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   listRepos(options, cb) {\n      if (typeof options === 'function') {\n         cb = options;\n         options = {};\n      }\n\n      options = this._getOptionsWithDefaults(options);\n\n      log(`Fetching repositories with options: ${JSON.stringify(options)}`);\n      return this._requestAllPages(this.__getScopedUrl('repos'), options, cb);\n   }\n\n   /**\n    * List the orgs that the user belongs to\n    * @see https://developer.github.com/v3/orgs/#list-user-organizations\n    * @param {Requestable.callback} [cb] - will receive the list of organizations\n    * @return {Promise} - the promise for the http request\n    */\n   listOrgs(cb) {\n      return this._request('GET', this.__getScopedUrl('orgs'), null, cb);\n   }\n\n   /**\n    * List the user's gists\n    * @see https://developer.github.com/v3/gists/#list-a-users-gists\n    * @param {Requestable.callback} [cb] - will receive the list of gists\n    * @return {Promise} - the promise for the http request\n    */\n   listGists(cb) {\n      return this._request('GET', this.__getScopedUrl('gists'), null, cb);\n   }\n\n   /**\n    * List the user's notifications\n    * @see https://developer.github.com/v3/activity/notifications/#list-your-notifications\n    * @param {Object} [options={}] - any options to refine the search\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   listNotifications(options, cb) {\n      options = options || {};\n      if (typeof options === 'function') {\n         cb = options;\n         options = {};\n      }\n\n      options.since = this._dateToISO(options.since);\n      options.before = this._dateToISO(options.before);\n\n      return this._request('GET', this.__getScopedUrl('notifications'), options, cb);\n   }\n\n   /**\n    * Show the user's profile\n    * @see https://developer.github.com/v3/users/#get-a-single-user\n    * @param {Requestable.callback} [cb] - will receive the user's information\n    * @return {Promise} - the promise for the http request\n    */\n   getProfile(cb) {\n      return this._request('GET', this.__getScopedUrl(''), null, cb);\n   }\n\n   /**\n    * Gets the list of starred repositories for the user\n    * @see https://developer.github.com/v3/activity/starring/#list-repositories-being-starred\n    * @param {Requestable.callback} [cb] - will receive the list of starred repositories\n    * @return {Promise} - the promise for the http request\n    */\n   listStarredRepos(cb) {\n      let requestOptions = this._getOptionsWithDefaults();\n      return this._requestAllPages(this.__getScopedUrl('starred'), requestOptions, cb);\n   }\n\n   /**\n    * Have the authenticated user follow this user\n    * @see https://developer.github.com/v3/users/followers/#follow-a-user\n    * @param {string} username - the user to follow\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\n    * @return {Promise} - the promise for the http request\n    */\n   follow(username, cb) {\n      return this._request('PUT', `/user/following/${this.__user}`, null, cb);\n   }\n\n   /**\n    * Have the currently authenticated user unfollow this user\n    * @see https://developer.github.com/v3/users/followers/#follow-a-user\n    * @param {string} username - the user to unfollow\n    * @param {Requestable.callback} [cb] - receives true if the request succeeds\n    * @return {Promise} - the promise for the http request\n    */\n   unfollow(username, cb) {\n      return this._request('DELETE', `/user/following/${this.__user}`, null, cb);\n   }\n\n   /**\n    * Create a new repository for the currently authenticated user\n    * @see https://developer.github.com/v3/repos/#create\n    * @param {object} options - the repository definition\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   createRepo(options, cb) {\n      return this._request('POST', '/user/repos', options, cb);\n   }\n}\n\nmodule.exports = User;\n"],"sourceRoot":"/source/"}