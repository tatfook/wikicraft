<?npl --[[
Title: website renewal model
Author: wuxiangan
Date: 2016/11/14
]]

include_once("./abstract/base.page")
include_once("./user.page")
include_once("./user_trends.page")
include_once("./website.page")

local website_member = inherit(models.abstract.base, gettable("models.website_member"))
website_member.db_name = "website_member"

function website_member:ctor()
	-- (websiteId, username) key
	self:addfield("websiteId","number")    -- 站点ID
	self:addfield("websiteType", "string") -- 站点类型
	self:addfield("username", "string")    -- 成员名
	self:addfield("portrait", "string")    -- 成员logo
	self:addfield("sex", "string")         -- 性别
	self:addfield("realname", "string")    -- 姓名
	self:addfield("email", "string")       -- 邮箱
	self:addfield("QQId", "string")        -- QQ号
	self:addfield("cellphoneId", "string") -- 手机号
	self:addfield("identifyCardId", "string") -- 身份证号
	self:addfield("roleName", "string")    -- 角色
	self:addfield("desc", "string")        -- 角色
	self:addfield("state", "string")       -- 角色
	self:addfield("level", "number")       -- 角色
	self:addfield("createDate", "string", false, 64)
	self:addfield("updateDate", "string", false, 64)
end

-- 通过websiteID删除
function website_member:api_deleteByWebsiteId(params) 
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.websiteId = tonumber(params.websiteId)
	self:db():delete({["+websiteId"]={params.websiteId}}, resume)
	
	return errors:wrap(yield())
end

function website_member:api_deleteMember(params) 
	local username = getUsername()
	if not params.username or not params.websiteId or username ~= params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():delete({
		websiteId=params.websiteId,
		username=params.username,
	}, resume);

	return errors:wrap(yield());
end

-- 删除记录
function website_member:api_deleteById(params)
	local username = getUsername()
	if not params._id or not username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({_id=tonumber(params._id)}, resume)
	local _, data = yield()
	if not data  or data.username ~= username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():delete({_id=params._id}, resume)
	
	return errors:wrap(yield())
end

-- 创建记录
function website_member:api_upsert(params)
	local username = getUsername()
	if username ~= params.username or (not params.websiteId) or (not params.username) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.level = params.level or 0
	params.state = params.state or const.WEBSITE_MEMBER_STATE_NORMAL
	params.updateDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")
	params.createDate = params.createDate or params.updateDate

	self:db():insertOne({["+websiteId+username"]={params.websiteId, params.username}}, params, resume)

	return errors:wrap(yield())
end

-- 提交成员申请
function website_member:api_submitMemberApply(params)
	params.state = const.WEBSITE_MEMBER_STATE_APPLY
	params.roleName = const.WEBSITE_USER_ROLE_VISITOR
	return self:api_upsert(params)
end

-- 同意申请
function website_member:api_agreeMemberApply(params)
	self:db():insertOne({["+websiteId+username"]={params.websiteId, params.username}}, {
		state = const.WEBSITE_MEMBER_STATE_NORMAL,
		roleName = const.WEBSITE_USER_ROLE_NORMAL,
		level = const.RECORD_LEVEL_LOW,
	}, resume)
	return errors:wrap(yield())
end

-- 添加成员
function website_member:api_create(params) 
	if (not params.websiteId) or (not params.userId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.createDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")

	self:api_upsert(params)

	local websiteDB = models.website:new()
	local site = websiteDB:api_getById({websiteId=params.websiteId}).data
	if not site then
		return errors:wrap(errors.SERVER_INNER_ERROR)
	end

	if site.userId == params.userId then
		return errors:wrap()
	end

	local userTrendsDB = models.user_trends:new()
	local trends = {
		userId=params.userId,
		websiteId=params.websiteId,
		otherUserId=site.userId,
		trendsType=const.USER_TRENDS_TYPE_ORGANIZATION,
		desc="你已加入组织:" .. site.name
	}
	userTrendsDB:api_upsert(trends)
	
	local userDB = models.user:new()
	local userinfo = userDB:api_getById({userId=params.userId}).data
	if not userinfo then
		return errors:wrap()
	end
	trends.userId = site.userId
	trends.otherUserId = params.userId
	trends.desc = userinfo.username .. "加入你的组织:" .. site.name
	userTrendsDB:api_upsert(trends)

	return errors:wrap()
end

-- 设定为管理员
function website_member:api_setManager(params)
	if not params._id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():updateOne({_id=params._id}, {level=const.RECORD_LEVEL_MIDDLE, roleName=const.WEBSITE_USER_ROLE_MANAGER}, resume)

	return errors:wrap(yield())
end

-- 解除管理员
function website_member:api_unsetManager(params)
	if not params._id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():updateOne({_id=params._id}, {level=const.RECORD_LEVEL_LOW, roleName=const.WEBSITE_USER_ROLE_NORMAL}, resume)

	return errors:wrap(yield())
end

-- 获得站点成员申请列表
function website_member:api_getApplyByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR, nil)
	end

	params.websiteId = tonumber(params.websiteId)
	local query = {["+websiteId+state"]={params.websiteId, const.WEBSITE_MEMBER_STATE_APPLY}}
	local total = self:api_getCount(query).data

	local skip, limit = util:pagination(params)
	query = {["+websiteId+state"]={params.websiteId, const.WEBSITE_MEMBER_STATE_APPLY, skip=skip, limit=limit}}
	local memberList = self:api_get(query).data

	return errors:wrap(err, {total=total, memberList=memberList})		
end

-- 获得站点成员列表
function website_member:api_getByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR, nil)
	end

	params.websiteId = tonumber(params.websiteId)
	local query = {["+websiteId+state"]={params.websiteId, const.WEBSITE_MEMBER_STATE_NORMAL}}
	local total = self:api_getCount(query).data

	local skip, limit = util:pagination(params)
	query = {["+websiteId+state-level"]={params.websiteId, const.WEBSITE_MEMBER_STATE_NORMAL, gt=0, skip=skip, limit=limit}}
	local memberList = self:api_get(query).data

	return errors:wrap(err, {total=total, memberList=memberList})		
end

-- 获得数量
function website_member:api_getCount(query)
	self:db():count(query, resume)
    local _, data = yield()

	return errors:wrap(nil, data or 0)
end

-- 获得列表
function website_member:api_get(query)
	self:db():find(query, resume)
	local _, data = yield()

	return errors:wrap(nil, data)
end

-- 获得站点全部成员数量
function website_member:api_getCountByWebsiteId(params) 
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():count({["+websiteId+state"] = {params.websiteId, const.WEBSITE_MEMBER_STATE_NORMAL}}, resume)

	return errors:wrap(yield())
end

-- 获取单个成员信息
function website_member:api_getBySiteUsername(params)
	if (not params.websiteId) or (not params.username) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.websiteId = tonumber(params.websiteId)
	self:db():findOne({["+websiteId+username"]={params.websiteId, params.username}}, resume)
	
	return errors:wrap(yield())
end

-- 获得评委成员信息
function website_member:api_getJudgeListByWebsiteId(params)
	params.role = const.WEBSITE_USER_ROLE_JUDGE
	local query = {["+websiteId+roleName"]={params.websiteId, const.WEBSITE_USER_ROLE_JUDGE}}
	local total = self:api_getCount(query).data
	
	local skip, limit = util:pagination(params)
	query = {["+websiteId+roleName"]={params.websiteId, const.WEBSITE_USER_ROLE_JUDGE, skip=skip, limit=limit}}
	local userList = self:api_get(query).data

	return errors:wrap(nil, {total=total, pageCount=util:getPageCount(total,limit), userList=userList})
end

-- 获得用户加入的站点列表
function website_member:api_getWebsiteListByUsername(params)
	local skip, limit = util:pagination(params)
	
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():count({["+userId+state"]={params.username, const.WEBSITE_MEMBER_STATE_NORMAL}}, resume)
	local err, total = yield()

	self:db():find({["+userId+state"]={params.username, const.WEBSITE_MEMBER_STATE_NORMAL, skip=skip, limit=limit}}, resume)
	local err, data = yield()
	
	local websiteDB = models.website:new()
	for _, value in ipairs(data or {}) do
		value["siteinfo"] = websiteDB:api_getById({websiteId=value.websiteId}).data
	end
	
	return errors:wrap(nil,{total=total, siteList=data})
end

-- 获取用户加入的组织列表
function website_member:api_getOrganizationListByUsername(params)
	local skip, limit = util:pagination(params)
	
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():count({["+username+state+websiteType"]=params.username, const.WEBSITE_MEMBER_STATE_NORMAL, const.WEBSITE_TYPE_ORGANIZATION}, resume)
	local _, total = yield()

	self:db():find({["+username+state+websiteType"]={params.username, const.WEBSITE_MEMBER_STATE_NORMAL, const.WEBSITE_TYPE_ORGANIZATION, skip=skip, limit=limit}}, resume)
	local err, data = yield()
	
	local websiteDB = models.website:new()
	for _, value in ipairs(data or {}) do
		value["siteinfo"] = websiteDB:api_getById({websiteId=value.websiteId}).data
	end
	
	return errors:wrap(nil,{total=total, siteList=data})
end





















