<?npl
--[[
Title: oauth app
Author: wuxiangan
Date: 2017/06/08
]]


include_once("./abstract/base.page")
include_once("./user.page")

local oauth_app = inherit(models.abstract.base, gettable("models.oauth_app"))
oauth_app.db_name = "oauth_app"

local ouath_clientld   = inherit(models.abstract.base, gettable("models.ouath_clientld"));
ouath_clientld.db_name = "ouath_clientld"

function oauth_app:ctor()
	self:addfield("appName"        , "string"); -- 应用名称  key
	self:addfield("company"        , "string"); -- 公司名
	self:addfield("clientId"       , "string"); -- oauth client id
	self:addfield("clientSecret"   , "string"); -- oauth client secret
	self:addfield("redirectUrl"    , "string"); -- oauth redirect url
	self:addfield("skipUserGrant"  , "string"); -- 是否可以跳过用户授权
	self:addfield("payCallbackUrl" , "string"); -- 支付成功后，后台回掉地址
	self:addfield("autoAuthorize"  , "string"); -- 是否可以自动授权APP

	---------- following is query only, not saved to columns ----------------
	self:addfield("limit" , "number"); -- 限制查询条数
	self:addfield("skip"  , "number"); -- 跳过查询条数
end

function oauth_app:checkAdmin()
	response:status(503);
	local adminInfo = getTokenInfo();

	-- 判断是否为管理员
	if(not adminInfo or adminInfo.isAdmin ~= true) then
		return false;
	else
		return true;
	end
end

function oauth_app:get(params) -- /api/wiki/models/oauth_app/ POST
	if(not self:checkAdmin()) then
		return errors:wrap(errors.FORBIDDEN_ACCESS);
	end

	local err, query = self:validateQuery(params);

	if(not query.limit or not query.skip) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end
	
	self:db():find({["-createDate"] = {gt=-1, limit = query.limit, skip = query.skip}},resume);
	local err, data = yield();

	if(not err) then
		response:status(200);
		return errors:wrap(nil, data);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
end

function oauth_app:api_getOne(params) -- /api/wiki/models/oauth_app/getOne POST
	self:ensureAuthenticated();

	local err, query = self:validateQuery(params);

	if(not query.clientId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end

	self:db():findOne({clientId = query.clientId}, resume);
	local err, data = yield();

	if(not err) then
		response:status(200);
		return errors:wrap(nil, data);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
end

function oauth_app:api_count() -- /api/wiki/models/oauth_app/count GET
	if(not self:checkAdmin()) then
		return errors:wrap(errors.FORBIDDEN_ACCESS);
	end

	self:db():find({}, resume);

	local err, data = yield();

	if(not err) then
		response:status(200);
		return errors:wrap(nil, #data);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
end

function oauth_app:create(params) -- /api/wiki/models/oauth_app/new POST
	if(not self:checkAdmin()) then
		return errors:wrap(errors.FORBIDDEN_ACCESS);
	end

	local err, query = self:validateQuery(params);

	if(not query or not next(query)) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end

	if(not query.appName or not query.company or not query.clientSecret) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end
	
	local ret1 = '%d'
	local ret2 = '%p'
	local ret3 = '%s'
	
	local reg1 = '^%a+$'
	local reg2 = '[\176-\254]'
	local reg3 = '^(http://)[%w_]+%.%w+.+$'
	local reg4 = '^(https://)[%w_]+%.%w+.+$'
	local reg5 = '^(ftp://)[%w_]+%.%w+.+$'

	--判断appName是否为中文/英文
	if(not string.find(query.appName,reg1)) then
		if(not string.find(query.appName,reg2))then
			if(not string.find(query.appName, ret1)) then
				return errors:wrap(errors.REQUEST_PARAMS_ERROR);
			end
		end
	end

	--判断appName是否为中文/英文
	if(not string.find(query.appName,reg1)) then
		if(not string.find(query.appName,reg2))then
			if(not string.find(query.appName, ret1)) then
				return errors:wrap(errors.REQUEST_PARAMS_ERROR);
			end
		end
	end
	
	--判断company格式是否正确/只能输入英文/中文/中英结合
	if(string.find(query.company, reg2) or string.find(query.company,reg1))then
		if(string.find(query.company, ret1) or string.find(query.company, ret2) or string.find(query.company, ret3))then
			return errors:wrap(errors.REQUEST_PARAMS_ERROR);
		end
	else
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end
	
	--判断redirectUrl格式是否正确
	if(query.redirectUrl ~= nil)then
		if(not string.find(query.redirectUrl, reg3))then
			if(not string.find(query.redirectUrl, reg4))then
				if(not string.find(query.redirectUrl, reg5))then
					return errors:wrap(errors.REQUEST_PARAMS_ERROR);
				end
			end
		end
	end
	--判断payCallbackUrl格式是否正确
	if(query.payCallbackUrl ~= nil)then
		if(not string.find(query.payCallbackUrl, reg3))then
			if(not string.find(query.payCallbackUrl, reg4))then
				if(not string.find(query.payCallbackUrl, reg5))then
					return errors:wrap(errors.REQUEST_PARAMS_ERROR);
				end
			end
		end
	end
	-- 判断是否存在appName
	self:db():findOne({appName = query.appName}, resume);
	local err, data = yield();
	
	if(err) then
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end

	if(data) then
		return errors:wrap(errors.RECORD_ALREADY_EXIST);
	end
	
	self:db():insertOne(
	{
		appName        = query.appName,
		company        = query.company,
		clientId       = ouath_clientld:getClientld(),
		clientSecret   = query.clientSecret,
		skipUserGrant  = query.skipUserGrant,
		redirectUrl    = query.redirectUrl,
		payCallbackUrl = query.payCallbackUrl,
		createDate     = self:getNow(),
	}, resume);
	local err, data = yield();

	if(not err and data) then
		response:status(200);
		return errors:wrap(errors.SUCCESS);
	end

	return errors:wrap(errors.SERVER_INNER_ERROR);
end

function oauth_app:update(params) -- /api/wiki/models/oauth_app/ PUT
	if(not self:checkAdmin()) then
		return errors:wrap(errors.FORBIDDEN_ACCESS);
	end

	local err, query = self:validateQuery(params);

	if(not query or not next(query)) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end

	if(not query.clientId or not query.clientSecret) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end
	
	local ret1 = '%d'
	local ret2 = '%p'
	local ret3 = '%s'
	
	local reg1 = '^%a+$'
	local reg2 = '[\176-\254]'
	local reg3 = '^(http://)[%w_]+%.%w+.+$'
	local reg4 = '^(https://)[%w_]+%.%w+.+$'
	local reg5 = '^(ftp://)[%w_]+%.%w+.+$'

	--判断appName是否为中文/英文
	if(not string.find(query.appName,reg1)) then
		if(not string.find(query.appName,reg2))then
			return errors:wrap(errors.REQUEST_PARAMS_ERROR);
		end
	end
	
	--判断company格式是否正确/只能输入英文/中文/中英结合
	if(string.find(query.company, reg2) or string.find(query.company,reg1))then
		if(string.find(query.company, ret1) or string.find(query.company, ret2) or string.find(query.company, ret3))then
			return errors:wrap(errors.REQUEST_PARAMS_ERROR);
		end
	else
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end

	-- 判断是否存在clientId
	self:db():findOne({clientId = query.clientId}, resume);
	local err, data = yield();

	if(err) then
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end

	if(not data) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end

	local updateParams = {
		clientSecret   = query.clientSecret,
		redirectUrl    = query.redirectUrl,
		payCallbackUrl = query.payCallbackUrl, 
		skipUserGrant  = query.skipUserGrant,
		createDate     = self:getNow();
	}

	self:db():updateOne({clientId = query.clientId}, updateParams, resume);
	local err, data = yield();

	if(not err and data) then
		response:status(200);
		return errors:wrap(errors.SUCCESS);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
end

function oauth_app:delete(params)
	if(not self:checkAdmin()) then
		return errors:wrap(errors.FORBIDDEN_ACCESS);
	end

	local err, query = self:validateQuery(params);
	
	-- 判断是否存在clientId
	self:db():findOne({clientId = query.clientId}, resume);
	local err, data = yield();

	if(err) then
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end

	if(not data) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end

	self:db():deleteOne({clientId = query.clientId}, resume);
	local err, data = yield();

	if(not err) then
		response:status(200);
		return errors:wrap(errors.SUCCESS);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
end

function oauth_app:getByAppName(appName)
	if(not appName) then
		return false;
	end

	self:db():findOne({appName = appName}, resume);
	local err, data = yield();

	if(not err) then
		return data;
	else
		return false;
	end
end

-- 通过客户端id获取
function oauth_app:api_getByClientId(params)
	self:ensureAuthenticated();

	local data = self:api_getOne(params);
	
	if(data and data.data and data.data.clientSecret) then
		data.data.clientSecret = nil;
	end

	return data;
end

-- 同意客户端授权
function oauth_app:api_agreeOauth(params)
	self:ensureAuthenticated();

	local tokeninfo = getTokenInfo();

	if (tokeninfo.username ~= params.username) or (not params.username) or (not params.client_id) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local oauthCode = nil;

	while (true) do
		oauthCode = tostring(math.random(1000000,9999999));

		local key = params.client_id .. "_" .. oauthCode;

		if not mem_cache:get(key) then
			mem_cache:set(key, params.username);
			break;
		end
	end

	return errors:wrap(nil,{code=oauthCode, state=params.state})
end

-- 通过code获取token
function oauth_app:api_getTokenByCode(params)
	response:status(503);

	if not params.code or (not params.client_id) or (not params.client_secret) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({clientId = params.client_id}, resume);
	local err, app = yield();

	if(not app) then
		return errors.NOT_FOUND;
	end

	if app.clientSecret ~= params.client_secret then
		return {error = 10000, message="secret invalid"};
	end

	local key           = params.client_id .. "_" .. params.code;
	local oauthUsername = mem_cache:get(key);

	if not oauthUsername then
		return {error=10001, message="authorized code invalid"};
	end

	if params.username and oauthUsername ~= params.username then
		return {error=10003, message="username error"};
	end

	local userDB = models.user:new();
	userDB:db():findOne({["+username"]={oauthUsername}}, resume)
	local _, userinfo = yield()

	if not userinfo then
		return {error=10002, message="server inner errror"};
	end

	local secret = KEEPWORK["config"][CURRENT_ENV]["wiki"]["secret"]
	local token = jwt.encode({authway="oauth", username=userinfo.username},secret["token_secret"], nil, secret["token_expire"] or 3600)

	response:status(200);
	return {token=token};
end

-- client callback
function oauth_app:api_callback(params)
	if true then
		return
	end

	if (not params.code) or (not params.clientId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.client_id = params.clientId
	params.grant_type = "authorization_code"
	params.client_secret = "keepwork"

	local apiUrl = "http://localhost:8900/api/wiki/models/oauth_app/getTokenByCode"

	System.os.GetUrl({
		url    = apiUrl,
		method = "GET",
		json   = true,
		qs     = params,
	}, resume)

	local code, data = yield()

	if code ~= 200 then
		return {message="authorized server error"}
	end

	local tokenData = data.data

	return tokenData
end

function oauth_app:getNow()
	return ParaGlobal.GetDateFormat("yyyy-MM-dd") .. " " .. ParaGlobal.GetTimeFormat("HH:mm:ss");
end

-- 生成Clientld

function ouath_clientld:getClientld()
	self:db():insertOne({},resume);
	local err, id = yield();
	
	local sn = "1";
	
	id  = tostring(id._id);
	a = 6 - #id;

	for i = 1, a do 
		id = "0" .. id;
		i = i + 1;
	end

	return sn .. id
end
















