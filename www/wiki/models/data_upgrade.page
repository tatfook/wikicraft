<?npl
--[[
Title: site data source
Author: wuxiangan
Date: 2017/06/06
]]


include_once("./abstract/base.page")
include_once("./user.page")
include_once("./user_three_service.page")
include_once("./website.page")
include_once("./site_data_source.page")
include_once("./group.page")
include_once("./site_group.page")
include_once("./site_user.page")

local data_upgrade = inherit(models.abstract.base, gettable("models.data_upgrade"))


-- 兼容就旧版本数据源代码
function data_upgrade:api_updateUserDataSource(user)
	local userDB = models.user:new()
	local siteDataSourceDB = models.site_data_source:new()
	local dataSourceDB = models.data_source:new()

	local siteDataSource = siteDataSourceDB:api_getDefaultSiteDataSource({username=user.username}).data
	
	if not siteDataSource then
		LOG.std(nil, "error", "keepwork", "get site data souce failed")
		return	
	end

	local defaultDataSourceId = siteDataSource._id
	self:db():updateOne({_id=user._id}, {dataSourceId=defaultDataSourceId}, resume)
	yield()

	local websiteDB = models.website:new()
	local allSiteList = websiteDB:api_getAllByUsername({username=user.username}).data
	for _, site in ipairs(allSiteList or {}) do
		websiteDB:db():updateOne({_id=site._id}, {_unset={"dataSourceId"}}, resume)
		yield()		
	end

	return
end

-- 数据源升级
function data_upgrade:api_dataSourceUpgrade() 
	local userDB = models.user:new()
	local siteDataSourceDB = models.site_data_source:new()
	local dataSourceDB = models.data_source:new()

	siteDataSourceDB:db():makeEmpty({}, resume)
	yield()

	dataSourceDB:db():makeEmpty({}, resume)
	yield()

	userDB:db():find({_id={gt=0}}, resume)
	local _, userList = yield()

	for _, user in ipairs(userList or {}) do
		self:api_updateUserDataSource(user)			
	end
end

-- dataSourceId => dataSourceName
function data_upgrade:api_dataSourceIdToName(params) 
    local siteDataSourceDB = models.site_data_source:new() 
    siteDataSourceDB:db():find({_id={gt=0, limit=100000}}, resume)
    local _, siteDataSourceList = yield() 
    for _, siteDataSource in ipairs(siteDataSourceList or {}) do
        if (not siteDataSource.dataSourceName) then
            siteDataSourceDB:db():updateOne({_id=siteDataSource._id},{dataSourceName=const.DEFAULT_DATA_SOURCE_NAME}, resume)
            yield()            
        end
    end
end

-- 重置用户密码
function data_upgrade:api_resetPassword(params)
    if not params.username or (not params.password) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end 
            
    local password = ParaMisc.md5(params.password or "") 
    local userDB = models.user:new()

    userDB:db():updateOne({["+username"]={params.username}}, {password=password}, resume)

    return errors:wrap(yield())
end

-- 更新用户第三方服务表
function data_upgrade:api_userIdToUsername(params)
	if not params.tableName then
		return {message="参数错误"}
	end

	local userDB = models.user:new()
	local tableDB = models[params.tableName]:new()
	
	tableDB:db():find({_id={gt=0, limit=100000}}, resume)
	local _, list = yield()

	for _, obj in ipairs(list or {}) do
		if obj.userId then
			userDB:db():findOne({_id=obj.userId}, resume)
			local _, user = yield()

			if user then
				tableDB:db():updateOne({_id=obj._id}, {username=user.username}, resume)
				yield()
			end
		end
	end
end


-- 删除无效站点数据源
function data_upgrade:api_fixInvalidSiteDataSource() 
    local siteDataSourceDB = models.site_data_source:new()

    siteDataSourceDB:db():find({_id={gt=0, limit=100000}}, resume)  
    local _, list = yield()
    local startTime = os.time()
    for _, obj in ipairs(list or {}) do
        if not obj.projectName or obj.projectName == "" then
            siteDataSourceDB:db():updateOne({_id=obj._id}, {projectName="keepworkdatasource"}, resume)
            yield()
        end 
    end 
end


function data_upgrade:api_fixGroup()
	local limit = 100000
	local groupDB = models.group:new()
	groupDB:db():find({_id={gt=0,limit=limit}}, resume)
	local _, groupList = yield()
	for _,obj in ipairs(groupList or {}) do
		obj.dataSourceGroupId = obj.dataSourceUserId
		groupDB:db():updateOne({_id=obj._id}, obj, resume)
		yield()
	end

	local siteGroupDB = models.site_group:new()
	siteGroupDB:db():find({_id={gt=0, limit=limit}}, resume)
	local _, siteGroupList = yield()

	for _, obj in ipairs(siteGroupList or {}) do
		obj.groupUsername = obj.username
		siteGroupDB:db():updateOne({_id=obj._id}, obj, resume)
		yield()
	end

	local siteUserDB = models.site_user:new()
	siteUserDB:db():find({_id={gt=0, limit=limit}}, resume)
	local _, siteUserList = yield()

	for _, obj in ipairs(siteUserList or {}) do
		obj.groupUsername = obj.username
		siteUserDB:db():updateOne({_id=obj._id}, obj, resume)
		yield()
	end
end




