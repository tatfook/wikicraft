<?npl
--[[
Title: skills of users
Author: ZhengJiabiao
Date: 2018/1
Desc: skills in profiles,only to be used in backend data analyse.
]]
include_once("./abstract/base.page")
include_once("./elasticsearch.page")
include_once("./user.page")

local skills = inherit(models.abstract.base, gettable("models.skills"))
skills.db_name = "skills"

local es = models.elasticsearch:new()
es:connect()

function skills:ctor()
    self:addfield("title", "string", false, 30)
    self:addfield("username", "string", false, 30)
    self:addfield("level", "number", false, 1)
    self:addfield("likedCount", "number", false)
end


-- 验证需要字段是否存在
function skills:required_fields_validator(params, required_fields)
    local params_error = false

    for i, field_name in ipairs(required_fields) do
        if (not params[field_name]) then
            params_error = true
            break
        end
    end

    return params_error
end

function skills:fields_length_validator(params, fields_length)
    local params_error = false

    for field_name, length in pairs(fields_length) do
        if (#params[field_name] > length) then
            params_error = true
            break
        end
    end

    return params_error
end


function skills:api_insert(params)
    -- ensureAuthenticated()
    local skill, params_error = self:insert_validator(params)

    if (params_error) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    self:db():insertOne({["+username+title"] = {skill.username, skill.title}}, skill, resume)
    local err, result = yield()

    if result then
        params.id = result._id
        self:insert_to_es(params)
    end

    return errors:wrap(err, result)
end

function skills:insert_validator(params)
    local clean_data = {}
    local required_fields = {"username", "title", "level", "works"}
    local params_error = self:required_fields_validator(params, required_fields)

    if (not params_error) then
        local fields_length = {username=30,title=30}
        params_error = self:fields_length_validator(params, fields_length)
    end

    if (not params_error) then
        params.level = tonumber(params.level)
        if (params.level < 0) or (params.level > 5) then
            params_error = true
        end
    end

    -- 查询用户是否存在
    if (not params_error) then
        local User = models.user:new()
        -- User:db():findOne({username=params.username}, resume)
        User:db():findOne({["+username"]={params.username}}, resume)
        local _, exist_user = yield()

        if (not exist_user) then
            params_error = true
        end
    end

    -- 只提取需要的参数
    if (not params_error) then
        clean_data = {
            title = params.title,
            username = params.username,
            level = params.level,
            likedCount = 0
        }
    end

    return clean_data, params_error
end


function skills:api_update(params)
    -- ensureAuthenticated()
    local skill, params_error = self:update_validator(params)

    if (params_error) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    self:db():updateOne({["+username+title"]={skill.username, skill.title}}, {level=skill.level}, resume)
    local err, result = yield()

    if (result) and (params.works) then
        params.id = result._id
        self:update_to_es(params)
    end

    return errors:wrap(err, result)
end

function skills:update_validator(params)
    local clean_data = {}
    local required_fields = {"username", "title"}
    local params_error = self:required_fields_validator(params, required_fields)

    if (not params_error) then
        params.level = tonumber(params.level)
        if (params.level > 5) or (params.level < 0) then
            params_error = true
        end
    end

    if (not params_error) then
        clean_data = {
            title = params.title,
            username = params.username,
            level = params.level,
        }
    end

    return clean_data, params_error
end


function skills:api_updateLikedCount(params)
    -- ensureAuthenticated()
    local skill, params_error = self:update_likedCount_validator(params)

    if (params_error) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    self:db():updateOne({["+username+title"] = {skill.username, skill.title}}, {likedCount=skill.likedCount}, resume)
    return errors:wrap(yield())
end

function skills:update_likedCount_validator(params)
    local clean_data = {}
    local required_fields = {"username", "title", "likedCount"}
    local params_error = self:required_fields_validator(params, required_fields)

    if (not params_error) then
        params.likedCount = tonumber(params.likedCount)
        if (params.likedCount < 0) then
            params_error = true
        end
    end

    if (not params_error) then
        clean_data = {
            title = params.title,
            username = params.username,
            likedCount = params.likedCount
        }
    end

    return clean_data, params_error
end


function skills:api_like(params)
    params.mode = 1
    return self:like_or_dislike(params)
end

function skills:api_dislike(params)
    params.mode = 0
    return self:like_or_dislike(params)
end

function skills:like_or_dislike(params)
    -- ensureAuthenticated()
    local required_fields = {"username", "title", "mode"}  -- mode 1 - like     0 - dislike
    local params_error = self:required_fields_validator(params, required_fields)
    if (params_error) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    -- todo 优化写冲突问题,防止丢失操作
    self:db():findOne({["+username+title"] = {params.username, params.title}}, resume)
    local err, skill = yield()

    if skill then
        local likedCount = skill.likedCount or 0

        if (params.mode == 1) then
            likedCount = likedCount + 1
        elseif (params.mode == 0) then
            likedCount = likedCount - 1
            if (likedCount < 0) then
                return errors:wrap(errors.REQUEST_PARAMS_ERROR)
            end
        end

        self:db():updateOne({["+username+title"] = {skill.username, skill.title}}, {likedCount=likedCount}, resume)
        return errors:wrap(yield())
    end

    return errors:wrap(err, skill)
end


function skills:api_getByUsername(params)
    local required_fields = {"username"}
    local params_error = self:required_fields_validator(params, required_fields)
    if params_error then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    self:db():find({["+username"] = {params.username}},resume)
    return errors:wrap(yield())
end


-- 通过username + title删除
function skills:api_delete(params)
    -- ensureAuthenticated()
    local required_fields = {"username", "title"}
    local params_error = self:required_fields_validator(params, required_fields)

    if (params_error) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    self:db():findOne({["+username+title"]={params.username, params.title}}, resume)
    local _, skill = yield()

    if (skill) then
        self:db():deleteOne({_id=skill._id}, resume)
        local err, result = yield()

        params.id = skill._id
        self:delete_in_es(params)

        return errors:wrap(err, result)
    end

    return errors:wrap(nil)
end


function skills:insert_to_es(params)
    local skill = {
        type = "skill",
        id = params.id,
        username = params.username,
        title = params.title,
        works = params.works
    }

    return es:insertOne(skill)
end


function skills:update_to_es(params)
    local skill = {
        type = "skill",
        id = params.id,
        works = params.works
    }

    return es:updateOne(skill)
end


function skills:delete_in_es(params)
    local skill = {
        type = "skill",
        id = params.id,
    }

    return es:deleteOne(skill)
end

-- function skills:api_test()
--     local params = {
--         username = "user1",
--         title = "npl",
--         level = 1,
--         works = {"www.baidu.com","qq.com","163.com","weibo.com"}
--     }
--     return self:api_insert(params)
-- end