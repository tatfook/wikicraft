<?npl
--[[
Title: administrator
Author: wuxiangan
Date: 2016/10/21
]]

include_once("./user.page")
include_once("./website.page")
include_once("./user_log.page")

local admin = inherit(models.abstract.base, gettable("models.admin"))
admin.db_name = "admin"

-- 登录
function admin:api_login(params)
	if (not params.username) or (not params.password) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.password = ParaMisc.md5(params.password or "")

	local userDB = models.user:new()
	userDB:db():findOne({["+username+password"] = {params.username, params.password}}, resume)

	local _, userinfo = yield()

	if not userinfo then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	--if userinfo.username == "lizq123" then
		--userDB:db():updateOne({["+username"]={params.username}}, {roleId=const.USER_ROLE_MANAGER}, resume)
		--yield()
		--userinfo.roleId = const.USER_ROLE_ADMINISTRATOR
	--end

	if userinfo.roleId ~= const.USER_ROLE_MANAGER and userinfo.roleId ~= const.USER_ROLE_ADMINISTRATOR then
		return errors:wrap(errors:new("用户不是管理员"))
	end

	return errors:wrap(nil,{token=encodeJWT({userId=userinfo._id, username=userinfo.username, roleId=userinfo.roleId, isAdmin=true}), userinfo=userinfo})
end

-- 管理员认证
function admin:adminAuth()
	local token = getTokenInfo()
	if (not token) or (token.roleId ~= const.USER_ROLE_MANAGER and token.roleId ~= const.USER_ROLE_ADMINISTRATOR) then
		response:status(401):send({ message = "无权限访问"})
		exit()
	end

	return token
end

-- 获取用户列表
function admin:api_getUserList(params)
	self:adminAuth()

	local skip, limit = util:pagination(params)

	local userDB = models.user:new()
	userDB:db():count({}, resume)
	local _, total = yield()

	userDB:db():find({_id={gt=-1, skip=skip, limit=limit}}, resume)
	local _, userList = yield()

	return errors:wrap(nil, {total=total, userList = userList})
end

-- 获取管理员列表
function admin:api_getManagerList(params)
	self:adminAuth()

	local skip, limit = util:pagination(params)

	local userDB = models.user:new()
	userDB:db():count({["+roleId"] = {const.USER_ROLE_ADMINISTRATOR}}, resume)
	local _, total = yield()

	userDB:db():find({["+roleId"] = {const.USER_ROLE_ADMINISTRATOR}}, resume)
	local _, managerList = yield()

	return errors:wrap(nil, {total = total, managerList = managerList})
end

function admin:api_managerSearch(params)
	self:adminAuth()

	local _id = params._id or nil 
	local username = params.username 
	
	local userDB = models.user:new()
	--userDB:db():count({["+roleId+_id"] = {const.USER_ROLE_ADMINISTRATOR,1}}, resume)
	--local _, total = yield()
	local total = 0;
	
	if username ~= "" and _id == nil then 
		userDB:db():find({["+roleId+username"] = {const.USER_ROLE_ADMINISTRATOR,username}}, resume)
	end
	if _id ~= "" and username == "" then 
		userDB:db():find({["+roleId+_id"] = {const.USER_ROLE_ADMINISTRATOR,_id}}, resume)
	end 
	if username ~= "" and _id ~= nil then 
		userDB:db():find({["+roleId+_id+username"] = {const.USER_ROLE_ADMINISTRATOR,_id,username}}, resume)
	end 
	
	--userDB:db():find({roleId = const.USER_ROLE_ADMINISTRATOR}, resume)
	--userDB:db():find({{roleId = const.USER_ROLE_ADMINISTRATOR},{_id={gt=-1, skip=skip, limit=limit}}}, resume)
	local _, searchManagerList = yield()

	return errors:wrap(nil, {total = total, searchManagerList = searchManagerList})
end

function admin:api_newManager(params)
	self:adminAuth()
	
	
end

-- 获取站点列表
function admin:api_getSiteList(params)
	self:adminAuth()
	local skip, limit = util:pagination(params)

	local websiteDB = models.website:new()
	websiteDB:db():count({}, resume)
	local _, total = yield()

	websiteDB:db():find({_id={gt=-1, skip=skip, limit=limit}}, resume)
	local _, siteList = yield()

	return errors:wrap(nil, {total=total, siteList = siteList})
end

function admin:api_test()
	return errors:wrap(nil, {total="total", siteList = "siteList"})
end 

-- 获取域名列表
function admin:api_getDomainList(params)
	self:adminAuth()
	local skip, limit = util:pagination(params)
	local domainDB = models.website_domain:new()
	domainDB:db():count({}, resume)
	local _,total = yield()
	
	domainDB:db():find({_id={gt=-1, skip=skip, limit=limit}}, resume)
	local _, domainList = yield()
	
	return errors:wrap(nil, {total=total, domainList = domainList})
end

-- 获取vip列表
function admin:api_getVIPList(params)
	self:adminAuth()
	local skip, limit = util:pagination(params)
	local VIPDB = models.vip:new()
	VIPDB:db():count({}, resume)
	local _,total = yield()
	
	VIPDB:db():find({_id={gt=-1, skip=skip, limit=limit}}, resume)
	--VIPDB:db():find({}, resume)
	local _, VIPList = yield()
	
	return errors:wrap(nil, {total=total, VIPList = VIPList})
end

function admin:api_getUserLogList(params)
	self:adminAuth()
	local skip, limit = util:pagination(params)
	local userLogDB = models.user_log:new()
	
	--local createAt = ParaGlobal.GetDateFormat("yyyy-MM-dd") .. " " .. ParaGlobal.GetTimeFormat("HH:mm:ss")
	--userLogDB:db():insertOne(nil, {createAt=createAt, userid=1, username="lizq", userip="0.0.0.0", operation="add", description="init", targetType="user_log", targetId=0}, resume)
	
	userLogDB:db():count({}, resume)
	local _,total = yield()
	
	userLogDB:db():find({_id={gt=-1, skip=skip, limit=limit}}, resume)
	local _, userLogList = yield()
	
	return errors:wrap(nil, {total=total, userLogList = userLogList})
end 

function admin:api_insertUserLog(params)
	local createAt = ParaGlobal.GetDateFormat("yyyy-MM-dd") .. " " .. ParaGlobal.GetTimeFormat("HH:mm:ss")
	local userip = getpeername() or "0.0.0.0"
	if params.username ~= nil and params.operation ~= nil and params.description ~= nil then
		local userLogDB = models.user_log:new()
		userLogDB:db():insertOne(nil, {createAt=createAt, username=params.username, userip=userip, operation=params.operation, description=params.description, targetType=params.targetType, targetId=params.targetId}, resume)
		local _, insertedLog = yield()
		return errors:wrap(nil, {insertedLog = insertedLog})
	else 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
end

-- 获取操作日志列表
--[[
function admin:api_getVIPList(params)
	self:adminAuth()
	local skip, limit = util:pagination(params)
	local VIPDB = models.vip:new()
	VIPDB:db():count({}, resume)
	local _,total = yield()
	
	VIPDB:db():find({_id={gt=-1, skip=skip, limit=limit}}, resume)
	--VIPDB:db():find({}, resume)
	local _, VIPList = yield()
	
	return errors:wrap(nil, {total=total, VIPList = VIPList})
end

]]






















