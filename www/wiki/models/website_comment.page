<?npl
--[[
Title: comment of page
Author: wuxiangan
Date: 2016/12/06
]]

NPL.load("(gl)script/ide/DateTime.lua")
local timehelp = commonlib.timehelp

include_once("./abstract/base.page");
include_once("./user.page");

local website_comment=inherit(models.abstract.base, gettable("models.website_comment"))
website_comment.db_name = "website_comment"

function website_comment:ctor()
	self:addfield("url", "string")           -- 页面ID
	self:addfield("websiteId", "number")        -- 站点ID
	self:addfield("userId", "number")           -- 评论者ID
	--self:addfield("username", "string")         -- 评论者名字  名字和头像加入此表避免联表查询
	--self:addfield("userPortrait", "string")     -- 评论者的头像
	self:addfield("content", "string")          -- 评论内容

	self:addfield("createTime", "string")
	self:addfield("updateTime", "string")
end


function website_comment:getCountByUrl(params)
	if not params.url then
		return 0
	end

	self:db():count({["+url"]={params.url}}, resume)
	local err, count = yield()

	return count or 0
end

-- 创建一条评论
function website_comment:api_create(params)
	if (not params.url) or (not params.userId) or (not params.websiteId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR) 
	end

	local date, time = timehelp.GetLocalTime()
	params.createTime = date .. " " .. time
	params.updateTime = params.createTime

	self:db():insertOne(nil, params, resume)
	
	return errors:wrap(yield())
end

-- 通过页面ID获得评论列表
function website_comment:api_getByPageUrl(params)
	if not params.url then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	-- 获得评论数量
	local query = {["+url"]={params.url}}
	self:db():count(query,resume)
	local err, total = yield()
	
	if err then 
		return errors:wrap(err)
	end

	total = total or 0
	
	-- 获得评论内容
	local skip, limit = util:pagination(params)
	query = {["+url-createTime"]={params.url, skip=skip, limit=limit}}	
	self:db():find(query, resume)
	local err, data = yield()
	if err or (not data) then
		return errors:wrap(err or errors.NOT_FOUND)
	end
	-- TODO 联表查用户信息
	local userDB = models.user:new()
	for _, obj in pairs(data or {}) do
		obj.userInfo = userDB:api_getById({userId=obj.userId}).data	
	end

	return errors:wrap(nil, {total=total, pageCount=util:getPageCount(total,limit), commentList=data})
end

-- 通过评论过ID删除一条评论
function website_comment:api_deleteById(params)
	if not params._id then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():deleteOne({_id=params._id}, resume)
	
	return errors:wrap(yield())	
end

-- 删除页面所有评论
function website_comment:api_deleteByUrl(params)
	if not params.url then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():delete({["+url"]={params.url}}, resume)
	
	return errors:wrap(yield())
end


