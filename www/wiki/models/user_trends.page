<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2017/03/15
]]
include_once("./abstract/base.page")
include_once("./website.page")
include_once("./user_favorite.page")
include_once("./user.page")

-- 暂时不用
local user_trends = inherit(models.abstract.base, gettable("models.user_trends"))

user_trends.db_name = "user_trends";


function user_trends:ctor() 
	self:addfield("userId", "number")          -- 用户ID
	self:addfield("objectId","number")         -- 对象ID -- 站点id 用户id 作品id等
	self:addfield("trendsType", "number")      -- 动态类型
	self:addfield("desc", "string")            -- 描述
	self:addfield("updateDate", "string")      -- 更新日期  -- 根据日期统计数量
end

-- 创建或更新动态
function user_trends:api_upsert(params)
	if (not params.userId) or (not params.objectId) or (not params.trendsType) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	params.updateDate = ParaGlobal.GetDateFormat("yyyy-MM-dd") .. "  " ..  ParaGlobal.GetTimeFormat("HH:mm:ss")
	
	if params.desc then
		user_log(params.desc)
	end
	-- self:db():insertOne({["+userId+objectId+trendsType"]={params.userId, params.objectId,params.trendsType}}, params, resume)
	self:db():insertOne(nil, params, resume)
	
	return errors:wrap(yield())
end

-- 获取用户动态
function user_trends:api_get(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local skip, limit = util:pagination(params)	
	-- 获取组织动态
	self:db():count({['+userId-updateDate']={params.userId}}, resume)
	local err, total = yield()
	total = total or 0

	self:db():find({['+userId-updateDate']={params.userId, skip=skip, limit=limit}}, resume)
	local err, trendsList = yield()
	
	return errors:wrap(nil, {total = total, trendsList=trendsList})	
end

-- 删除动态
function user_trends:api_delete(params)
	if not params.trendsId then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():deleteOne({["_id"]={params.trendsId}}, resume)	
	
	return errors:wrap(yield())
end































