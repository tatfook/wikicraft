<?npl
--[[
Title: website of a user
Author: wuxiangan
Date: 2016/10/10
]]
include_once("./abstract/base.page")
include_once("./user.page")
include_once("./vip.page")
include_once("./user_active.page")
include_once("./user_favorite.page")
include_once("./user_visit_history.page")
include_once("./website_pages.page")
include_once("./website_page.page")
include_once("./website_pageinfo.page")
include_once("./website_member.page")
include_once("./website_apply.page")
include_once("./website_renewal.page")
include_once("./sitepage_renewal.page")
include_once("./website_works.page")
include_once("./website_template_style.page")
include_once("./website_template_config.page")
include_once("./website_domain.page")
include_once("./site_data_source.page")
include_once("./site_group.page")
include_once("./pages.page")
include_once("./elasticsearch.page")
include_once("./validators.page")

NPL.load("(gl)script/ide/math/bit.lua")

local website = inherit(models.abstract.base, gettable("models.website"))

website.db_name = "website"
-- max items per user
-- website.max_items_per_user = 10

local es = models.elasticsearch:new()
local index = CURRENT_ENV .. "_kw_websites"
es:connect({index=index})


function website:ctor()
	self:addfield("name", "string", false, 30)
	self:addfield("sitename", "string", false, 30)
	self:addfield("isolateDataSource", "number") -- 1 独立数据源 0 - 默认数据源
	self:addfield("type", "string", false, 30)
	self:addfield("displayName", "string", false, 30)
	self:addfield("userId", "number", false)
	self:addfield("username", "string", false)
	self:addfield("desc", "string", false, 240)
	self:addfield("domain", "string", false, 30)
	self:addfield("url","string", true, 100)
	self:addfield("tags","string", false, 300)
	self:addfield("logoUrl", "string", false, 120)
	self:addfield("categoryId","number", false, nil, 1)
	self:addfield("categoryName","string", false, 32)
	self:addfield("templateId","number", false, nil, 1)
	self:addfield("templateName","string", false, 32)
	self:addfield("styleId","number", false, nil, 1)
	self:addfield("styleName","string", false, 32)
	self:addfield("keywords", "string", false, 100)
	self:addfield("teamwork", "string", false, 100)
	self:addfield("store", "string", false, 200)
	self:addfield("fork", "string", false, 200)
	self:addfield("createDate", "string", false, 64)
	self:addfield("updateDate", "string", false, 64)
	self:addfield("visibility", "string") -- private 私有  public 共有
	self:addfield("private", "number")	
	self:addfield("visitCount", "number")
	self:addfield("favoriteCount", "number")
	self:addfield("pageCount", "number")
	self:addfield("memberCount", "number")
	self:addfield("worksCount", "number")
	self:addfield("state", "number")
	self:addfield("sensitiveWordLevel", "number")
	self:addfield("isTop", "boolean")  -- 是否置顶
	self:addfield("toppedTime", "string")  -- 置顶时间
end

-- 创建站点 paracraft 客户端有使用 以后可能废弃  
function website:api_create(params) 
	if (not params.userId) or (not params.username) or (not params.name) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.favoriteCount = 0
	params.visitCount = 0
	params.createDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")


	self:db():insertOne({["+username+name"]={params.username, params.name}}, params, resume)
	local err, site = yield()
	self:insert_to_es(site)

	return errors:wrap(err, site)
end

function website:api_createSite(params)
	local username = getUsername()

	if not params.sitename or not params.username or params.username ~= username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local isOk = sensitiveWordFilter({sitename=params.sitename, displayName=params.displayName, desc=params.desc, tags=params.tags})
	if not isOk then
		return errors:wrap("含有非法字符")
	end

	local userDB = models.user:new()
	userDB:db():findOne({["+username"]={params.username}}, resume)
	local _, userinfo = yield()
	if not userinfo then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)

	end

	self:db():findOne({["+username+name"]={params.username, params.sitename}}, resume)
	local _, site = yield()
	if site then
		return errors:wrap("站点已存在")
	end

	params.name = params.sitename
	params.isolateDataSource = params.isolateDataSource or 1
	params.favoriteCount = 0
	params.visitCount = 0
	params.createDate = params.createDate or ParaGlobal.GetDateFormat("yyyy-MM-dd")
	params.updateDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")

	self:db():insertOne({["+username+name"] = {params.username, params.name}}, params, resume)
	local _, site = yield()
	if not site then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:insert_to_es(site)

	local siteDataSourceDB = models.site_data_source:new()
	siteDataSourceDB:api_createSiteDataSource({username=site.username, sitename=site.sitename, visibility=site.visibility, dataSourceName=userinfo.defaultDataSourceName, isolateDataSource=params.isolateDataSource})
	local dataSource = siteDataSourceDB:api_getSiteDataSource({username=site.username, sitename=site.name}).data

	return errors:wrap(nil, {siteinfo=site, dataSource=dataSource})
end

-- 创建站点
function website:api_upsert(params) 
	ensureAuthenticated()
	if (not params.username) or (not params.name) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	if #params.name > 30 then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local isOk = sensitiveWordFilter({sitename=params.sitename, displayName=params.displayName, desc=params.desc, tags=params.tags})
	if not isOk then
		return errors:wrap("含有非法字符")
	end

	local userDB = models.user:new()
	userDB:db():findOne({["+username"]={params.username}}, resume)
	local _, userinfo = yield()

	if not userinfo then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.isolateDataSource = params.isolateDataSource or 1
	params.favoriteCount = 0
	params.visitCount = 0
	params.createDate = params.createDate or ParaGlobal.GetDateFormat("yyyy-MM-dd")
	params.updateDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")
	params.sitename = params.name

	self:db():insertOne({["+username+name"] = {params.username, params.name}}, params, resume)
	local _, site = yield()

	if not site then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:insert_to_es(site)

	local projectName = nil
	if params.isolateDataSource == 0 then
		projectName = const.DEFAULT_DATA_SOURCE_PROJECT_NAME
	end
	local siteDataSourceDB = models.site_data_source:new()
	siteDataSourceDB:api_createSiteDataSource({username=site.username, sitename=site.name, visibility=site.visibility, dataSourceName=userinfo.defaultDataSourceName, projectName=projectName, isolateDataSource=params.isolateDataSource})
	site.dataSource = siteDataSourceDB:api_getSiteDataSource({username=site.username, sitename=site.name}).data
	-- LOG.std(nil, "error", "keepwork", site.dataSource)

	-- 设置站点管理员
	local websiteMemberDB = models.website_member:new()
	websiteMemberDB:api_upsert({websiteId=site._id, websiteType=site.type, username=site.username, roleName=const.WEBSITE_USER_ROLE_ADMIN, level=const.RECORD_LEVEL_HIGH})
		
	-- 用户动态
	local userTrendsDB = models.user_trends:new()
	local trend = {userId=site.userId, objectId=site._id, trendsType=const.USER_TRENDS_TYPE_CREATE_SITE}
	trend.desc = site.username .. "创建站点" .. site.name
	userTrendsDB:api_upsert(trend)
	
	--user_log(trend.desc)
	return errors:wrap(nil, site)
end

-- 设置网站私有行性
function website:api_setVisibility(params)
	if (not params.username) or (not params.sitename) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.visibility = params.visibility or "public"

	local siteDataSourceDB = models.site_data_source:new()
	siteDataSourceDB:db():updateOne({["+username+sitename"]={params.username, params.sitename}}, {visibility=params.visibility}, resume)	
	yield()

	local pages = models.pages:new()
	pages:update_visibility_to_es(params)

	self:db():updateOne({["+username+name"]={params.username, params.sitename}}, {visibility=params.visibility}, resume)
	return errors:wrap(yield())
end

-- 删除一个站点
function website:deleteById(websiteId)
	local site = self:api_getById({websiteId=websiteId}).data
	if not site then
		return errors:wrap(nil)
	end

	self:delete_in_es(site)

	--user_log("删除站点:" .. site.sitename)

	local tokeninfo = getTokenInfo()	
	if (site.username ~= tokeninfo.username) and (not tokeninfo.isAdmin) then
		return errors:wrap(nil)
	end
	local userTrendsDB = models.user_trends:new()
	local trend = {userId=site.userId, objectId=site._id, trendsType=const.USER_TRENDS_TYPE_DELETE_SITE}
	trend.desc = site.username .. "删除站点" .. site.name
	userTrendsDB:api_upsert(trend)

	-- 删除更新表中该站点数据
	local websiteRenewalModel =	models.website_renewal:new()
	websiteRenewalModel:api_deleteByWebsiteId({websiteId=websiteId})
	websiteRenewalModel:api_deleteByWorksId({worksId=websiteId})

	-- 删除该站点内所有作品
	local websiteWorksModel = models.website_works:new()
	websiteWorksModel:api_deleteByWebsiteId({websiteId=websiteId})
	
	-- 删除该站点内所有成员
	local websiteMemberModel = models.website_member:new()
	websiteMemberModel:api_deleteByWebsiteId({websiteId=websiteId})

	-- 删除该站点内所有申请
	local websiteApplyModel = models.website_apply:new()
	websiteApplyModel:api_deleteByWebsiteId({websiteId=websiteId})

	-- 删除页信息
	--local websitePageinfoDB = models.website_pageinfo:new()
	--websitePageinfoDB:api_delete({sitename=site.name, userId=site.userId})
	local pages = models.pages:new()
	pages:delete_website({username=site.username, sitename=site.name})

	-- 删除该站点的所有域名
	local websiteDomainDB = models.website_domain:new()
	websiteDomainDB:api_deleteByName({username=site.username, sitename=site.name})

	-- 删除组信息1
	local siteGroupDB = models.site_group:new()
	siteGroupDB:api_deleteBySitename({username=site.username, sitename=site.name})

	-- 删除数据源记录
	local siteDataSourceDB = models.site_data_source:new()
	siteDataSourceDB:api_deleteByName({username=site.username, sitename=site.name})

	-- 删除站点
	self:db():deleteOne({_id=websiteId}, resume)
	return errors:wrap(yield())
end

-- 删除一个站点 outer api
function website:api_deleteById(params)
	local userId = self:ensureAuthenticated()
	
	local websiteId = tonumber(params.websiteId) 

	if not params.websiteId or (not websiteId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
		
	self:deleteById(websiteId)
	return errors:wrap(nil)
end

-- 删除用户的所有站点
function website:deleteUserWebsite(userId)
	local data = self:api_getAllByUserId({userId=userId}).data
	
	if not data then 
		return 
	end

	for _, obj in pairs(data or {}) do
		self:deleteById(obj._id)
	end
	
	return nil
end

-- 更新站点页面信息
function website:api_updateWebsitePageinfo(params)
	if (not params.username) or (not params.sitename) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local site = self:api_getByName({sitename=params.sitename, username=params.username}).data
	if not site then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	-- 更新活动计数
	local userActiveDB = models.user_active:new()
	userActiveDB:api_addActiveCount(params)
	
	-- 更新表
	local sitepageRenewalDB = models.sitepage_renewal:new()
	sitepageRenewalDB:api_upsert({username=params.username, sitename=params.sitename, pagename=params.pagename,url=params.url})

	-- 更新用户动态
	--local userTrendsDB = models.user_trends:new()
	--local trend = {userId=params.userId, objectId=params.siteId, trendsType=const.USER_TRENDS_TYPE_UPDATE_SITE}
	--trend.desc = site.username .. "更新站点" .. site.name
	--userTrendsDB:api_upsert(trend)
	
	return errors:wrap()
end

-- 更新站点
function website:api_updateByName(params) 
	self:ensureAuthenticated()
	if (not params.username) or (not params.sitename) then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	local tokeninfo = getTokenInfo()
	if (tokeninfo.username ~= params.username) and (not tokeninfo.isAdmin) then
		return errors:wrap(errors.NOT_PRIVILEGES)
	end

	user_log("用户" .. params.username .. "更新站点" .. params.sitename .. "信息")
	self:db():findOne({["+username+name"]={params.username, params.sitename}}, resume)
	local _, siteinfo = yield()
	if not siteinfo then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	local sensitiveWordLevel = siteinfo.sensitiveWordLevel or 0

	local isOk = sensitiveWordFilter({sitename=params.sitename, displayName=params.displayName, desc=params.desc, tags=params.tags})
	if not isOk and not mathlib.bit.band(const.SENSITIVE_WORD_SITE) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local sitename = params.sitename
	--params.sitename = nil   -- 防止名字被改
	params.name = nil   -- 防止名字被改
	params.updateDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")

	self:db():updateOne({["+username+name"]={params.username, sitename}}, params, resume)
	local err, site = yield()
	self:update_to_es(site)

	return errors:wrap(err, site)
end

-- 获得用户的网站数量
function website:api_getCountByUserId(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():count({["+userId"]={params.userId}}, resume)
	
	return errors:wrap(yield())
end

-- 获取用户站点列表 
function website:api_getByUserId(params) 
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local total = self:api_getCountByUserId(params).data
	if not total then
		return errors:wrap(errors.NOT_FOUND)
	end

	local skip, limit = util:pagination(params)
	self:db():find({["+userId"]={params.userId,skip=skip, limit=limit}}, resume)
	local err, data = yield()

	if err or (not data) then
		return errors:wrap(err or errors.NOT_FOUND)
	end

	return errors:wrap(nil, {total=total, pageCount=util:getPageCount(total, limit), siteList=data})
end

-- 获得用户站点列表  TODO:用户建站数量做限制，故暂不分页
function website:api_getAllByUserId(params) 
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():find({["+userId"]=params.userId}, resume)
	
	return errors:wrap(yield())
end

-- 通过用户名获取所有站点
function website:api_getAllByUsername(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local userDB = models.user:new()
	if userDB:is_locked({username = params.username}) then
		errors:raise(403, "该帐号已被封禁")
	end

	self:db():find({["+username"]={params.username, limit=1000}}, resume)
	local err, sites = yield()

	local pages = models.pages:new()
	local finished_count = 0
	local url = ""
	for i, site in ipairs(sites or {}) do
		site.isTop = site.isTop or false  -- 是否置顶
		-- 设置网站tags为index的tags
		url = format("/%s", site.username or "")
		if (site.sitename) then url = format("%s/%s/index", url, site.sitename) end
		pages:db():findOne({url = url},
			function (err, page)
				page = page or {}
				site.tags = page.tags or {}
				finished_count = finished_count + 1
				if (finished_count == #sites) then resume() end
			end
		)
		if (i == #sites) then yield() end
	end
	return errors:wrap(err, sites)
end

-- 通过站点名获得站点
function website:api_getByName(params)
	if (not params.sitename) or (not params.username) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR, nil)
	end

	self:db():findOne({['+username+name']={params.username, params.sitename}}, resume)
	
	return errors:wrap(yield())		
end

-- 通过站点ID获得站点
function website:api_getById(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR, nil)
	end

	self:db():findOne({_id=params.websiteId}, resume)

	return errors:wrap(yield())
end

-- 更新访问计数
function website:api_updateVisitNum(params)
	if (not params.username) or (not params.sitename) then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({["+username+name"]={params.username, params.sitename}}, resume)
	local err, site = yield()
	if not site then
		return errors:wrap(errors.NOT_FOUND)
	end

	site.visitCount = (site.visitCount or 0) + 1
	self:db():updateOne({_id=site._id}, site, resume)
		
	return errors:wrap(yield())	
end

-- 更新收藏数量
function website:api_updateFavoriteNumById(params)
	if not params.websiteId then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({_id=params.websiteId}, resume)
	local err, site = yield()
	if not site then
		return errors:wrap(errors.NOT_FOUND)
	end

	site.favoriteCount = (site.favoriteCount or 0) + (params.count or 1)
	self:db():updateOne({_id=site._id}, site, resume)
		
	return errors:wrap(yield())	
end

-- 获得建站历史
function website:api_getHistoryListByUserId(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	local skip, limit = util:pagination(params)	
	self:db():find({["+userId-createDate"]={params.userId, skip=skip, limit=limit}}, resume)
	return errors:wrap(yield())
end

-- 获得站点数量
function website:api_getCount(params)
	self:db():count({}, resume)
	
	return errors:wrap(yield())
end

-- 获得收藏数量排序的网站列表
function website:api_getFavoriteSortList(params)
	local skip, limit = util:pagination(params)	
	
	local count = self:api_getCount().data
	self:db():find({["-favoriteCount"]={gt=-1, skip=skip, limit=limit}}, resume)
	local err, data = yield()

	if err then 
		return errors:wrap(err)
	end
	
	return errors:wrap(nil, {total=count, pageCount=util:getPageCount(count,limit), siteList=data})
end

-- 获得访问排序列表
function website:api_getVisitSortList(params)
	local skip, limit = util:pagination(params)	
	
	local count = self:api_getCount().data
	self:db():find({["-visitCount"]={gt=-1, skip=skip, limit=limit}}, resume)
	local err, data = yield()

	if err then 
		return errors:wrap(err)
	end
	
	return errors:wrap(nil, {total=count, pageCount=util:getPageCount(count,limit), siteList=data})
end

-- 获得网站统计信息
function website:api_getStatics(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local websiteMemberDB = models.website_member:new()
	local websiteWorksDB = models.website_works:new()

	-- 获得站点的收藏量
	local memberCount =  websiteMemberDB:api_getCountByWebsiteId({websiteId=params.websiteId}).data
	local worksCount =  websiteWorksDB:api_getCountByWebsiteId({websiteId=params.websiteId}).data
	
	return errors:wrap(nil, {userCount=memberCount, worksCount=worksCount})
end

-- 检查用户站点是否存在
function website:api_isExist(params)
	if (not params.sitename) or (not params.username) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({['+username+name']={params.username, params.sitename}}, resume)
	
	return errors:wrap(yield())
end 

-- 获得站点列表
function website:api_getSiteList(params)
	local skip, limit = util:pagination(params)	
	
	local key = '';
	local value = {};
	
	if params.sitename then
		key = key .. '+name'
		value[#value+1] = params.sitename
	end

	if params.username then
		key = key .. "+username"
		value[#value+1] = params.username
	end

	if params.sortBy then 
		key = key .. params.sortBy
		value['gt'] = -1
	end

	if key == '' then
		key = key .. '_id'
		value['gt'] = -1
	end

	self:db():count({[key]=value}, resume)
	local err, data = yield()
	
	if err then
		return errors:wrap(err)
	end
	local count = data or 0
	
	value["skip"] = skip
	value['limit'] = limit

	log({[key]=value})
	self:db():find({[key]=value}, resume)
	local err, data = yield()
	
	return errors:wrap(nil, {total=count, pageCount=util:getPageCount(count,limit), siteList=data})
end

-- 通过制定名获取站点列表
function website:api_getSiteListByName(params)
	local sitelist = {}

	for _, obj in ipairs(params.list or {}) do
		if obj.username and obj.sitename then
			self:db():findOne({["+username+name"]={obj.username, obj.sitename}}, resume)
			local _, site = yield()
			sitelist[#sitelist+1] = site
		end
	end

	return errors:wrap(nil, sitelist)
end

-- 访问站点
function website:api_visitWebsite(params)
	if (not params.username) or (not params.sitename) or not params.url then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local username = getUsername()

	if not username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	-- 增加站点访问量
	self:api_updateVisitNum({username=params.username, sitename=params.sitename})

	-- 增加网页访问量
	local pages = models.pages:new()
	pages:api_updateVisitCount({url = params.url})

	-- 添加访问记录
	local userVisitHistoryDB = models.user_visit_history:new()
	userVisitHistoryDB:api_upsert({username=username, visitUsername=params.username, visitSitename=params.sitename, url=params.url})
	
	-- 更新作品的访问记录数
	local websiteWorksModel = models.website_works:new()
	websiteWorksModel:api_updateVisitCount({websiteId = params.websiteId, worksUrl = params.url})

	return errors:wrap()
end

-- 获取站点详细信息, 
function website:api_getDetailInfo(params)
	if (not params.username) or (not params.sitename) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local userDB = models.user:new()
	local userinfo = userDB:db():findOne({["+username"] = {params.username}}, resume)
	local _, userinfo = yield()

	if not userinfo or userinfo.roleId == const.USER_ROLE_EXCEPTION then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	if userDB:is_locked({user = userinfo}) then
		errors:raise(403, "该帐号已被封禁")
	end

	--models.user:new():filterUserInfo(userinfo)
	userinfo.password = nil

	self:db():findOne({["+username+name"]={params.username, params.sitename}}, resume)
	local _, siteinfo = yield()
	
	if siteinfo and siteinfo.state == const.SITE_STATE_EXCEPTION then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local siteDataSourceDB = models.site_data_source:new()
	local siteDataSource = siteDataSourceDB:api_getSiteDataSource(params).data
	if siteDataSource then
		siteDataSourceDB:api_updateLastCommitId(siteDataSource)
	end
	local dataSourceList = siteDataSourceDB:api_getByUsername({username=userinfo.username}).data
	for key, value in ipairs(dataSourceList or {}) do
		dataSourceList[key].dataSourceToken = nil
	end
	userinfo.dataSource = dataSourceList

	if siteDataSource and siteDataSource.visibility == "private" then
		local vipDB = models.vip:new()
		if not vipDB:api_isValidVip({username=params.username}).data then
			return errors:wrap(errors.FORBIDDEN_ACCESS)
		end
	end

	if siteinfo then
		self:api_visitWebsite({
			username = params.username,
			sitename = params.sitename,
			url = params.url,
			websiteId = siteinfo._id,
		})
	end

	return errors:wrap(nil, {userinfo=userinfo, siteinfo=siteinfo})
end

-- 获取用户,站点信息
function website:api_getUserSiteInfo(params)
	if (not params.username) or (not params.sitename) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local userDB = models.user:new()
	userDB:db():findOne({["+username"]={params.username}}, resume)
	local _, userinfo = yield()
	
	if not userinfo then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({["+username+name"]={params.username, params.sitename}}, resume)
	local _, siteinfo = yield()
	
	if not siteinfo then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	return errors:wrap(nil,{userinfo=userinfo, siteinfo=siteinfo})
end

-- 获取站点及数据源通过站点名
function website:api_getWithDataSourceByName(params)
	-- log(params)
	if (not params.username) or (not params.sitename) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username+name"]={params.username, params.sitename}}, resume)
	local _, siteinfo = yield()
	-- log(siteinfo)

	if not siteinfo then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local siteDataSourceDB = models.site_data_source:new()
	siteinfo.dataSource = siteDataSourceDB:api_getSiteDataSource(params).data
	if siteinfo.dataSource then
		siteinfo.dataSource.dataSourceToken = nil	
	end

	return errors:wrap(nil, siteinfo)
end


function website:api_setTop(params)
	ensureAuthenticated()
	if (not params.username) or (not params.sitename) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username+name"] = {params.username, params.sitename}}, resume)
	local err, site = yield()
	if (not site) then
		local message = "website not exist"
		return response:status(404):send({error={message=message,status=404}})
	end

	if (not site.isTop) then
		self:db():count({username = params.username, isTop = true}, resume)
		local _, topped_sites_count = yield()
		if (topped_sites_count >= 5) then
			local message = "the count of topped website over limit "
			return response:status(404):send({error={message=message,status=404}})
		end
		local now = ParaGlobal.GetDateFormat("yyyy-MM-dd ") .. ParaGlobal.GetTimeFormat("H:mm:ss")
		self:db():updateOne({["+username+name"] = {params.username, params.sitename}},
			{isTop = true, toppedTime = now}, resume)
		err, site = yield()
		if (site) then site = {isTop = site.isTop} end
	else
		self:db():updateOne({["+username+name"] = {params.username, params.sitename}},
			{isTop = false}, resume)
		err, site = yield()
		if (site) then site = {isTop = site.isTop} end
	end

	return errors:wrap(err, site)
end


function website:insert_to_es(params)
	local website = {
		type = "websites",
		id = tonumber(params._id),
		username = params.username,
		sitename = params.sitename,
		url = params.url,
		desc = params.desc,
		logoUrl = params.logoUrl,
		display_name = params.displayName,
	}
	es:insertOne(website, function(err, data) end)
end


function website:update_to_es(params)
	local website = {
		type = "websites",
		id = tonumber(params._id),
		desc = params.desc,
		logoUrl = params.logoUrl,
		display_name = params.displayName,
	}
	es:updateOne(website, function(err, data) end)
end


function website:delete_in_es(params)
	local website = {
		type = "websites",
		id = tonumber(params._id),
	}
	es:deleteOne(website, function(err, data) end)
end


function website:api_search(params)
	local clean_params, is_params_error, message = self:search_validator(params)
	if (is_params_error) then
		return response:status(400):send({error={message=message,status=400}})
	end
	local err, search_result = es:search(clean_params)
	local rcode = search_result.rcode
	local wrapped_result = {}
	if (rcode == 200) then
		wrapped_result = self:wrap_search_result(search_result)
	else
		wrapped_result = search_result.data
	end
	return errors:wrap(err, wrapped_result)
end


function website:search_validator(params)
	local validators = models.validators:new()
	local clean_data = {}
	local required_fields = {"q"}
	local is_params_error, message = validators.required_fields_validator(params, required_fields)
	if (not is_params_error) then
		clean_data = {
			type = "websites",
			q = params.q,
			fields = {'sitename', 'display_name'},
			page = tonumber(params.page) or 1,
			size = tonumber(params.size) or 500,
			sort = params.sort,
			highlight = 0,
			fuzziness = "AUTO",
		}
		
		if (params.username) then
			clean_data.post_filter = {
				term = {
					username = params.username
				}
			}
		end
		
		if (clean_data.size > 500) then clean_data.size = 500 end
	end
	return clean_data, is_params_error, message
end


function website:wrap_search_result(result)
	local wrapped_result = {}
	local err, visitor_info
	local rcode = result.rcode

	wrapped_result = {
		timed_out = result.data.timed_out,
		took = result.data.took,
		total = result.data.hits.total,
		status = rcode
	}

	local hits = {}
	for i, hit in ipairs(result.data.hits.hits) do
		hit._source._id = tonumber(hit._id)
		hits[#hits + 1] = hit._source
	end

	local finished_count = 0
	for i, website in ipairs(hits) do
		self:db():findOne({_id = website._id},
			function(err, data)
				finished_count = finished_count + 1
				if (data) then 
					website.visitCount = data.visitCount
					website.favoriteCount = data.favoriteCount
				end
				if (finished_count == #hits) then resume() end
			end
		)
		website._id = nil
		if (i == #hits) then yield() end
	end

	wrapped_result.hits = hits
	return wrapped_result
end


function website:api_export() 
	local limit = 1000000
	local websiteDB = models.website:new()
	websiteDB:db():find({_id={gt=0, limit=limit}}, resume)
	local _, list = yield()

	return list;
end

function website:api_fixDisplayName(params)
	local errMsg = util:check_script_password(params)
	if errMsg then errors:raise(400, errMsg) end

	local limit = 10000000
	self:db():find({_id={gt=0, limit=limit}}, resume)
	local err, websites = yield()

	for i, website in ipairs(websites) do
		if website.name == 'paracraft' then
			self:db():updateOne({_id = website._id}, {
				displayName = website.name,
				sitename = website.name,
			}, resume)
			yield()
		end
	end

	return errors:wrap()
end
