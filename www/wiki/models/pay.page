<?npl
--[[
Title: pay model
Author: big
Date: 2017/7/7
]]

include_once("./abstract/multi_user_base.page");
include_once("./user.page");
include_once("./goods.page");
include_once("./oauth_app.page");
include_once("./wallet.page");

local pay        = inherit(models.abstract.multi_user_base,gettable("models.pay"));
local tradeno    = inherit(models.abstract.multi_user_base,gettable("models.tradeno"));

local goods      = models.goods:new();
local oauth_app  = models.oauth_app:new();
local wallet     = models.wallet:new();
local user       = models.user:new();

pay.db_name  = "pay";
pay.apiUrl   = "https://api.pingxx.com/v1/";

tradeno.db_name = "tradeno";
tradeno         = tradeno:new();

function pay:ctor()
	-- keepwork username
	self:addfield("username", "string",false);
	-- total money
	self:addfield("price", "number", false, 10);
	-- pay channel
	self:addfield("channel", "string", false, 50);
	-- order subject
	self:addfield("subject", "string", false, 100);
	-- order content
	self:addfield("body", "string", false, 300);
	-- pay status (InProgress,Finish,Fail)
	self:addfield("status", "string", false);
	-- trade number
	self:addfield("trade_no", "number", false);
	-- pay method (Spend,Recharge)
	self:addfield("method", "string", false);
	-- beneficiary
	self:addfield("app_name", "string", false);
	-- beneficiary goods id
	self:addfield("app_goods_id", "string", false);
	-- redirect url
	self:addfield("redirect", "string", false);
	-- pay or recharge date
	self:addfield("create_date", "string", false);
	-- additional fields
	self:addfield("additional", "table", false, 10000);

	-- from ping++
	-- 事件对象  id ，由 Ping++ 生成，28 位长度字符串
	self:addfield("id", "string", false);
	-- 值为 "event"
	self:addfield("event", "string", false);
	-- 事件是否发生在生产环境
	self:addfield("livemode", "string", false);
	-- 事件发生的时间
	self:addfield("created", "string", false);
	-- 推送未成功的 webhooks 数量
	self:addfield("pending_webhooks", "number", false);
	-- 事件类型，详见 事件类型
	self:addfield("type", "string", false);
	-- API Request ID。值 "null" 表示该事件不是由 API 请求触发的
	self:addfield("request", "string", false);
	-- 绑定在事件上的数据对象,具体参考下表  data 参数说明
	self:addfield("data", "table", false, 10000);
end

function pay:getPingxxToken()
	if(KEEPWORK and KEEPWORK.config and 
		KEEPWORK.config.default and KEEPWORK.config.default.threeService and
		KEEPWORK.config.default.threeService.pingxx and KEEPWORK.config.default.threeService.pingxx.appToken and
		KEEPWORK.config.default.threeService.pingxx.appId) then
	
		pay.appToken = KEEPWORK["config"]["default"]["threeService"]["pingxx"]["appToken"];
		pay.appId    = KEEPWORK["config"]["default"]["threeService"]["pingxx"]["appId"];
		
		return true;
	else
		log("pingxx token can not found!");
		return false;
	end
end

function pay:api_createCharge(params)
	response:status(503);

	if(not self:getPingxxToken()) then
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end

	local err, query = self:validateQuery(params);

	if(query.price > 200000) then
		local limitMessage = commonlib.copy(errors.SERVER_INNER_ERROR);
		limitMessage.extra = "充值金额不能大于20万元";

		return errors:wrap(limitMessage);
	end

	local appInfo = oauth_app:getByAppName(query.app_name);
	
	if(not appInfo) then
		response:status(404);
		return errors:wrap(errors.NOT_FOUND);
	end

	local appGoodsInfo = self:getGoodsInfo(query);

	if(not appGoodsInfo) then
		response:status(404);
		return errors:wrap(errors.NOT_FOUND);
	end
	
	if(query.app_name == 'KEEPWORK' and query.app_goods_id == 1) then
		if(self:getUsername()) then
			query.username = self:getUsername();
		else
			return errors:wrap(errors.SERVER_INNER_ERROR);
		end
	end

	if(not self:validate(appGoodsInfo, query)) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	end

	if(not query.username) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR);
	else
		user:db():findOne({["+username"]={query.username}}, resume);
		local _, userinfo  = yield();

		if(not userinfo) then
			return errors:wrap(errors.NOT_FOUND);
		end
	end

	local trade_no = tradeno:getTradeNo();

	if not trade_no then
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end

	local toFen = query.price * 100
	local url   = self.apiUrl .. "charges";

	local apiParams      = {};
	apiParams.order_no   = trade_no;
	apiParams.client_ip  = request:getpeername();
	apiParams.amount     = toFen;
	apiParams.channel    = query.channel;
	apiParams.subject    = appGoodsInfo.subject;
	apiParams.body       = appGoodsInfo.body;
	apiParams.currency   = "cny";
	apiParams.app        = {id = self.appId};

	if(apiParams.channel == "alipay_wap") then
		if(not query.redirect) then
			return errors:wrap(errors.REQUEST_PARAMS_ERROR);
		end

		apiParams.extra = {success_url = query.redirect};
	elseif(apiParams.channel == "wx_pub_qr") then
		apiParams.extra = {product_id = trade_no};
	end

	if(query.app_name == "魔法哈奇") then
		local additional = {}
		additional.url     = 'Pay';
		additional.gsid	   = tostring(query.app_goods_id);
		additional.count   = tostring(toFen/100 * 10);
		additional.money   = tostring(toFen);
		additional.method  = tostring(1);
		additional.orderno = tostring(trade_no);
		additional.from    = tostring(0);

		for key,item in pairs(additional or {}) do
			query.additional[key] = item;
		end
	elseif(query.app_name == "魔法哈奇2") then
		local additional = {}
		additional.url     = 'Pay';
		additional.gsid	   = tostring(query.app_goods_id);
		additional.count   = tostring(toFen/100 * 10);
		additional.money   = tostring(toFen);
		additional.method  = tostring(1);
		additional.orderno = tostring(trade_no);
		additional.from    = tostring(0);

		for key,item in pairs(additional or {}) do
			query.additional[key] = item;
		end
		
		query.additional.user_nid = tostring(query.additional.user_nid);
	end
	
	local chargeHeaders = {
		Authorization = "Bearer " .. self.appToken,
		["content-type"]  = "application/json",
	};
	
	local err, chargeObject = self:http("POST", url, apiParams, chargeHeaders);

	if(not chargeObject) then
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end

	local tradeInfo = {};
	tradeInfo.trade_no     = trade_no;
	tradeInfo.username     = query.username;
	tradeInfo.price        = toFen;
	tradeInfo.subject      = appGoodsInfo.subject;
	tradeInfo.body         = appGoodsInfo.body;
	tradeInfo.channel      = query.channel;
	tradeInfo.status       = "InProgress";
	tradeInfo.method       = "Recharge";
	tradeInfo.app_name     = query.app_name;
	tradeInfo.app_goods_id = query.app_goods_id; 
	tradeInfo.additional   = query.additional;
	tradeInfo.create_date  = self:getNow();

	self:db():insertOne(tradeInfo, resume);
	local err, _ = yield();

	if(not err) then
		response:status(200);
		return errors:wrap(nil, chargeObject);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end	
end

function pay:api_spend(params)
	local err, query = self:validateQuery(params);
	
	local bSuccess = self:spend(query, resume);

	if(bSuccess) then
		return errors:wrap(errors.SUCCESS);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
end

function pay:spend(spendInfo)
	local trade_no     = tradeno:getTradeNo();
	local appGoodsInfo = self:getGoodsInfo(spendInfo);

	if(not appGoodsInfo or not trade_no) then
		return false;
	end

	if(not spendInfo.username) then
		spendInfo.username = self:getUsername();
	end

	local bSuccess =  wallet:balance(spendInfo.price, spendInfo.username);

	if(not bSuccess) then
		return;
	end

	local tradeInfo = {};
	tradeInfo.trade_no     = trade_no;
	tradeInfo.username     = spendInfo.username;
	tradeInfo.price        = spendInfo.price;
	tradeInfo.subject      = appGoodsInfo.subject;
	tradeInfo.body         = appGoodsInfo.body;
	tradeInfo.channel      = "wallet";
	tradeInfo.status       = "Finish";
	tradeInfo.method       = "Spend";
	tradeInfo.app_name     = spendInfo.app_name;
	tradeInfo.app_goods_id = spendInfo.app_goods_id; 
	tradeInfo.additional   = spendInfo.additional;
	tradeInfo.create_date  = self:getNow();
	
	self:db():insertOne({trade_no = trade_no}, tradeInfo, resume);
	local err, response = yield();

	if not err and response ~= nil then
		return true;
	else
		return false;
	end
end

function pay:api_getTrade()
	local username = self:getUsername();

	if(not username) then
		return errors:wrap(errors.NOT_FOUND);
	end

	self:db():find({["+username-create_date"] = {username}}, resume);
	local err, response = yield();

	if not err then
		return errors:wrap(nil, response);
	else
		return errors:wrap(errors.SERVER_INNER_ERROR);
	end
end

function pay:api_getTradeOne(params)
	response:status(503);
	local err, query = self:validateQuery(params);

	if(not query.username or not query.trade_no) then
		return errors.wrap(errors.REQUEST_PARAMS_ERROR);
	end

	self:db():findOne({["+username+trade_no"] = {query.username, tostring(query.trade_no)}}, resume);
	local err, trade = yield();

	if not err and trade then
		response:status(200);
		return errors:wrap(nil, trade);
	else
		response:status(404);
		return errors:wrap(errors.NOT_FOUND);
	end
end

function pay:api_webhooks(params)
	response:status(503);
	local err, query = self:validateQuery(params);

	if(type(query) == "table" and query.type == "charge.succeeded") then
		local chargeInfo;

		if(query.data and query.data.object) then
			chargeInfo = query.data.object;
		else
			return errors:wrap(errors.REQUEST_PARAMS_ERROR);
		end

		if(chargeInfo.order_no) then
			self:db():findOne({trade_no = chargeInfo.order_no}, resume);
		else
			return errors:wrap(errors.REQUEST_PARAMS_ERROR);
		end

		local err, payInfo = yield();

		if not err and type(payInfo) == "table" and payInfo.status ~= "Finish" and payInfo.method == "Recharge" then
			-- 充值
			local bSuccess;

			if(payInfo.price and payInfo.username) then
				bSuccess = wallet:balance(payInfo.price, payInfo.username);
			else
				return errors:wrap(errors.SERVER_INNER_ERROR);
			end

			if(not bSuccess) then
				return errors:wrap(errors.SERVER_INNER_ERROR);
			end

			self:db():updateOne({trade_no = chargeInfo.order_no}, {status = "Finish"}, resume);
			local err, _ = yield();

			-- 消费
			local appInfo;

			if(payInfo.app_name and payInfo.additional) then
				appInfo = oauth_app:getByAppName(payInfo.app_name);

				if(type(appInfo) ~= "table" or not appInfo.payCallbackUrl) then
					return errors:wrap(errors.SERVER_INNER_ERROR);
				end
			else
				return errors:wrap(errors.SERVER_INNER_ERROR);
			end

			local url       = appInfo.payCallbackUrl;
			local apiParams = commonlib.copy(payInfo.additional);

			apiParams.price    = payInfo.price;
			apiParams.username = payInfo.username;

			url = url .. "?";

			for key,value in pairs(apiParams or {}) do
				url = url .. key .. "=" .. value .. "&";
			end

			url = string.sub(url, 1, -2);

			local err, data = self:http("GET", url, {});

			if(err == 200) then
				local spendInfo = payInfo;
				spendInfo.price = spendInfo.price * -1;

				local bSuccess = self:spend(spendInfo);

				if(bSuccess) then
					response:status(200);
					return errors.wrap(errors.SUCCESS);
				end
			end

			return errors:wrap(errors.SERVER_INNER_ERROR);
		else
			response:status(404);
			return errors:wrap(errors.NOT_FOUND);
		end
	end

	return errors:wrap(errors.SERVER_INNER_ERROR);
end

function pay:getGoodsInfo(query)
	if(not query.app_goods_id and not query.app_name) then
		return false;
	end

	local appGoodsInfo = goods:api_getAppGoodsInfo({app_goods_id = query.app_goods_id, app_name = query.app_name});

	if(appGoodsInfo.data) then
		return appGoodsInfo.data
	else
		return false;
	end
end

function pay:validate(appGoodsInfo, query)
	if(type(query.additional) ~= "table") then
		return false;
	end

	local validate = true;

	if(appGoodsInfo.additional_field and type(appGoodsInfo.additional_field) == "table") then
		for KeyA, itemA in ipairs(appGoodsInfo.additional_field or {}) do
			local checkField = true;
			local field      = itemA;

			if (field.required == 1) then
				checkField = false

				for KeyB, itemB in pairs(query.additional or {}) do
					if (field.name == KeyB) then
						checkField = true;
					end
				end
			end

			if (not checkField) then
				validate = false;
			end
		end
	end

	return validate;
end

function pay:http(method, url, params, headers)
	if(not headers) then
		headers = {};
	end

	System.os.GetUrl({
		url     = url,
		headers = headers,
		form    = params,
		method  = method,
		json    = true,
	},resume);

	return yield();
end

function pay:getNow()
	return ParaGlobal.GetDateFormat("yyyy-MM-dd") .. " " .. ParaGlobal.GetTimeFormat("HH:mm:ss");
end

function tradeno:getTradeNo()
	self:db():insertOne({},resume);
	local err, response = yield();

	return ParaGlobal.GetDateFormat("yyyyMMdd") .. response._id;
end
