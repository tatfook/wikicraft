<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2016/10/24
]]
include_once("./abstract/base.page")
include_once("./user.page")
include_once("./website.page")
include_once("./user_trends.page")

local user_favorite = inherit(models.abstract.base, gettable("models.user_favorite"))
user_favorite.db_name = "user_favorite";

-- key +userId+siteUserId+favoriteId
function user_favorite:ctor() 
	self:addfield("userId", "number", false)         -- 用户ID
	self:addfield("siteId", "number", false)         -- userId websiteId
	self:addfield("updateDate", "string", false)     -- 收藏日期
end

-- 创建用户收藏
function user_favorite:api_upsert(params)
	if (not params.userId) or (not params.siteId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
 
	self:db():insertOne({["+userId+siteId"]={params.userId, params.siteId}}, params, resume)
	
	return errors:wrap(yield())
end

-- 收藏作品
function user_favorite:api_favoriteSite(params)
	if (not params.userId) or (not params.siteId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	-- 是否已经收藏	
	self:db():findOne({["+userId+siteId"]={params.userId, params.siteId}}, resume)
	local _, data = yield()
	if data then
		return errors:wrap(nil, data)
	end
	-- 创建收藏记录
	params.updateDate = ParaGlobal.GetDateFormat("yyyy-MM-dd")
	self:api_upsert(params)
	
	local websiteDB = models.website:new()
	websiteDB:api_updateFavoriteNumById({websiteId=params.siteId})

	-- 增加收藏动态
	local userDB = models.user:new()
	local userinfo = userDB:api_getById({userId=params.userId}).data
	local siteinfo = websiteDB:api_getById({websiteId=params.siteId}).data
	if not userinfo or (not siteinfo) then
		return errors:wrap()
	end
	-- 创建收藏站点动态
	local userTrendsDB = models.user_trends:new()
	local trend = {userId=params.userId, objectId=params.siteId, trendsType=const.USER_TRENDS_TYPE_FAVORITE_SITE}
	trend.desc = userinfo.username .. "收藏站点" .. siteinfo.name
	userTrendsDB:api_upsert(trend)
	--[[
		-- 创建被收藏站点动态
		trend = {userId=siteinfo.userId, objectId=params.siteId, objectUserId=params.userId, trendsType=const.USER_TRENDS_TYPE_FAVORITE_SITE}
		trend.desc = siteinfo.name .. "被" .. userinfo.username .. "收藏"
		userTrendsDB:api_upsert(trend)
	]]

	return errors:wrap()
end

-- 取消收藏
function user_favorite:api_unfavoriteSite(params)
	if (not params.userId) or (not params.siteId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	-- 取消收藏
	self:db():deleteOne({["+userId+siteId"]={params.userId, params.siteId}}, resume)
	yield()

	local websiteDB = models.website:new()
	websiteDB:api_updateFavoriteNumById({websiteId=params.siteId, count = -1})
	
	-- 增加收藏动态
	local userDB = models.user:new()
	local userinfo = userDB:api_getById({userId=params.userId}).data
	local siteinfo = websiteDB:api_getById({websiteId=params.siteId}).data
	if not userinfo or (not siteinfo) then
		return errors:wrap()
	end
	-- 创建收藏站点动态
	local userTrendsDB = models.user_trends:new()
	local trend = {userId=params.userId, objectId=params.siteId, trendsType=const.USER_TRENDS_TYPE_FAVORITE_SITE}
	trend.desc = userinfo.username .. "取消收藏站点" .. siteinfo.name
	userTrendsDB:api_upsert(trend)
	--[[
		-- 创建被收藏站点动态
		trend = {userId=siteinfo.userId, objectId=params.siteId, objectUserId=params.userId, trendsType=const.USER_TRENDS_TYPE_FAVORITE_SITE}
		trend.desc = siteinfo.name .. "被" .. userinfo.username .. "取消收藏"
		userTrendsDB:api_upsert(trend)
	]]

	return errors:wrap()
end


-- 获得用户收藏量
function user_favorite:api_getCountByUserId(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():count({["+userId"]={params.userId}}, resume)
	
	return errors:wrap(yield())
end

-- 获得用户收藏的作品
function user_favorite:api_getByUserId(params) 
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local total = self:api_getCountByUserId(params).data
	local skip, limit = util:pagination(params)

	self:db():find({["+userId"]={params.userId, skip=skip, limit=limit}}, resume)
	local _, data = yield()

	local websiteDB = models.website:new()
	for _, value in pairs(data or {}) do
		value["siteinfo"] = websiteDB:api_getById({websiteId=value.siteId}).data
	end
	
	return errors:wrap(nil, {total=total, siteList=data})
end

-- 获得站点被收藏的数量
function user_favorite:api_getCountBySiteId(params)
	if not params.siteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():count({["+siteId"]={params.siteId}}, resume)
	return errors:wrap(yield())
end

-- 获取站点的收藏用户
function user_favorite:api_getBySiteId(params)
	if not params.siteId then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local skip, limit = util:pagination(params) 
	self:db():find({["+siteId"]={params.siteId, skip=skip, limit=limit}}, resume)
	local _, data = yield()

	local userDB = models.user:new()
	for _,value in pairs(data or {}) do
		value['userinfo'] = userDB:api_getById({userId=value.userId}).data
	end

	local total = self:api_getCountBySiteId(params).data

	return errors:wrap(nil, {total=total, userList=data})
end


-- 删除用户的收藏和被收藏
function user_favorite:api_deleteByUserId(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():delete({["+userId"]={params.userId}}, resume)
	local err, data = yield()
	
	return errors:wrap()
end
