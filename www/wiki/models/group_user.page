<?npl
--[[
Title: site data source
Author: wuxiangan
Date: 2017/06/08
]]


include_once("./abstract/base.page")
include_once("./group.page")
include_once("./site_group.page")
include_once("./site_user.page")

local group_user = inherit(models.abstract.base, gettable("models.group_user"))
group_user.db_name = "group_user"

function group_user:ctor()
	self:addfield("username", "string")            -- 用户名  组的所属者
	self:addfield("groupname", "string")           -- 组名 
	self:addfield("memberName", "string")          -- 成员名 
	self:addfield("level", "number")               -- 权限级别
end

-- 添加组成员
function group_user:api_upsert(params)
	if (not params.groupname) or (not params.username) or (not params.memberName) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local siteGroupDB = models.site_group:new()
	local data = siteGroupDB:api_getByUserGroupName({username=params.username, groupname=params.groupname, pageSize=const.MAX_SITE_NUM}).data.groupList

	local siteUserDB = models.site_user:new()
	for _, obj in ipairs(data or {}) do
		if obj.level >= const.SITE_PRIVILEGE_DEVELOPER_LEVEL then
			siteUserDB:api_upsert({
				username=obj.username,
				groupname=obj.groupname,
				groupUsername=obj.groupUsername,
				memberName=params.memberName,
				sitename=obj.sitename,
			})
		end
	end

	params.level = params.level or const.SITE_PRIVILEGE_GUEST_LEVEL
	self:db():insertOne({["+username+groupname+memberName"]={params.username, params.groupname, params.memberName}}, params, resume)

	return errors:wrap(yield())
end


-- 删除组成员
function group_user:api_deleteMember(params)
	if (not params.groupname) or (not params.username) or (not params.memberName) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
		
	local siteGroupDB = models.site_group:new()
	local data = siteGroupDB:api_getByUserGroupName({username=params.username, groupname=params.groupname, pageSize=const.MAX_SITE_NUM}).data.groupList

	local siteUserDB = models.site_user:new()
	for _, obj in ipairs(data or {}) do
		if obj.level >= const.SITE_PRIVILEGE_DEVELOPER_LEVEL then
			siteUserDB:api_deleteByName({
				username=obj.username,
				memberName=params.memberName,
				sitename=obj.sitename,
			})
		end
	end

	self:db():deleteOne({["+username+groupname+memberName"]={params.username, params.groupname, params.memberName}}, resume)

	return errors:wrap(yield())
end

-- 删除组全部成员
function group_user:api_deleteGroup(params)
	if (not params.groupname) or (not params.username) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
		
	self:db():deleteOne({["+username+groupname"]={params.username, params.groupname}}, resume)

	return errors:wrap(yield())
end

-- 删除用户全部租成员
function group_user:api_delete(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
		
	self:db():deleteOne({["+username"]={params.username}}, resume)

	return errors:wrap(yield())
end

-- getlist by memberName
function group_user:api_getByMember(params)
	if not params.memberName then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local limit = 100000
	self:db():find({["+memberName"]={params.memberName, limit=limit}}, resume)
	local _, data = yield()

	local groupDB = models.group:new()
	for _, obj in ipairs(data or {}) do
		groupDB:db():findOne({["+username+groupname"]={obj.username, obj.groupname}}, resume)
		local _, group = yield()
		if group then
			obj.dataSourceGroupId = group.dataSourceGroupId
		end
	end

	return errors:wrap(nil, data)
end





















