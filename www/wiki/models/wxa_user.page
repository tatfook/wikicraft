<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2016/10/21
]]
include_once("./abstract/base.page");

local wxa_user = inherit(models.abstract.base, gettable("models.wxa_user"));

wxa_user.db_name = "wxa_user";

function wxa_user:ctor()
	self:addfield("username", "string", false, 30);
	self:addfield("email", "string", false, 30); -- private email, can be used to login
	self:addfield("password", "string", false, 256); -- hashed password
	self:addfield("cellphone", "string", false, 12); -- hashed password
	self:addfield("sex", "string", false, 12);
	self:addfield("githubId", "number", false); -- github id
	self:addfield("githubToken", "table", false); -- github access token
	self:addfield("portrait", "string", false, 200); -- picture url
	self:addfield("comment", "string", false, 300);
	self:addfield("company", "string", false, 30);
	self:addfield("location", "string", false, 50);
	self:addfield("joindate", "string", false, 30);
	self:addfield("isadmin", "boolean", false);
end


function wxa_user:get(params) 
	if not params._id then
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}	
	end
	
	self:db():findOne({_id=params._id}, resume)
	local err, data = yield()
	
	if err then
		return errors:wrap(err, data)
	end

	return {error=errors.SUCCESS, data=data}
end


function wxa_user:update(params) 
	if not params._id then
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}	
	end
	
	self:db():updateOne({_id=params._id}, params, resume)
	local err, data = yield()
	
	if err then
		return errors:wrap(err, data)
	end

	return {error=errors.SUCCESS, data=data}
end

function wxa_user:create(params) 
	self:db():insertOne(nil, params, resume)
	local err, data = yield()
	
	if err then
		return errors:wrap(err, data)
	end

	return {error=errors.SUCCESS, data=data}	
end

function wxa_user:api_login(params) 
	if (not params.email) or (not params.password) then
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}	
	end
	
	self:db():findOne(params, resume)
	local err, data = yield()
	if err then 
		return errors:wrap(err, data)
	end

	return {error=errors.SUCCESS, data=createJWT(data)}
end
	

