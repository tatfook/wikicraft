<?npl
--[[
Title: site data source
Author: wuxiangan
Date: 2017/06/08
]]


include_once("./abstract/base.page")
include_once("./group_user.page")
include_once("./site_user.page")
include_once("./website.page")

local site_group = inherit(models.abstract.base, gettable("models.site_group"))
site_group.db_name = "site_group"


function site_group:ctor()
	self:addfield("username", "string")            -- 用户名  组的所属者
	self:addfield("sitename", "string")            -- 站点名
	self:addfield("groupUsername", "string")       -- 组用户名
	self:addfield("groupname", "string")           -- 组名 
	self:addfield("level", "number")               -- 权限级别
	self:addfield("levelName", "string")           -- 级别名
end

-- 创建一个站点组
function site_group:api_upsert(params)
	if (not params.username) or (not params.sitename) or not params.groupUsername or (not params.groupname) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.level = params.level or const.SITE_PRIVILEGE_GUEST_LEVEL

	self:db():insertOne({["+username+sitename+groupUsername+groupname"]={params.username, params.sitename, params.groupUsername, params.groupname}}, params, resume)
	local _, siteGroup = yield()

	if (params.level >= const.SITE_PRIVILEGE_DEVELOPER_LEVEL) then
		models.site_user:api_addGroupUser(params)
	end
	
	return errors:wrap(nil, siteGroup)
end

-- 删除一个站点组
function site_group:api_deleteByName(params)
	if (not params.username) or (not params.sitename) or not params.groupUsername or (not params.groupname) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():deleteOne({["+username+sitename+groupUsername+groupname"]={params.username, params.sitename, params.groupUsername, params.groupname}}, resume)
	yield()

	local siteUserDB = models.site_user:new()
	if (params.level >= const.SITE_PRIVILEGE_DEVELOPER_LEVEL) then
		siteUserDB:api_deleteGroupUser(params)
	end

	return errors:wrap(nil)
end

-- 删除通过站点名
function site_group:api_deleteBySitename(params)
	if (not params.username) or (not params.sitename) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():delete({["+username+sitename"]={params.username, params.sitename}}, resume)
	yield()

	local siteUserDB = models.site_user:new()
	siteUserDB:db():delete({["+username+sitename"]={params.username, params.sitename}}, resume)
	yield()

	return errors:wrap(nil)
end

-- 获取用户用户编辑权限的站点
function site_group:api_getByMemberName(params)
	if not params.memberName then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local groupUserDB = models.group_user:new()
	groupUserDB:db():find({["+memberName+level"]={params.memberName, gt=const.SITE_PRIVILEGE_DEVELOPER_LEVEL}}, resume)
	local _, groupList = yield()
	local result = {}
	local websiteDB = models.website:new()
	
	for _, group in ipairs(groupList or {}) do
		result[#result+1] = {} 
		-- result[#result]["groupUser"] = group
		self:db():find({["+groupUsername+groupname+level"]={group.username, group.groupname, gt=const.SITE_PRIVILEGE_DEVELOPER_LEVEL}}, resume)
		local _, siteGroupList = yield()	
		for _, siteGroup in ipairs(siteGroupList or {}) do
			result[#result]["siteGroup"] = siteGroup
			result[#result]["siteinfo"] = websiteDB:api_getWithDataSourceByName(siteGroup).data
		end
	end
	
	return errors:wrap(nil, result)
end 


-- 获取站点组通过通过组名 用户名
function site_group:api_getByUserGroupName(params)
	if not params.username or not params.groupname then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local skip, limit = util:pagination(params)
	self:db():count({["+groupUsername+groupname"]={params.username, params.groupname}}, resume)
	local _, total = yield()

	self:db():find({["+groupUsername+groupname"]={params.username, params.groupname, skip=skip, limit=limit}}, resume)
	local _, groupList = yield()

	return errors:wrap(nil, {total=total, groupList=groupList})
end

-- 通过用户名获取
function site_group:api_getByUsername(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local skip, limit = util:pagination(params)

	self:db():count({["+username"]={params.username}}, resume)
	local _, total = yield()

	self:db():find({["+username"]={params.username, skip=skip, limit=limit}}, resume)
	local _, groupList = yield()

	return errors:wrap(nil, {total=total, groupList=groupList})
end


-- 获取站点可读权限的用户列表
function site_group:api_getGuestUserList(params)
	if not params.username or not params.sitename then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():find({["+username+sitename+level"]={params.username, params.sitename, gt=const.SITE_PRIVILEGE_GUEST_LEVEL}}, resume)
	local _, groups = yield()

	local userlist = {}
	local groupUserDB = models.group_user:new()
	for _, group in ipairs(groups or {}) do
		groupUserDB:db():find({["+username+groupname"]={group.groupUsername, group.groupname}}, resume)
		local _, users = yield()
		for _, user in ipairs(users or {}) do
			userlist[#userlist+1] = user.memberName
		end
	end

	return errors:wrap(nil, userlist)
end







