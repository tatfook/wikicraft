<?npl
--[[
Title: user profile
Author: wuxiangan
Date: 2016/10/21
]]


include_once("./abstract/base.page")
include_once("./vip.page")
include_once("./website.page")
include_once("./website_domain.page")
include_once("./website_member.page")
include_once("./website_pageinfo.page")
include_once("./user_favorite.page")
include_once("./user_fans.page")
include_once("./user_trends.page")
include_once("./user_active.page")
include_once("./data_source.page")
include_once("./site_data_source.page")
include_once("./user_three_service.page")

local user = inherit(models.abstract.base, gettable("models.user"))
user.db_name = "user"


function user:ctor()
	self:addfield("username", "string", false, 30)     -- 用户名  唯一不可改
	self:addfield("displayName", "string", false, 30)  -- 显示名
	self:addfield("introduce", "string", false)     -- 简介
	self:addfield("email", "string", false, 30)     -- 邮箱
	self:addfield("password", "string", false, 256) -- hashed password
	self:addfield("cellphone", "string", false, 12) -- 手机
	self:addfield("sex", "string", false, 12)
	self:addfield("defaultDataSourceSitename", "string")    -- 默认数据源的站点名
	self:addfield("defaultDataSourceName", "string")    -- 默认数据源的站点名
	self:addfield("portrait", "string", false, 200) -- picture url
	self:addfield("roleId", "number")
	self:addfield("vipLevel", "number")
	self:addfield("location", "string", false, 50)
	self:addfield("joindate", "string", false, 30)
	-- 以下字段不明确用途会废弃
	self:addfield("comment", "string", false, 300)
	self:addfield("company", "string", false, 30)
	self:addfield("favoriteCount", "number")   -- 收藏量
	self:addfield("fansCount", "number")  -- 粉丝数量
	self:addfield("websiteCount", "number") -- 作品数量
	self:addfield("signature", "string")
	self:addfield("isadmin", "boolean", false)
end


function user:filterUserInfo(params)
	params.username = nil
	params.email = nil
	params.password = nil
	params.isadmin = nil
	params.roleId = nil
	params.vipLevel = nil
	params.cellphone = nil
end

-- 发送邀请邮件
function user:api_inviteFriend(params)
	if (not params.username) or (not params.friendMail) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local par = {}
	par.to = params.friendMail
	--log(params.friendMail)
	--par.to = "765485868@qq.com"
	par.subject = "keepwork好友邀请"
	local htmlContent = [[
	<div class="main-content">
	<p>你好，你的好友%s真诚的将keepwork推荐给你。</p>
	<p>keepwork 是一款强大的网站构建平台。</p>
	<p>http://keepwork.com</p>
	</div>
	]]
	htmlContent = string.format(htmlContent, params.username)
	--log(htmlContent)
	par.body = htmlContent
	util:sendEmail(par)

	return errors:wrap(nil)
end


function user:encodePassword(password)
	return ParaMisc.md5(password or "")
end

-- 发短信
function user:api_sendSms(params)
	local ip = getpeername()

	if ip ~= "121.14.117.239" then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	if not params.cellphone or not params.code or not params.expires then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	local smsParams = {to=params.cellphone, datas={params.code, params.expires}, templateId="194013"}

	local data = sendTemplateSms(smsParams)
	if not data or  data.statusCode ~= "000000" then
		return errors:wrap(errors:new(data.statusMsg))
	end

	return errors:wrap(nil)
end

-- 用户是否受限 1 -- 受限  0 -- 不受限
function user:api_isBlock(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username"]={params.username}}, resume)
	local err , userinfo = yield()

	if not userinfo or userinfo.roleId == const.USER_ROLE_EXCEPTION then
		return errors:wrap(nil, 1)
	end

	return errors:wrap(nil, 0)
end

-- 获取用户的基本信息
function user:api_getBaseInfoByName(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username"]={params.username}}, resume)
	local _, userinfo  = yield()

	if not userinfo then
		return errors:wrap(errors.NOT_FOUND)
	end

	userinfo.password = nil

	return errors:wrap(nil, userinfo)
end

-- 旧接口兼容
function user:api_getminiprofile(params)
	if(not params._id) then
		-- `_id` is automatically injected if no other field is found.
		self:ensureAuthenticated();
		params._id = request.userid;
	end
	local data = user._super.get(self, params);
	if(type(data) == "table") then
		-- never return password
		return {_id=data._id, joindate=data.joindate, location=data.location, displayName = data.displayName, picture = data.picture};
	end
end

-- 旧接口兼容
function user:get(params)
	if(not params._id) then
		-- `_id` is automatically injected if no other field is found.
		self:ensureAuthenticated();
		params._id = request.userid;
	end
	local data = user._super.get(self, params);
	if(type(data) == "table") then
		-- never return password
		data.password = nil;
		-- hide non-owner fields
		if(data._id ~= request.userid) then
			data.email = nil;
			data.github_token = nil;
		end
	end
	return data;
end

-- 更新用户信息
function user:update(params)
	self:ensureAuthenticated()
	local err, query = self:validateQuery(params)
	if err or (not query._id) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	if query then
		-- following field is forbidden to change by the user.
		self:filterUserInfo(query)
	end

	self:db():updateOne({_id=query._id}, query, resume)

	return errors:wrap(yield())
end

-- 用户注销账号
function user:api_deleteByName(params)
	-- 只能删除自己
	self:ensureAuthenticated()
	local tokeninfo = getTokenInfo()
	local username = tokeninfo.username

	if not tokeninfo.isAdmin then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	if not params.username or (username ~= params.username) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username"]={username}}, resume)
	local _, userinfo = yield()
	if not userinfo then
		return errors:wrap()
	end

	-- 删除用户所有站点
	local websiteDB = models.website:new()
	websiteDB:deleteUserWebsite(userinfo._id)
	-- 删除用户所有收藏
	local userFavoriteDB = models.user_favorite:new()
	userFavoriteDB:api_deleteByUserId({userId=userinfo._id})

	self:db():deleteOne({["+username"]={username}}, resume)
	local err, data = yield()

	return errors:wrap()
end

-- 更新用户信息
function user:api_updateByName(params)
	_, params = self:validateQuery(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local username = params.username
	self:filterUserInfo(params)
	params.dataSource = nil

	self:db():updateOne({["+username"]={username}}, params, resume)

	return errors:wrap(yield())
end

-- 更新用户信息
function user:api_updateUserInfo(params)
	_, params = self:validateQuery(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	user_log(params.username .. "更新用户基本信息")

	local username = params.username
	self:filterUserInfo(params)
	params.dataSource = nil

	self:db():updateOne({["+username"]={username}}, params, resume)

	return errors:wrap(yield())
end

-- 手机验证
function user:api_verifyCellphoneOne(params)
	if not params.cellphone then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	if params.bind then
		self:db():find({["+cellphone"]={params.cellphone}}, resume)
		local _, data = yield()

		if data and #data > 0 then
			return errors:new("手机号已绑定:" .. data[1].username)
		end
	end

	local smsCode = tostring(math.random(1000,9999))
	local smsParams = {to=params.cellphone, datas={smsCode,"3分钟"}, templateId="194013"}
	local data = sendTemplateSms(smsParams)
	if not data or  data.statusCode ~= "000000" then
		return errors:wrap(errors:new(data.statusMsg))
	end

	local value = {cellphone=params.cellphone, smsCode=smsCode}
	value = commonlib.Json.Encode(value)
	mem_cache:set(data.templateSMS.smsMessageSid, value, nil, 180)

	return errors:wrap(nil, {smsId=data.templateSMS.smsMessageSid})
end

-- 手机验证
function user:api_verifyCellphoneTwo(params)
	self:ensureAuthenticated()
	local username = getTokenInfo().username
	if (not params.smsId) or (not params.smsCode) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local value = mem_cache:get(params.smsId)
	value = commonlib.Json.Decode(value or "{}")
	if value.smsCode ~= params.smsCode then
		return errors:wrap(errors:new("验证码错误"))
	end
	mem_cache:set(params.smsId, nil)

	local cellphone = ""
	if params.bind then 
		cellphone = value.cellphone
	end
	self:db():updateOne({["+username"]={username}}, {cellphone=cellphone}, resume)

	return errors:wrap(yield())
end


-- 邮箱验证1
function user:api_verifyEmailOne(params)
	self:ensureAuthenticated()
	local username = getTokenInfo().username
	if not params.email then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local verifyCode = tostring(math.random(1000,9999))
	local url = "http://" .. request:GetHost() .. "/api/wiki/models/user/verifyEmailTwo?username=" .. username .. "&verifyCode=" .. verifyCode
	if params.bind then
		url = url .. "&bind=true"
		self:db():find({["+email"]={params.email}}, resume)
		local err, data = yield()
		if data and #data > 0 then
			return errors:wrap("邮箱已绑定:" .. data[1].username)
		end
	end

	-- TODO 加时间限制
	mem_cache:set("verifyEmail" .. username, {email=params.email, verifyCode=verifyCode}, nil, 300)

	local par = {}
	par.to = params.email
	par.subject = "邮箱验证"
	par.body = [[
	<div class="main-content">
	<p>邮箱验证码为:%s</p>
	</div>
	]]
	--<p>打开如下链接进行邮箱验证:</p>
	--<p><a href="%s">%s</a></p>
	par.body = string.format(par.body, verifyCode, url, url)
	util:sendEmail(par)

	return errors:wrap(nil)
end

-- 邮箱验证2
function user:api_verifyEmailTwo(params)
	local username = params.username
	local verifyCode = params.verifyCode
	local bind = params.bind

	if not params.isApi then
		response:set_header("Location", "http://keepwork.com")
		response:status(301):send_headers();
	else
		self:ensureAuthenticated()
		username = getTokenInfo().username
	end

	if not username  or not verifyCode then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local key = "verifyEmail" .. username
	local cacheInfo = mem_cache:get(key)
	if not cacheInfo or (not cacheInfo.email) or (cacheInfo.verifyCode ~= verifyCode) then
		return errors:wrap("验证码错误或失效")
	end
	mem_cache:set(key, nil)

	local email = cacheInfo.email
	if not bind then
		email = ""
	end

	self:db():updateOne({["+username"]={username}}, {email=email}, resume)
	local err, data = yield()

	return errors:wrap(err)
end

-- 找回密码1
function user:api_findPwdOne(params)
	if not params.email then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+email"]={params.email}}, resume)
	local _, userinfo = yield()
	if not userinfo then
		return errors:wrap(errors.USER_NOT_EXIST)
	end
	local t = os.time()
	local key = tostring(t) .. tostring(math.random(10000))
	local url = "http://keepwork.com/wiki/findPwd?step=2&key=" .. key .. "&email=" .. params.email

	-- TODO 加时间限制
	mem_cache:set(params.email, key, nil, 300)

	local par = {}
	par.to = params.email
	par.subject = "keepwork找回密码"
	par.body = [[
	<div class="main-content">
		<p>打开如下链接进行密码重置:</p>
		<p><a href="%s">%s</a></p>
	</div>
	]]
	par.body = string.format(par.body, url, url)
	util:sendEmail(par)

	return errors:wrap(nil)
end

-- 找回密码2
function user:api_findPwdTwo(params)
	if (not params.email) or (not params.key) or (not params.password) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local key = mem_cache:get(params.email)
	if key ~= params.key then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	mem_cache:set(params.email, nil)

	local password = self:encodePassword(params.password)
	self:db():updateOne({["+email"]={params.email}}, {password=password}, resume)

	return errors:wrap(yield())
end

-- 更改密码
function user:api_changepw(params)
	self:ensureAuthenticated()
	local username = getTokenInfo().username
	if (not params.oldpassword) or (not params.newpassword) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username"]={username}}, resume)
	local err, user = yield()

	if not user then
		return errors:wrap(errors.NOT_FOUND)
	end

	local oldpassword = self:encodePassword(params.oldpassword)
	local newpassword = self:encodePassword(params.newpassword)
	if user.password ~= oldpassword then
		return errors:wrap("密码错误")
	end

	self:db():updateOne({["+username"]={username}}, {password=newpassword}, resume)
	return errors:wrap(yield())
end

-- 发邮件
function user:api_setemail(params)
	par = {}
	par.to = "765485868@qq.com"
	par.subject = "wikicraft email confirm"
	par.body = "<a href='localhost:8099/wiki/userFavoriteDB'>注册确认</a>"
	util:sendEmail(par)
	return "email"
	--[[
	if (not params._id) or (not params.email) then
	return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	local email = params.email
	if not email:match("^[%w%._%-]+@[%w%.%-]+%.[%a]+$") or #email>50 then
	return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():updateOne({_id=params._id}, {email=email}, resume)
	return errors:wrap(yield())
	]]
end

-- 登录
function user:api_login(params)
	if (not params.username) or (not params.password) then
		return {error=errors.REQUEST_PARAMS_ERROR, data=nil}
	end

	user_log("用户" .. params.username .. "登录系统")
	if (string.find(params.username, '@')) then
		self:db():findOne({["+email"]={params.username}}, resume)
	elseif (string.match(params.username,"^%d*$")) then
		self:db():findOne({["+cellphone"]={params.username}}, resume)
	else
		self:db():findOne({["+username"]={string.lower(params.username)}}, resume)
	end

	local _, userinfo = yield()
	if not userinfo then
		return errors:wrap("用户不存在")
	end

	user_log("用户" .. params.username .. "登录成功")

	if userinfo.password ~= self:encodePassword(params.password) then
		return errors:wrap("密码错误")
	end

	local siteDataSourceDB = models.site_data_source:new()
	userinfo.defaultSiteDataSource = siteDataSourceDB:api_getSiteDataSource({username=userinfo.username, sitename=userinfo.defaultDataSourceSitename}).data
	userinfo.dataSource = siteDataSourceDB:api_getByUsername({username=userinfo.username}).data

	local vipDB = models.vip:new()
	userinfo.vipInfo = vipDB:api_getByUsername({username=params.username}).data

	local token = encodeJWT({userId=userinfo._id, username=userinfo.username})
	setAuthCookie(token)
	return {error=errors.SUCCESS, data={token=token, userinfo=userinfo}}
end

function user:api_bindThreeService(params)
	local threeService = params.threeService or {}
	if (not params.username) or (not params.password) or (not threeService.serviceId) or (not threeService.serviceName) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	local password = self:encodePassword(params.password)
	self:db():findOne({["+username+password"]={params.username, password}}, resume)
	local _, userinfo = yield()
	-- 用户不存在则注册
	if not userinfo then
		return self:api_register(params)
	end
	-- 用户存在则绑定
	local userThreeServiceDB = models.user_three_service:new()
	threeService.userId = userinfo._id
	userThreeServiceDB:api_upsert(threeService)

	return errors:wrap(nil, {token=encodeJWT({userId=userinfo._id, username=userinfo.username}), userinfo=userinfo, isNewUser=0})
end

-- 注册
function user:api_register(params)
	-- 用户名 密码 为必填项
	if (not params.username) or (not params.password) then
		return errors:wrap(err)
	end
	params.username = string.lower(params.username)
	if #params.username < 4 or #params.username > 30 then
		return errors:wrap(errors:new("用户名不合法"))
	end

	if not string.match(params.username, "^[%w]+$") then
		return errors:wrap(errors:new("用户名只能由字母和数字组成"))
	end

	local isOk = sensitiveWordFilter({username=params.username})
	if not isOk then
		return errors:wrap("含有非法字符")
	end

	-- 查找用户名是否可用
	if self:api_checkUsername({username=params.username}).data == 0 then
		return errors:wrap(errors:new("用户名已存在"))
	end

	-- 创建用户
	self:db():insertOne({["+username"]={params.username}}, {
		username = params.username,
		displayName = params.username,
		password = self:encodePassword(params.password),
		email = params.email,
		cellphone = params.cellphone,
		portrait = params.portrait,
		joindate = ParaGlobal.GetDateFormat("yyyy-MM-dd"),
		defaultDataSourceName=const.DEFAULT_DATA_SOURCE_NAME,
		defaultDataSourceSitename=const.DEFAULT_DATA_SOURCE_SITENAME,
		roleId = const.USER_ROLE_NORMAL,
		administrator = 0,
		favoriteCount=0,
		fansCount=0,
		websiteCount=0,
	}, resume)
	local err, userinfo = yield();

	if not userinfo then
		return errors:wrap(errors.SERVER_INNER_ERROR)
	end

	local siteDataSourceDB = models.site_data_source:new()

	userinfo.defaultSiteDataSource = siteDataSourceDB:api_getSiteDataSource({username=userinfo.username, sitename=userinfo.defaultDataSourceSitename}).data
	userinfo.dataSource = siteDataSourceDB:api_getByUsername({username=params.username}).data

	-- 第三方服务
	local threeService = params.threeService
	if threeService and threeService.serviceId and threeService.serviceName then
		local userThreeServiceDB = models.user_three_service:new()
		threeService.userId = userinfo._id
		userThreeServiceDB:api_upsert(threeService)
	end

	local vipDB = models.vip:new()
	userinfo.vipInfo = vipDB:api_getByUsername({username=params.username}).data

	local token = encodeJWT({userId=userinfo._id, username=userinfo.username})
	setAuthCookie(token)

	user_log("注册新用户:" .. params.username)
	return errors:wrap(nil, {token=token, userinfo=userinfo, isNewUser=1})
end

-- 获取用户默认数据源
function user:api_getDefaultSiteDataSource(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username"]={params.username}}, resume)
	local _, userinfo = yield()

	local siteDataSourceDB = models.site_data_source:new()

	return siteDataSourceDB:api_getSiteDataSource({username=userinfo.username, sitename=userinfo.defaultDataSourceSitename})
end

-- 获取用户数据源列表
function user:api_getUserDataSource(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local siteDataSourceDB = models.site_data_source:new()
	local dataSource = siteDataSourceDB:api_getByUsername({username=params.username}).data

	for _, value in ipairs(dataSource or {}) do
		value.dataSourceToken = nil
	end

	return errors:wrap(nil, dataSource)
end

-- 获取用户信息
function user:api_getProfile()
	self:ensureAuthenticated()
	local tokeninfo = getTokenInfo()
	local username = tokeninfo.username
	--LOG.std(nil, "keepwork", "errror", tokeninfo)

	if tokeninfo.authway == "oauth" then
		return self:api_getBaseInfoByName({username=username})
	end

	self:db():findOne({["+username"]={username}}, resume)
	local err, data = yield()
	if not data then
		return errors:wrap(errors.NOT_FOUND)
	end

	local siteDataSourceDB = models.site_data_source:new()
	data.defaultSiteDataSource = siteDataSourceDB:api_getSiteDataSource({username=data.username, sitename=data.defaultDataSourceSitename}).data
	data.dataSource = siteDataSourceDB:api_getByUsername({username=data.username}).data

	-- 获取用户vip信息
	local vipDB = models.vip:new()
	data.vipInfo = vipDB:api_getByUsername({username=data.username}).data

	return errors:wrap(nil, data)
end

-- 通过用户ID获得用户信息
function user:api_getById(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({_id=params.userId}, resume)
	local err, data = yield()
	if not data then
		return errors:wrap(err or errors.NOT_FOUND, data)
	end
	data.password = nil

	data.dataSource = self:api_getUserDataSource({username=data.username}).data

	return errors:wrap(nil, data)
end

-- 通过用户名获得用户信息
function user:api_getByName(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username"]={params.username}}, resume)
	local err, data = yield()
	if not data then
		return errors:wrap(err or errors.NOT_FOUND, data)
	end

	data.password = nil

	data.dataSource = self:api_getUserDataSource({username=data.username}).data

	return errors:wrap(nil, data)
end

-- 通过email获得用户信息
function user:api_getByEmail(params)
	if not params.email then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+email"]={params.email}}, resume)
	local err, data = yield()
	if not data then
		return errors:wrap(err or errors.NOT_FOUND, data)
	end

	data.password = nil

	data.dataSource = self:api_getUserDataSource({username=data.username}).data

	return errors:wrap(nil, data)
end

-- 获得用户数量
function user:api_getCount(params)
	self:db():count({}, resume)

	return errors:wrap(yield())
end

-- 获得收藏数排序的用户列表
function user:api_getFavoriteSortList(params)
	local skip, limit = util:pagination(params)

	local count = self:api_getCount().data
	self:db():find({["-favoriteCount"]={gt=-1, skip=skip, limit=limit}}, resume)
	local err, data = yield()

	if err then
		return errors:wrap(err)
	end

	return errors:wrap(nil, {total=count, pageCount=util:getPageCount(count,limit), userList=data})
end

-- 获得用户信息和站点通过站点名
function user:api_getUserAndSiteBySitename(params)
	if not params.sitename or (not params.username) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local websiteDB = models.website:new()
	local siteinfo = websiteDB:api_getByName({username=params.username, sitename=params.sitename}).data
	if not siteinfo then
		return errors:wrap(errors.NOT_FOUND)
	end

	local userinfo = self:api_getById({userId=siteinfo.userId}).data
	if not userinfo then
		return  errors:wrap(errros.NOT_FOUND)
	end

	return errors:wrap(nil, {userinfo=userinfo, siteinfo=siteinfo})
end

-- 修改用户的站点数量
function user:updateWebsiteCount(userId, count)
	local user = self:api_getById({userId=userId}).data

	if not user then
		log("user not exist, userId:", userId)
		return
	end

	user.websiteCount = user.websiteCount or 0
	self:db():updateOne({_id=userId}, {websiteCount=user.websiteCount+count}, resume)
	yield()

	return
end

-- 修改用户的收藏数量
function user:updateFavoriteCount(userId, count)
	local user = self:api_getById({userId=userId}).data

	if not user then
		log("user not exist, userId:", userId)
		return
	end

	user.favoriteCount = user.favoriteCount or 0
	self:db():updateOne({_id=userId}, {favoriteCount=user.favoriteCount+count}, resume)
	yield()

	return
end

-- 修改用户的粉丝数量
function user:updateFansCount(userId, count)
	local user = self:api_getById({userId=userId}).data

	if not user then
		log("user not exist, userId:", userId)
		return
	end

	user.fansCount = user.fansCount or 0
	self:db():updateOne({_id=userId}, {fansCount=user.fansCount+count}, resume)
	yield()

	return
end

-- 获取用户统计信息
function user:api_getStatics(params)
	if not params.userId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local websiteDB = models.website:new()
	local userFavoriteDB = models.user_favorite:new()

	local websiteCount = websiteDB:api_getCountByUserId({userId=params.userId}).data
	local favoriteCount = userFavoriteDB:api_getFavoriteWebsiteCountByUserId({userId=params.userId}).data
	local fansCount = userFavoriteDB:api_getFansCountByUserId({userId=params.userId}).data

	self:db():updateOne({_id=params.userId},{favoriteCount=favoriteCount, fansCount=fansCount, websiteCount=websiteCount}, resume)
	local err, data = yield()

	return errors:wrap(nil, {favoriteCount=favoriteCount, fansCount=fansCount, websiteCount=websiteCount})
end

-- 检测用户名是否有效
function user:api_checkUsername(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+username"]={params.username}}, resume)
	local err, data = yield()
	if data then
		return errors:wrap(nil, 0) -- 无效
	end

	local websiteDomainDB = models.website_domain:new()

	return websiteDomainDB:api_checkDomain({domain=params.username})
end

-- 获取用户详细相关信息通过用户名
function user:api_getDetailByName(params)
	local skip, limit = util:pagination(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	-- 获取用户信息
	self:db():findOne({["+username"]={params.username}}, resume)
	local err, userinfo = yield()

	if not userinfo or userinfo.roleId == const.USER_ROLE_EXCEPTION then
		return errors:wrap(nil, nil)
	end
	
	userinfo.password = nil
	-- self:filterUserInfo(userinfo)

	-- 获取创建的组织列表
	local websiteDB = models.website:new()
	websiteDB:db():count({["+userId+type"]={userinfo._id, const.WEBSITE_TYPE_ORGANIZATION}}, resume)
	local err, selfOrganiztionTotal = yield()
	websiteDB:db():find({["+userId+type"]={userinfo._id, const.WEBSITE_TYPE_ORGANIZATION, limit=limit}}, resume)
	local err, selfOrganiztionList = yield()
	local selfOrganizationObj = {total=selfOrganiztionTotal, siteList=selfOrganiztionList}

	-- 加入的组织
	local websiteMemberDB = models.website_member:new()
	local joinOrganizationObj = websiteMemberDB:api_getOrganizationListByUsername({username=userinfo.username}).data

	-- 获取热门作品
	local hotSiteObj = websiteDB:api_getSiteList({username=userinfo.username,sortBy="-favoriteCount"}).data

	-- 获得全部站点
	local allSiteList = websiteDB:api_getAllByUsername({username=userinfo.username}).data

	-- 获得用户粉丝
	local userFansDB = models.user_fans:new()
	local fansObj = userFansDB:api_getByUserId({userId=userinfo._id}).data

	-- 获得用户关注
	local followUserObj = userFansDB:api_getByFansUserId({fansUserId=userinfo._id}).data
	-- 获取用户收藏的站点
	local userFavoriteDB = models.user_favorite:new()
	local followSiteObj = userFavoriteDB:api_getByUserId({userId=userinfo._id}).data
	local followObj = {followUserObj=followUserObj, followSiteObj=followSiteObj}

	-- 获取用户动态
	local userTrendsDB = models.user_trends:new()
	local trendsObj = userTrendsDB:api_get({userId=userinfo._id}).data

	-- 获取活动记录
	local userActiveDB = models.user_active:new()
	local activeObj = userActiveDB:api_getByUsername({username=userinfo.username}).data

	return errors:wrap(nil,{userinfo=userinfo, activeObj=activeObj, selfOrganizationObj=selfOrganizationObj, joinOrganizationObj=joinOrganizationObj, hotSiteObj=hotSiteObj, allSiteList=allSiteList, followObj=followObj, fansObj=fansObj, trendsObj=trendsObj})
end

-- 获取gitlab账号
function user:api_getGitlabAccount(params)
	if not params.username or not params.password then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({["+username"]={params.username}}, resume)
	local _, userinfo = yield()

	if not userinfo then
		return errors:wrap(errors.NOT_FOUND)
	end

	if userinfo.password ~= self:encodePassword(params.password) then
		return errors:wrap("密码错误")
	end

	local dataSourceDB = models.data_source:new()
	dataSourceDB:db():findOne({["+username+name"]={params.username, const.DEFAULT_DATA_SOURCE_NAME}}, resume)
	local _, dataSource = yield()

	if not dataSource or not dataSource.dataSourcePassword or not dataSource.dataSourceUsername then
		return errors:wrap(errors.SERVER_INNER_ERROR)
	end

	return errors:wrap(nil, {username=dataSource.dataSourceUsername, password=dataSource.dataSourcePassword})
end

-- 用户是否登录
function user:api_isLogin(params)
	--log(request.headers, true)
	local origin = request:header("Origin")
	if not origin then
		local refer = request:header("Referer")
		if not refer then
			origin = "http://" .. request:header("Host")
		else
			origin = string.match(refer, "http[s]?://[^/]*")
		end
	end
	--log(origin)
	
	if not isAllowCros(origin) then
		return errors:wrap(errors.FORBIDDEN_ACCESS)
	end


	response:set_header('Access-Control-Allow-Origin', origin);  -- debug use
	response:set_header('Access-Control-Allow-Credentials', 'true');  -- 设置允许携带cookie

	local token = getTokenInfo()
	local isLogin = false
	if token then
		isLogin = true
	end

	local cookie_token = request:get_cookie("token")

	return errors:wrap(nil, {isLogin=isLogin, token=cookie_token})
end

