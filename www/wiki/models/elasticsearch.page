<?npl
--[[
Title: elasticsearch
Author: Zheng Jiabiao
Date: 2018/1
Desc:Functions used to operate elasticsearch in port 9200
]]


include_once("./abstract/base.page")
local elasticsearch = inherit(models.abstract.base, gettable("models.elasticsearch"))


-- 指定host和port
-- todo:修改host读取途径
function elasticsearch:connect(params)
    local params = params or {}
    self.host = params.host or KEEPWORK["config"]["default"]["wiki"]["es_setting"]["host"]
    self.port = params.port or KEEPWORK["config"]["default"]["wiki"]["es_setting"]["port"]
    self.index = params.index or KEEPWORK["config"]["default"]["wiki"]["es_setting"]["index"]
    self.url = format("http://%s:%d/%s/", self.host, self.port, self.index)
end


-- 定位index，type
function elasticsearch:locator(params)
    local _type = ""
    local _id = ""

    if (not self.url) then
        error("ES NOT CONNECTED, PLEASE CALL elasticsearch:connect")
    end

    if params.id then
        _id = params.id .. "/"
    end

    if params.type then
        _type = params.type .. "/"
    else
        _id = ""
    end

    params.type = nil
    params.id = nil

    return format("%s%s%s", self.url, _type, _id)
end


-- 插入一条数据
function elasticsearch:insertOne(params)
    if (not params.type) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    -- 生成与es交互的url
    local location = self:locator(params)
    local insert_to = location
    params.type = nil

    -- 发送请求
    return self:sendToES({send_to=insert_to, method="POST", form=params})
end


-- 只能通过id更新
function elasticsearch:updateOne(params)
    if (not params.type) or (not params.id) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    local location = self:locator(params)
    local update_to = location .. "_update"
    params.type = nil
    params.id = nil

    local body = {doc = params}
    return self:sendToES({send_to=update_to, method="POST", form=body})
end


-- 只能通过单字段查找
function elasticsearch:findOne(params)
    if params.id then
        params._id = params.id
        params.id = nil
    end
    
    local location = self:locator(params)
    local search_in = location.. "_search"
    params.type = nil

    if params.access_url then
        params["access_url.keyword"] = params.access_url
        params.access_url = nil
    end

    local body = {
        query = {
            constant_score = { 
                filter = {
                    term = params
                }
            }
        }
    }

    return self:sendToES({send_to=search_in, method="GET", form=body})
end


-- 只能通过id删除
function elasticsearch:deleteOne(params)
    if (not params.type) or (not params.id) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    local location = self:locator(params)

    return self:sendToES({send_to=location, method="DELETE"})
end


-- 搜索入口 当前限定全文搜索page信息
function elasticsearch:api_search(params)
    self:connect()
    if (not params.q) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    local type_of_search_result = params.type or "page"
    local params = self:params_wrapper(params)
    local location = self:locator(params)
    local search_in = location .. "_search"
    local body = {}

    -- 生成查询表
    body = self:query_generator(params)

    -- 高亮处理
    if (params.highlight == 1) then
        body.highlight = {fields = self:highlight_fields_generator(params)}
    end

    -- 排序处理
    if params.sort then
        body.sort = params.sort      -- array
    end

    -- 分页、返回数量处理
    body.size = params.size
    body.from = params.from

    local result = self:sendToES({send_to=search_in, method="GET", form=body})
    local rcode = result.data.rcode
    local wrapped_result = {}

    -- 封装返回数据
    if (rcode == 200) then
        if (type_of_search_result == "page") then
            wrapped_result = self:wrap_page_result(result)
        end

        if (type_of_search_result == "skill") then
            wrapped_result = self:wrap_skill_result(result)
        end

    else
        wrapped_result = result.data.data
    end

    return wrapped_result
end


function elasticsearch:wrap_page_result(result)
    local wrapped_result = {}
    local rcode = result.data.rcode

    -- 封装返回数据
    wrapped_result = {
        timed_out = result.data.data.timed_out,
        took = result.data.data.took,
        total = result.data.data.hits.total,
        status = rcode
    }

    local hits = {}
    for i, hit in ipairs(result.data.data.hits.hits) do
        hit._source._score = hit._score
        hit._source.highlight = hit.highlight
        hits[#hits + 1] = hit._source
    end
    
    wrapped_result.hits = hits
    return wrapped_result
end


function elasticsearch:wrap_skill_result(result)
    local wrapped_result = {}
    local rcode = result.data.rcode

    -- 封装返回数据
    wrapped_result = {
        timed_out = result.data.data.timed_out,
        took = result.data.data.took,
        total = result.data.data.hits.total,
        status = rcode
    }

    local hits = {}
    for i, hit in ipairs(result.data.data.hits.hits) do
        local work = {}
        for j, work_link in ipairs(hit._source.works) do
            work = {
                access_url = work_link,
                username = hit._source.username,
                skill = hit._source.title
            }

            hits[#hits + 1] = work
        end
    end

    wrapped_result.hits = hits
    return wrapped_result
end


-- 过滤参数
function elasticsearch:params_wrapper(params)
    -- 过滤不需要的参数
    local new_params = {
        q = params.q,
        type = params.type,
        highlight = tonumber(params.highlight) or 1,
        size = tonumber(params.size),
        from = tonumber(params.from),
        sort = params.sort,
        fields = params.fields or {},
        body = params.body,
        -- advanced = params.advanced
    }

    new_params.advanced = 0 -- 暂时禁用高级搜索

    if (not new_params.size) or (new_params.size > 500) then new_params.size = 500 end
    if (new_params.advanced == 0) then new_params.body = nil end  --暂时禁止直接传入body

    if (not new_params.type) or (new_params.type == "page") then
        new_params.fields = {'tags', 'content', 'username', 'sitename', 'pagename'}
    end

    if (new_params.type == "skill") then
        new_params.fields = {"title"}
    end

    return new_params
end


-- 生成查询表，暂时只用match
function elasticsearch:query_generator(params)
    local query = {}

    -- 单字段搜索
    if (#params.fields == 1) then
        local match = {}
        match[params.fields[1]] = params.q
        query = {match = match}

    -- 多字段搜索
    elseif (#params.fields > 1) then
        query = {
        multi_match = {
            query = params.q,   --string
            fields = params.fields   --array
            }
        }
    end

    return {query=query}
end


-- 指定高亮字段
function elasticsearch:highlight_fields_generator(params)
    local highlight_fields = {}

    for i, field in ipairs(params.fields) do
        highlight_fields[field] = {}
    end

    return highlight_fields
end


-- 批量写操作
function elasticsearch:bulk(params)
    if (not params.data) then
        params.flag = "elasticsearch:bulk"
        log(params, true)
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    local location = self:locator(params)
    local send_to = format("%s_bulk", location)
    return self:sendToES({send_to=send_to, postfields=params.data})
end


-- 向ES发送请求
function elasticsearch:sendToES(params)
    if (not params.send_to) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    if (params.form) and (params.postfields) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    local info = {}
    info.url = params.send_to
    info.method = params.method or "GET"
    info.form = params.form
    info.json = true

    if (params.postfields) then
        info.postfields = params.postfields
        info.method = nil
    else
        if (info.method == "POST") then
            -- 因es不能接受空JSON对象将空表{}转为JSON中的空数组[]
            info.postfields = commonlib.Json.Encode(info.form, true)
        end
    end

    System.os.GetUrl(info, resume)
    local err, result = yield()

    -- 若返回错误，则记录
    self:errors_logger(err, result, info)

    -- return errors:wrap(err, result.data)
    return errors:wrap(err, result)
end


function elasticsearch:errors_logger(err, result, info)
    local code = err or 200
    local result = result or {}
    local rcode = result.rcode or 200
    result.data = result.data or {}
    local items = result.data.items or {}

    if (code >= 400) or (code < 200) or (rcode >= 400) or (rcode < 200) then

        local error_info = {
            flag = "elasticsearch_return_error",
            err = err,
            data = result,
            info = info
        }

        log(error_info, true)
    end


    if (#items > 0) then
        local error_list = {}
        for i, item in ipairs(items) do
            if (item.index.status >= 400) or (item.index.status < 200) then
                item.flag = "elasticsearch_bulk_error"
                table.insert(error_list, item)
            end
        end

        log(error_list, true)
    end
end