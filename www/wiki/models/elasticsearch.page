<?npl
--[[
Title: elasticsearch
Author: Zheng Jiabiao
Date: 2018/2
Desc:Functions used to operate elasticsearch with port 9200
]]


include_once("./abstract/base.page")
local elasticsearch = inherit(models.abstract.base, gettable("models.elasticsearch"))


-- set host,port and index
-- it must be called at first
function elasticsearch:connect(params)
    local params = params or {}
    local es_setting = KEEPWORK["config"][CURRENT_ENV]["wiki"]["es_setting"] or {}
    self.host = params.host or es_setting["host"] or "localhost"
    self.port = params.port or es_setting["port"] or 9200
    self.index = params.index or es_setting["index"]
    self.enabled = params.enabled or es_setting["enabled"] or 1
    self.url = format("http://%s:%d/%s/", self.host, self.port, self.index)
end


-- locate indices, types and generate url
function elasticsearch:locator(params)
    local _type = ""
    local _id = ""

    if (not self.url) then
        error("ES NOT CONNECTED, PLEASE CALL elasticsearch:connect")
    end

    if params.id then
        _id = params.id .. "/"
    end

    if params.type then
        _type = params.type .. "/"
    else
        _id = ""
    end

    params.type = nil
    params.id = nil

    return format("%s%s%s", self.url, _type, _id)
end


function elasticsearch:insertOne(params, callback)
    if (not params.type) then
        local message = "request params error"
        return response:status(400):send({error={message=message,status=400}})
    end

    local location = self:locator(params)
    local insert_to = location
    params.type = nil

    return self:sendToES({send_to=insert_to, method="POST", form=params}, callback)
end


function elasticsearch:updateOne(params, callback)
    if (not params.type) or (not params.id) then
        local message = "request params error"
        return response:status(400):send({error={message=message,status=400}})
    end

    local location = self:locator(params)
    local update_to = location .. "_update"
    params.type = nil
    params.id = nil

    local body = {doc = params}
    return self:sendToES({send_to=update_to, method="POST", form=body}, callback)
end


-- can only be found by single field(like id or any other keyword field)
function elasticsearch:findOne(params, callback)
    local term = {_id = params.id}
    params.id = nil

    local location = self:locator(params)
    local search_in = location.. "_search"
    params.type = nil

    for k, v in pairs(params) do
        if (not term._id) then term[format("%s.keyword", k)] = v end
    end

    local body = {
        query = {
            constant_score = { 
                filter = {
                    term = term
                }
            }
        }
    }

    return self:sendToES({send_to=search_in, method="GET", form=body}, callback)
end


-- can only be deleted by id
function elasticsearch:deleteOne(params, callback)
    if (not params.type) or (not params.id) then
        local message = "request params error"
        return response:status(400):send({error={message=message,status=400}})
    end

    local location = self:locator(params)

    return self:sendToES({send_to=location, method="DELETE"}, callback)
end


function elasticsearch:search(params, callback)
    local location = self:locator(params)
    local search_in = location .. "_search"
    local body = params.body or self:query_generator(params)
    body = self:add_extra_search_conditions(params, body)
    return self:sendToES({send_to=search_in, method="GET", form=body}, callback)
end


function elasticsearch:query_generator(params)
    local query = {}

    -- search in one field
    if (#params.fields == 1) then
        local match = {}
        if (not params.fuzziness) then
            match[params.fields[1]] = params.q
        else
            match[params.fields[1]] = {
                query = params.q,
                fuzziness = params.fuzziness,
                operator = "and",
            }
        end
        query = {match = match}
    -- search in multi-fields
    elseif (#params.fields > 1) then
        query = {
            multi_match = {
                query = params.q,   --string
                fields = params.fields,   --array
                fuzziness = params.fuzziness,
            }
        }
    end

    return {query = query}
end


function elasticsearch:add_extra_search_conditions(params, body)
        -- highlight
        if (params.highlight == 1) then
            body.highlight = {fields = self:highlight_fields_generator(params)}
            body.highlight.pre_tags = params.pre_tags
            body.highlight.post_tags = params.post_tags
        end

        body.sort = params.sort      -- array
        body.post_filter = params.post_filter

        -- pagination
        if (params.size) and ((params.page) or (params.from)) then
            body.size = params.size
            if (params.page) then
                if (params.page < 1) then params.page = 1 end
            end
            body.from = params.from or ((params.page - 1) * body.size)
        end

		body.timeout = "50ms"
    return body
end


function elasticsearch:highlight_fields_generator(params)
    local highlight_fields = {}
    for i, field in ipairs(params.fields) do
        highlight_fields[field] = {}
    end
    return highlight_fields
end


function elasticsearch:bulk(params, callback)
    if (not params.data) then
        local message = "serialized data required"
        return response:status(400):send({error={message=message,status=400}})
    end

    local location = self:locator(params)
    local send_to = format("%s_bulk", location)
    return self:sendToES({send_to=send_to, postfields=params.data}, callback)
end


function elasticsearch:sendToES(params, callback)
    if (self.enabled == 0) then
        local message = "elasticsearch not enabled"
        return response:status(400):send({error={message=message,status=400}})
    end
    if (not params.send_to) then
        local message = "request params error"
        return response:status(400):send({error={message=message,status=400}})
    end

    if (params.form) and (params.postfields) then
        local message = "request params error"
        return response:status(400):send({error={message=message,status=400}})
    end

    local info = {}
    info.url = params.send_to
    info.method = params.method or "GET"
    info.form = params.form
    info.json = true

    if (params.postfields) then
        info.postfields = params.postfields
        info.method = nil
    else
        if (info.method == "POST") then
            -- send empty table as an array
            info.postfields = commonlib.Json.Encode(info.form, true)
        end
    end
    
    if (not callback) then
        System.os.GetUrl(info, resume)
        return yield()
    else
        System.os.GetUrl(info, callback)
    end
end


function elasticsearch:errors_logger(err, result, info)
    local code = err or 200
    local result = result or {}
    local rcode = result.rcode or 200
    result.data = result.data or {}
    local items = result.data.items or {}

    if (code >= 400) or (code < 200) or (rcode >= 400) or (rcode < 200) then

        local error_info = {
            flag = "elasticsearch_return_error",
            err = err,
            data = result,
            info = info
        }

        log(error_info, true)
    end

    if (#items > 0) then
        local error_list = {}
        for i, item in ipairs(items) do
            if (item.index.status >= 400) or (item.index.status < 200) then
                item.flag = "elasticsearch_bulk_error"
                table.insert(error_list, item)
            end
        end

        log(error_list, true)
    end
end
