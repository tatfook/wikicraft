<?npl
--[[
Title: org member
Author: wuxiangan
Date: 2016/11/07
]]

include_once("./abstract/base.page");
include_once("./user_works.page");
include_once("./elasticsearch.page")
include_once("./website_comment.page");

local cacheKeyPrefix = "website_works_"
local website_works = inherit(models.abstract.base, gettable("models.website_works"))
website_works.db_name="website_works"


local es = models.elasticsearch:new()
local commentModel = models.website_comment:new()

local index = CURRENT_ENV .. "_kw_website_works"
local indexType = "typename"
es:connect({index=index})

function website_works:ctor()
	self:addfield("websiteId", "number")      -- 站点ID
	self:addfield("username", "string")       -- 作品作者
	self:addfield("realname", "string")       -- 真实姓名
	self:addfield("worksTitle", "string")     -- 作品标题
	self:addfield("worksName", "string")      -- 作品名
	self:addfield("worksUrl", "string")       -- 作品容器页面url
	self:addfield("worksLogo", "string")      -- 作品logo
	self:addfield("worksDesc", "string")      -- 作品描述
	self:addfield("worksState", "string")     -- 作品状态
	self:addfield("worksFlag", "number")      -- 热门 入围
	self:addfield("schoolName", "string")     -- 校名
	self:addfield("awords", "table")         -- 参与奖项
	self:addfield("identifyUrl", "string")    -- 身份证照
	self:addfield("liveUrl", "string")        -- 生活照
	self:addfield("visitCount", "number")     -- 作品浏览量
	self:addfield("voteCount", "number")      -- 投票数
	--self:addfield("todayVoteCount", "string") -- 今日投票数  yyyy-MM-dd count
	self:addfield("commentCount", "number")   -- 评论量
	self:addfield("createDate", "string", false, 64)
	self:addfield("updateDate", "string", false, 64)
end

-- 添加记录到ES
function website_works:insert_to_es(params)
	local data = {
		id = params._id,
		worksId = tostring(params._id),
		type = indexType,
		websiteId = params.websiteId,
		username = params.username,
		worksTitle = params.worksTitle,
		worksName = params.worksName,
		worksUrl = params.worksUrl,
		worksLogo = params.worksLogo,
		worksDesc = params.worksDesc,
		worksState = params.worksState,
		worksFlag = params.worksFlag,
		schoolName = params.schoolName,
		awords = params.awords,
		identifyUrl = params.identifyUrl,
		liveUrl = params.liveUrl,
		visitCount = params.visitCount,
		voteCount = params.voteCount,
		commentCount = params.commentCount,
		createDate = params.createDate,
		updateDate = params.updateDate,
	}

	es:insertOne(data, function(err, data) log(err); log(data) end)
end

-- 删除ES记录
function website_works:delete_to_es(params)
	params.id = params._id
	params.type = indexType

	es:deleteOne(params, function(err, data) end)
end

function website_works:search(params) 
	if not params.websiteId then
		return 
	end

	params.websiteId = tonumber(params.websiteId)
	local order = params.order or {}
	local keyword = "*" .. (params.keyword or "") .. "*"
	local must = {
		{
			bool = {
				should = {
					{
						wildcard = {
							username = keyword,
						}
					},
					{
						wildcard = {
							worksName = keyword,
						}
					},
					{
						wildcard = {
							realname = keyword,
						}
					},
					{
						wildcard = {
							worksId = keyword,
						}
					},
				}
			}
		},
		{
			term = {
				websiteId = params.websiteId,
			}
		},
		{
			term = {
				worksState = const.WEBSITE_WORKS_STATE_NORMAL,
			}
		}
	}
	if params.awords then
		must[#must+1] = {
			match = {
				awords = params.awords,
			},
		}
	end

	if params.worksFlag then
		must[#must+1] = {
			term = {
				worksFlag = params.worksFlag,
			}		
		}
	end

	--if params.worksId then
		--must[#must+1] = {
			--term = {
				--worksId = params.worksId,
			--}		
		--}
	--end

	local body = {
		query = {
			bool = {
				must = must,
			} 
		},
		sort = {
			createDate= {
				order = order.createDate or "desc", -- asc 
			},
			visitCount= {
				order = order.visitCount or "desc",
			},
			voteCount = {
				order = order.voteCount or "desc",
			},
		}
	}

	body.size = tonumber(params.size);
	body.from = tonumber(params.from);
	
	es:search({type=indexType, body=body}, resume)
	local  err, data = yield()
	--log(body)
	--log(data)
	return err, data.data
end

function website_works:api_search(params)
	local err, data = self:search(params)
	if not data or not data.hits then
		return errors:wrap(nil, {total=0, list={}})
	end

	--log(data)
	local total = data.hits.total;
	local items = data.hits.hits;
	local list = {}
	local item = nil
	for _, val in ipairs(items or {}) do
		item = val._source
		item.commentCount = commentModel:getCountByUrl(item.worksUrl)
		list[#list+1] = item
	end
	return errors:wrap(nil, {total=total, list=list})
end

-- 创建站点作品
function website_works:api_upsert(params) 
	local username = getUsername()

	if username ~= params.username or (not params.websiteId) or (not params.worksUrl) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.websiteId = tonumber(params.websiteId)
	params.voteCount = nil
	params.visitCount = nil
	params.commentCount = nil
	params.updateDate = ParaGlobal.GetDateFormat("yyyy-MM-dd") .. " " .. ParaGlobal.GetTimeFormat("HH:mm:ss")
	params.createDate = params.createDate or params.updateDate
	--log(params)
	
	self:db():insertOne({["+websiteId+worksUrl"]={params.websiteId, params.worksUrl}}, params, resume)
	local err, data = yield()
	
	self:insert_to_es(data)

	return errors:wrap(err, data)
end

-- 移除作品
function website_works:api_deleteById(params)
	local username = getUsername()
	if not params._id or not username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params._id = tonumber(params._id)

	self:db():findOne({_id=params._id}, resume)
	local _, data = yield()
	if not data  or data.username ~= username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:delete_to_es(params)

	self:db():deleteOne({_id=params._id}, resume)

	return errors:wrap(yield())
end

-- 更新访问数量
function website_works:api_updateVisitCount(params) 
	if not params.worksUrl then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	self:db():findOne({["+worksUrl"]={params.worksUrl}}, resume)
	local _, data = yield()

	if not data then return errors:wrap("记录未找到") end

	data.visitCount = (data.visitCount or 0) + 1

	self:db():updateOne({["+worksUrl"]={params.worksUrl}}, data, resume)
	return errors:wrap(yield())
end

-- 投票
function website_works:api_vote(params) 
	if not params.websiteId or not params.worksUrl then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.websiteId = tonumber(params.websiteId)
	self:db():findOne({["+websiteId+worksUrl"]={params.websiteId, params.worksUrl}}, resume)
	local _, works = yield()
	if not works then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local date = ParaGlobal.GetDateFormat("yyyy-MM-dd")
	local ip = getpeername()
	local key = cacheKeyPrefix .. ip;
	local data = mem_cache:get(key) or {date = date, count = 0}

	if data.date ~= date then 
		data.date = date
		data.count = 0 
	end
	if data.count >= 10 then
		return errors:wrap(nil)
	end

	data.count = data.count + 1
	mem_cache:set(key, data, nil, 60 * 60  * 24)

	works.voteCount = (works.voteCount or 0) + 1

	self:insert_to_es(works)
	self:db():insertOne({["+websiteId+worksUrl"]={params.websiteId, params.worksUrl}}, works, resume)
	return errors:wrap(yield())
end

-- 通过websiteId删除
function website_works:api_deleteByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.websiteId = tonumber(params.websiteId)
	self:db():delete({["+websiteId"]={params.websiteId}}, resume)
	
	return errors:wrap(yield())
end

-- 提交作品申请
function website_works:api_submitWorksApply(params)
	params.worksState = const.WEBSITE_WORKS_STATE_APPLY

	return self:api_upsert(params)
end

-- 同意作品申请
function website_works:api_agreeWorksApply(params)
	params.worksState = const.WEBSITE_WORKS_STATE_NORMAL
	
	return self:api_upsert(params) 
end

-- 获取作品申请列表
function website_works:api_getApplyByWebsiteId(params)
	if (not params.websiteId) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.websiteId = tonumber(params.websiteId)
	local skip, limit = util:pagination(params)
	self:db():find({["+websiteId+worksState"] = {params.websiteId, const.WEBSITE_WORKS_STATE_APPLY, skip=skip, limit=limit}}, resume)
	local _, worksList = yield()
	
	self:db():count({["+websiteId+worksState"] = {params.websiteId, const.WEBSITE_WORKS_STATE_APPLY}}, resume)
	local _, total = yield()

	return errors:wrap(nil, {total=total, worksList=worksList})
end

-- 获取站点作品数量
function website_works:api_getCountByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.websiteId = tonumber(params.websiteId)
	self:db():count({["+websiteId+worksState"] = {params.websiteId, const.WEBSITE_WORKS_STATE_NORMAL}}, resume)
	
	return errors:wrap(yield())
end


-- 获取作品列表
function website_works:api_getByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local total = self:api_getCountByWebsiteId(params).data or 0	
	local skip, limit = util:pagination(params)	

	params.websiteId = tonumber(params.websiteId)
	self:db():find({["+websiteId+worksState"]={params.websiteId, const.WEBSITE_WORKS_STATE_NORMAL, skip=skip, limit=limit}}, resume)
	local _, worksList = yield()

	return errors:wrap(nil, {total=total, worksList=worksList})
end

-- 获取单个用户的作品列表
function website_works:api_getByUsername(params)
	local username = getUsername()
	if not params.websiteId or not username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.websiteId = tonumber(params.websiteId)
	self:db():find({["+websiteId+username"] = {params.websiteId, username}}, resume)

	return errors:wrap(yield())
end

-- 获取单个用户的作品列表
function website_works:api_getNormalByUsername(params)
	local username = getUsername()
	if not params.websiteId or not username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.websiteId = tonumber(params.websiteId)
	self:db():find({["+websiteId+worksState+username"] = {params.websiteId, const.WEBSITE_WORKS_STATE_NORMAL, username}}, resume)

	return errors:wrap(yield())
end

-- 获取单个用户的申请作品列表
function website_works:api_getApplyByUsername(params)
	local username = getUsername()
	if not params.websiteId or not username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	params.websiteId = tonumber(params.websiteId)
	self:db():find({["+websiteId+worksState+username"] = {params.websiteId, const.WEBSITE_WORKS_STATE_APPLY, username}}, resume)

	return errors:wrap(yield())
end

-- 通过单个作品
function website_works:api_getByWorksUrl(params)
	if not params.websiteId or not params.worksUrl then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	self:db():findOne({["+websiteId+worksUrl"] = {params.websiteId, params.worksUrl}}, resume)
	
	return errors:wrap(yield())
end

-- 获取作品列表通过url
function website_works:api_getByWorksUrlList(params)
	if (not params.websiteId) or (not params.worksUrlList) then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	local worksList = {}
	for _, worksUrl in ipairs(params.worksUrlList or {}) do
		self:db():findOne({["+websiteId+worksUrl"]={params.websiteId, worksUrl}}, resume)
		local _, works = yield()
		worksList[#worksList+1] = works
	end

	return errors:wrap(nil, {total=#worksList, worksList=worksList})
end

-- 获取数量
function website_works:api_getCount(query)
	self:db():count(query, resume)
	local err, data = yield()
	
	return errors:wrap(err, data or 0)
end

-- 获得取作品列表
function website_works:api_get(query)
	self:db():find(query, resume)
	local err, data = yield()
	if err or (not data) then
		return errors:wrap(err or errors.NOT_FOUND, data)
	end
	
	return errors:wrap(nil, data)
end


-- 获取入围作品的数量
function website_works:api_getUpgradeCountByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local query = {["+websiteId+worksFlag"] = {params.websiteId, const.WORKS_FLAG_UPGRADE}}	
	return self:api_getCount(query)
end

-- 获取入围作品
function website_works:api_getUpgradeByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local skip, limit = util:pagination(params)
	local total = self:api_getUpgradeCountByWebsiteId(params).data
	local query = {["+websiteId+worksFlag"] = {params.websiteId, const.WORKS_FLAG_UPGRADE,skip=skip, limit=limit}}	
	local siteObj = self:api_get(query)
	
	return errors:wrap(nil, {total=total, worksList=siteObj.data})
end

-- 获取热门作品的数量
function website_works:api_getHotCountByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local query = {["+websiteId+worksFlag"] = {params.websiteId, const.WORKS_FLAG_HOT}}	
	return self:api_getCount(query)
end

-- 获取热门作品
function website_works:api_getHotByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local skip, limit = util:pagination(params)
	local total = self:api_getHotCountByWebsiteId(params).data
	local query = {["+websiteId+worksFlag"] = {params.websiteId, const.WORKS_FLAG_HOT,skip=skip, limit=limit}}	
	local siteObj = self:api_get(query)
	
	return errors:wrap(nil, {total=total, worksList=siteObj.data})
end

-- 获得最近加入的数量
function website_works:api_getLatestCountByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local startDate = params.startDate or ""
	local query = {["+websiteId-createDate"] = {params.websiteId, gt=startDate}}	
	return self:api_getCount(query)
end

-- 获取最近加入的作品
function website_works:api_getLatestByWebsiteId(params)
	if not params.websiteId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local startDate = params.startDate or ""
	local skip, limit = util:pagination(params)
	local total = self:api_getLatestCountByWebsiteId(params).data
	local query = {["+websiteId-createDate"]={params.websiteId, gt=startDate, skip=skip, limit=limit}}
	local worksList = self:api_get(query).data
	
	return errors:wrap(nil, {total=total, worksList=worksList})
end

























