<?npl
--[[
Title: routing ajax/html requests
Author: LiXizhi
Date: 2016/6/29
Desc: redirect AJAX URL to model functions
Reference: http://guides.rubyonrails.org/routing.html

Mapping of CRUD AJAX operations: 
- PUT "/api/wiki/models/user/new" --> wiki/models/user:create()
- GET "/api/wiki/models/user" --> wiki/models/user:get()
- PUT "/api/wiki/models/user" --> wiki/models/user:update()
- DELETE "/api/wiki/models/user" --> wiki/models/user:delete()
- XXX "/api/wiki/models/user/[anyfunc]" --> wiki/models/user:api_[anyfunc]()

Everything else is mapped to `wiki.page` as standard html file.
]]
local path = pagename() or "";
-- this is for hosting wikicraft project in a different folder than webroot such as in NPL code wiki.
WIKI_WEBROOT = WIKI_WEBROOT or "/wiki/";
WIKI_ROOT = dirname(__FILE__);

local ajax_path = path:match("^/?api/wiki/(.+)");
if(ajax_path) then	
	-- Allow for cross-domain requests (from the frontend). 
	send_origin_headers();
	-- cross-domain request allow
	addheader('Access-Control-Allow-Origin','*');  -- debug use
	addheader('Access-Control-Allow-Methods',"GET, POST, PUT, DELETE");  -- debug use
	addheader("Access-Control-Allow-Headers", "Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With"); -- debug use

	addheader( 'Content-Type', 'text/html'); 
	addheader( 'X-Robots-Tag', 'noindex'); 
	send_nosniff_header();
	nocache_headers();	

	-- debug use start
	if request:GetMethod() == "OPTIONS" then 
		return response:send("OPTIONS", true);
	end
	-- end

	local modelname, params = ajax_path:match("^models/([%w_]+)/?(.*)")
	if(modelname) then
		local modelfilename = "./models/"..modelname..".page";
		if(not file_exists(modelfilename)) then
			return response:status(404):send({message="invalid model"});
		end
		include_once(modelfilename);
		
		local model = models and models[modelname];
		if(not model) then
			return response:status(404):send({message="model not found"});
		else
			model = model:new();
		end

		local func_name = params and params:match("^(%w+)");
		if(func_name) then
			if(func_name == "new") then
				if(model.create) then
					local result = model:create(request:getparams());
					return response:send(result, true);
				end
			else
				local name = "api_"..func_name;
				if(model[name]) then
					local result = model[name](model, request:getparams())
					return response:send(result, true);
				end
			end
		end

		-- redirect CRUD URL to method in model.
		local req_method = request:GetMethod();
		if(req_method == "GET" or req_method == "POST") then
			if(model.get) then
				local result = model:get(request:getparams());
				return response:send(result, true);
			end
		elseif(req_method == "PUT") then
			if(model.update) then
				local result = model:update(request:getparams());
				return response:send(result, true);
			end
		elseif(req_method == "DELETE") then
			if(model.delete) then
				local result = model:delete(request:getparams());
				return response:send(result, true);
			end
		end
	else
		-- only allow ajax in wiki folder
		include( "./"..ajax_path..".page" );
	end
	return;
else
	-- dynamic page has no cache headers
	response:nocache_headers();
end
?>

<?npl
local host = request:GetHost() or ""
local sitename = (request:GetHost() or ""):match("([%w]+)%.[%w]+%.[%w]+")
-- 排除IP地址访问
if (host:match("^%d+%.%d+%.%d+%.%d+$")) or (host:match("^%d+%.%d+%.%d+%.%d+:%d+$")) or (sitename == "www") then
	sitename = nil
end
if sitename == nil then 
	local url = commonlib.Encoding.url_decode(request:url())
	sitename = url:match("^/?([^/]+)")	
end
if sitename == nil or sitename == "wiki" then
	include(WIKI_ROOT.."wiki.page")
else
	include(WIKI_ROOT .. "index.page")
end
?>
