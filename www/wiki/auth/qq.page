<?npl
--[[
Title: oauth handler for `satellizer oauth framework`
Author: LiXizhi
Date: 2016/5/10
]]

local accessTokenUrl = 'https://graph.qq.com/oauth2.0/token'
local openidApiUrl = 'https://graph.qq.com/oauth2.0/me'
local userApiUrl = 'https://graph.qq.com/user/get_user_info'

local serviceName = "qq"
local params = {
	grant_type="authorization_code",
	code = request:get("code"),
	client_id = request:get("clientId"),
	client_secret = KEEPWORK["config"][CURRENT_ENV]["threeService"]["qq"]["client_secret"],
	redirect_uri = request:get("redirectUri"),
}

response:Begin()
if not params.client_id then
	return response:send_xml("keepwork.com认证")
end
-- Step 1. Exchange authorization code for access token.
util.GetUrl({url = accessTokenUrl, qs = params }, resume)
local err, data = yield()
local accessToken = util.parse_str(data.data)
log("auth step 1")
LOG.std(nil, "error", "keepwork", accessToken)
if not accessToken or accessToken.error or not accessToken.access_token then
	return response:send({error=1, message="access token invaild"})
end

local headers = { ['User-Agent'] = 'Satellizer' };
-- Step 2. Retrieve profile information about the current user.
util.GetUrl({ url = openidApiUrl .. '?access_token=' .. accessToken.access_token, headers = headers, json = true }, resume)
local err, data = yield()
data = data.data
log("auth step 2")
LOG.std(nil, "error", "keepwork", data)

if((not data) or (not string.find(data,"callback"))) then
	return response:send({error=1, message= 'Failed to fetch user openid' })
end

local leftStart, leftEnd = string.find(data, "%(")
local rightStart, rightEnd = string.find(data, "%)")
data = string.sub(data, leftEnd+1, rightStart-1)
log(data)
data = commonlib.Json.Decode(data)
log(data)
local serviceId = data.openid
local accessToken = accessToken.access_token

util.GetUrl({url=userApiUrl, qs={access_token=accessToken, oauth_consumer_key=params.client_id, openid=serviceId}}, resume)
local err, data = yield()
data = commonlib.Json.Decode(data.data)
log("---------------get user info ------------------")
LOG.std(nil, "error", "keepwork", data)
local serviceUsername = data.nickname

-- 未登录
db.user_three_service:findOne({["+serviceId+serviceName"]={serviceId, serviceName}}, resume)
local err, userThreeService = yield()

-- 是否已经登录
local username = getUsername()
if username then
	if (userThreeService and userThreeService.username and userThreeService.username ~= username) then
		return response:send({error=0, message="账号已被绑定:" .. userThreeService.username})
	end

	db.user_three_service:insertOne({["+serviceId+serviceName"]={serviceId, serviceName}}, {username=username, serviceId=serviceId, serviceName=serviceName, token=accessToken, serviceUsername=serviceUsername}, resume)
	yield()

	return response:send({token = token, error=0, message="OK"})
end

-- 没有绑定
if not userThreeService then
	db.user_three_service:insertOne({["+serviceId+serviceName"]={serviceId, serviceName}}, {serviceId=serviceId, serviceName=serviceName, token=accessToken, serviceUsername=serviceUsername}, resume)
	yield()
	return response:send({error=0, data={serviceId=serviceId, access_token=accessToken, serviceName=serviceName}, message="user not found"})
else
	if not userThreeService.serviceUsername then
		db.user_three_service:updateOne({["+serviceId+serviceName"]={serviceId, serviceName}}, {serviceUsername=serviceUsername}, resume)
		yield()
	end
end

if not userThreeService.username then
	return response:send({error=0, message="user not bind"})
end
db.user:findOne({["+username"]=userThreeService.username}, resume)
local err, userinfo = yield()
if not userinfo then
	return response:send({error=0, data={serviceId=serviceId, access_token=accessToken, serviceName=serviceName}, message="user not found"})
end
local token = encodeJWT({userId=userinfo._id, username=userinfo.username})
setAuthCookie(token)
return response:send({token = token, data = userinfo, error=0, message="OK"})

