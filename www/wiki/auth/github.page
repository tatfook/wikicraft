<?npl
--[[
Title: oauth handler for `satellizer oauth framework`
Author: LiXizhi
Date: 2016/5/10
]]

include_once("../models/data_source.page")

local accessTokenUrl = 'https://github.com/login/oauth/access_token'
local userApiUrl = 'https://api.github.com/user'
local serviceName = "github"
local params = {
	code = request:get("code"),
	client_id = request:get("clientId"),
	client_secret = KEEPWORK["config"][CURRENT_ENV]["threeService"]["github"]["client_secret"],
	redirect_uri = request:get("redirectUri"),
};

response:Begin()
if not params.client_id then
    return response:send_xml("keepwork.com认证")
end
-- Step 1. Exchange authorization code for access token.
System.os.GetUrl({url = accessTokenUrl, qs = params }, resume)
local err, data = yield()
data = data.data
local accessToken = util.parse_str(data);
log("auth step 1")
log(accessToken)
if(accessToken and accessToken.error) then
	return response:send({error=1, message="access token invaild"})
end

local headers = { ['User-Agent'] = 'Satellizer' };
-- Step 2. Retrieve profile information about the current user.
System.os.GetUrl({ url = userApiUrl .. '?access_token=' .. accessToken.access_token, headers = headers, json = true }, resume)
local err, data = yield()
data = data.data
log("auth step 2")
LOG.std(nil,"error","keepwork", toJson(data))
if(not data) then
	return response:send({error=1, message= 'Failed to fetch user info' })
end
local githubId = tostring(data.id)
local serviceUsername = data.login

-- 未登录
db.user_three_service:findOne({["+serviceId+serviceName"]={githubId, serviceName}}, resume)
local err, userThreeService = yield()

-- 是否已经登录
local username = getUsername()
if username then
	if (userThreeService and userThreeService.username and userThreeService.username ~= username) then
		return response:send({error=0, message="账号已被绑定:" .. userThreeService.username})
	end

	db.user_three_service:insertOne({["+serviceId+serviceName"]={githubId, serviceName}}, {username=username, serviceId=githubId, serviceName=serviceName, token=accessToken.access_token, serviceUsername=serviceUsername}, resume)
	yield()
	db.user:findOne({["+username"]={username}}, resume)
	local err, userinfo = yield()
	if not userinfo then
		return response:send({error=0, data={serviceId=githubId, access_token=accessToken.access_token, serviceName=serviceName}, message="user not found"})
	end

	models.data_source:new():api_githubLinkGitlab({username=userinfo.username, githubUserId=githubId})
	local token = encodeJWT({userId=userinfo._id, username=userinfo.username})
	return response:send({token = token, data = userinfo, error=0, message="OK"})
end

-- 没有绑定
if not userThreeService then
	db.user_three_service:insertOne({["+serviceId+serviceName"]={githubId, serviceName}}, {serviceId=githubId, serviceName=serviceName, token=accessToken.access_token, serviceUsername=serviceUsername}, resume)
	yield()
	return response:send({error=0, data={serviceId=githubId, access_token=accessToken.access_token, serviceName=serviceName}, message="user not found"})
else
	if not userThreeService.serviceUsername then
		db.user_three_service:updateOne({["+serviceId+serviceName"]={serviceId, serviceName}}, {serviceUsername=serviceUsername}, resume)
		yield()
	end
	
end

if not userThreeService.username then
	return response:send({error=0, data={serviceId=githubId, access_token=accessToken.access_token, serviceName=serviceName}, message="user not bind"})
end

db.user:findOne({["+username"]={userThreeService.username}}, resume)
local err, userinfo = yield()
if not userinfo then
	return response:send({error=0, data={serviceId=githubId, access_token=accessToken.access_token, serviceName=serviceName}, message="user not found"})
end

models.data_source:new():api_githubLinkGitlab({username=userinfo.username, githubUserId=githubId})
local token = encodeJWT({userId=userinfo._id, username=userinfo.username})

setAuthCookie(token)
return response:send({token = token, data = userinfo, error=0, message="OK"})


























